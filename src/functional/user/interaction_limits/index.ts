import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { response } from "../../../structures/response";
import { interaction_minus_limit } from "../../../structures/interaction_minus_limit";
import { interaction_minus_limit_minus_response } from "../../../structures/interaction_minus_limit_minus_response";
/**
 * Get interaction restrictions for your public repositories.
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
 *
 * @tag interactions
 * @path user/interaction-limits
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(connection: IConnection): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/user/interaction-limits",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/interaction-limits";
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Set interaction restrictions for your public repositories.
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
 *
 * @tag interactions
 * @path user/interaction-limits
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function put(
  connection: IConnection,
  body: put.Input,
): Promise<put.Output> {
  return !!connection.simulate
    ? put.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...put.METADATA,
          path: put.path(),
          status: null,
        },
        body,
      );
}
export namespace put {
  export type Input = interaction_minus_limit;
  export type Output = interaction_minus_limit_minus_response;

  export const METADATA = {
    method: "PUT",
    path: "/user/interaction-limits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/interaction-limits";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): interaction_minus_limit_minus_response =>
    typia.random<interaction_minus_limit_minus_response>(g);
  export const simulate = (
    connection: IConnection,
    body: put.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: put.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove interaction restrictions from your public repositories.
 * Removes any interaction restrictions from your public repositories.
 *
 * @tag interactions
 * @path user/interaction-limits
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(connection: IConnection): Promise<void> {
  return !!connection.simulate
    ? erase.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(),
          status: null,
        },
      );
}
export namespace erase {
  export const METADATA = {
    method: "DELETE",
    path: "/user/interaction-limits",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/interaction-limits";
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (connection: IConnection): void => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
