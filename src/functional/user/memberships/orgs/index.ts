import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUserMembershipsOrgs } from "../../../../structures/IApiUserMembershipsOrgs";
import { body } from "../../../../structures/body";
import { org_minus_membership } from "../../../../structures/org_minus_membership";

/**
 * List organization memberships for the authenticated user.
 * Lists all of the authenticated user's organization memberships.
 *
 * @tag orgs
 * @path user/memberships/orgs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
  query: get.Query,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(query),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiUserMembershipsOrgs.GetHeader;
  export type Query = IApiUserMembershipsOrgs.GetQuery;
  export type Output = org_minus_membership[];

  export const METADATA = {
    method: "GET",
    path: "/user/memberships/orgs",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (query: get.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/user/memberships/orgs";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): org_minus_membership[] => typia.random<org_minus_membership[]>(g);
  export const simulate = (
    connection: IConnection<get.Headers>,
    query: get.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: get.path(query),
      contentType: "application/json",
    });
    try {
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an organization membership for the authenticated user.
 * If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
 *
 * @tag orgs
 * @path user/memberships/orgs/:org
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiUserMembershipsOrgs.GetHeader;
  export type Output = org_minus_membership;

  export const METADATA = {
    method: "GET",
    path: "/user/memberships/orgs/:org",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/user/memberships/orgs/${encodeURIComponent(org ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): org_minus_membership => typia.random<org_minus_membership>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update an organization membership for the authenticated user.
 * Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
 *
 * @tag orgs
 * @path user/memberships/orgs/:org
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOrg(
  connection: IConnection<patchByOrg.Headers>,
  org: string,
  body: patchByOrg.Input,
): Promise<patchByOrg.Output> {
  return !!connection.simulate
    ? patchByOrg.simulate(connection, org, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOrg.METADATA,
          path: patchByOrg.path(org),
          status: null,
        },
        body,
      );
}
export namespace patchByOrg {
  export type Headers = IApiUserMembershipsOrgs.PatchHeader;
  export type Input = body;
  export type Output = org_minus_membership;

  export const METADATA = {
    method: "PATCH",
    path: "/user/memberships/orgs/:org",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/user/memberships/orgs/${encodeURIComponent(org ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): org_minus_membership => typia.random<org_minus_membership>(g);
  export const simulate = (
    connection: IConnection<patchByOrg.Headers>,
    org: string,
    body: patchByOrg.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
