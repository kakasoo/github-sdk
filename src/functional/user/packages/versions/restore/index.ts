import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiUserPackagesVersionsRestore } from "../../../../../structures/IApiUserPackagesVersionsRestore";
/**
 * Restore a package version for the authenticated user.
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 *
 * @tag packages
 * @path user/packages/:package_type/:package_name/versions/:package_version_id/restore
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByPackage_typeAndPackage_nameAndPackage_version_id(
  connection: IConnection<postByPackage_typeAndPackage_nameAndPackage_version_id.Headers>,
  package_type: string,
  package_name: string,
  package_version_id: string,
): Promise<void> {
  return !!connection.simulate
    ? postByPackage_typeAndPackage_nameAndPackage_version_id.simulate(
        connection,
        package_type,
        package_name,
        package_version_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByPackage_typeAndPackage_nameAndPackage_version_id.METADATA,
          path: postByPackage_typeAndPackage_nameAndPackage_version_id.path(
            package_type,
            package_name,
            package_version_id,
          ),
          status: null,
        },
      );
}
export namespace postByPackage_typeAndPackage_nameAndPackage_version_id {
  export type Headers = IApiUserPackagesVersionsRestore.PostHeader;

  export const METADATA = {
    method: "POST",
    path: "/user/packages/:package_type/:package_name/versions/:package_version_id/restore",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    package_type: string,
    package_name: string,
    package_version_id: string,
  ) =>
    `/user/packages/${encodeURIComponent(package_type ?? "null")}/${encodeURIComponent(package_name ?? "null")}/versions/${encodeURIComponent(package_version_id ?? "null")}/restore`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<postByPackage_typeAndPackage_nameAndPackage_version_id.Headers>,
    package_type: string,
    package_name: string,
    package_version_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByPackage_typeAndPackage_nameAndPackage_version_id.path(
        package_type,
        package_name,
        package_version_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("package_type")(() => typia.assert(package_type));
      assert.param("package_name")(() => typia.assert(package_name));
      assert.param("package_version_id")(() =>
        typia.assert(package_version_id),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
