import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiUserCodespacesPublish } from "../../../../structures/IApiUserCodespacesPublish";
import { body } from "../../../../structures/body";
import { codespace_minus_with_minus_full_minus_repository } from "../../../../structures/codespace_minus_with_minus_full_minus_repository";
/**
 * Create a repository from an unpublished codespace.
 * Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
 *
 * The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
 *
 * This will fail for a codespace that is already published, meaning it has an associated repository.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/:codespace_name/publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByCodespace_name(
  connection: IConnection<postByCodespace_name.Headers>,
  codespace_name: string,
  body: postByCodespace_name.Input,
): Promise<postByCodespace_name.Output> {
  return !!connection.simulate
    ? postByCodespace_name.simulate(connection, codespace_name, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByCodespace_name.METADATA,
          path: postByCodespace_name.path(codespace_name),
          status: null,
        },
        body,
      );
}
export namespace postByCodespace_name {
  export type Headers = IApiUserCodespacesPublish.PostHeader;
  export type Input = body;
  export type Output = codespace_minus_with_minus_full_minus_repository;

  export const METADATA = {
    method: "POST",
    path: "/user/codespaces/:codespace_name/publish",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (codespace_name: string) =>
    `/user/codespaces/${encodeURIComponent(codespace_name ?? "null")}/publish`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): codespace_minus_with_minus_full_minus_repository =>
    typia.random<codespace_minus_with_minus_full_minus_repository>(g);
  export const simulate = (
    connection: IConnection<postByCodespace_name.Headers>,
    codespace_name: string,
    body: postByCodespace_name.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByCodespace_name.path(codespace_name),
      contentType: "application/json",
    });
    try {
      assert.param("codespace_name")(() => typia.assert(codespace_name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
