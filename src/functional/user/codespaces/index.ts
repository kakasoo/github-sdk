import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiUserCodespaces } from "../../../structures/IApiUserCodespaces";
import { response } from "../../../structures/response";
import { body } from "../../../structures/body";
import { codespace } from "../../../structures/codespace";
export * as secrets from "./secrets";
export * as exports from "./exports";
export * as machines from "./machines";
export * as publish from "./publish";
export * as start from "./start";
export * as stop from "./stop";
/**
 * List codespaces for the authenticated user.
 * Lists the authenticated user's codespaces.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiUserCodespaces.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/user/codespaces",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/codespaces";
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (connection: IConnection<get.Headers>): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a codespace for the authenticated user.
 * Creates a new codespace, owned by the authenticated user.
 *
 * This endpoint requires either a `repository_id` OR a `pull_request` but not both.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function post(
  connection: IConnection,
  body: post.Input,
): Promise<post.Output> {
  return !!connection.simulate
    ? post.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        body,
      );
}
export namespace post {
  export type Input = body;
  export type Output = codespace;

  export const METADATA = {
    method: "POST",
    path: "/user/codespaces",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/codespaces";
  export const random = (g?: Partial<typia.IRandomGenerator>): codespace =>
    typia.random<codespace>(g);
  export const simulate = (
    connection: IConnection,
    body: post.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a codespace for the authenticated user.
 * Gets information about a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/:codespace_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByCodespace_name(
  connection: IConnection<getByCodespace_name.Headers>,
  codespace_name: string,
): Promise<getByCodespace_name.Output> {
  return !!connection.simulate
    ? getByCodespace_name.simulate(connection, codespace_name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByCodespace_name.METADATA,
          path: getByCodespace_name.path(codespace_name),
          status: null,
        },
      );
}
export namespace getByCodespace_name {
  export type Headers = IApiUserCodespaces.GetHeader;
  export type Output = codespace;

  export const METADATA = {
    method: "GET",
    path: "/user/codespaces/:codespace_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (codespace_name: string) =>
    `/user/codespaces/${encodeURIComponent(codespace_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): codespace =>
    typia.random<codespace>(g);
  export const simulate = (
    connection: IConnection<getByCodespace_name.Headers>,
    codespace_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByCodespace_name.path(codespace_name),
      contentType: "application/json",
    });
    try {
      assert.param("codespace_name")(() => typia.assert(codespace_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a codespace for the authenticated user.
 * Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
 *
 * If you specify a new machine type it will be applied the next time your codespace is started.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/:codespace_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByCodespace_name(
  connection: IConnection<patchByCodespace_name.Headers>,
  codespace_name: string,
  body: patchByCodespace_name.Input,
): Promise<patchByCodespace_name.Output> {
  return !!connection.simulate
    ? patchByCodespace_name.simulate(connection, codespace_name, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByCodespace_name.METADATA,
          path: patchByCodespace_name.path(codespace_name),
          status: null,
        },
        body,
      );
}
export namespace patchByCodespace_name {
  export type Headers = IApiUserCodespaces.PatchHeader;
  export type Input = body;
  export type Output = codespace;

  export const METADATA = {
    method: "PATCH",
    path: "/user/codespaces/:codespace_name",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (codespace_name: string) =>
    `/user/codespaces/${encodeURIComponent(codespace_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): codespace =>
    typia.random<codespace>(g);
  export const simulate = (
    connection: IConnection<patchByCodespace_name.Headers>,
    codespace_name: string,
    body: patchByCodespace_name.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByCodespace_name.path(codespace_name),
      contentType: "application/json",
    });
    try {
      assert.param("codespace_name")(() => typia.assert(codespace_name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a codespace for the authenticated user.
 * Deletes a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/:codespace_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByCodespace_name(
  connection: IConnection<eraseByCodespace_name.Headers>,
  codespace_name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByCodespace_name.simulate(connection, codespace_name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByCodespace_name.METADATA,
          path: eraseByCodespace_name.path(codespace_name),
          status: null,
        },
      );
}
export namespace eraseByCodespace_name {
  export type Headers = IApiUserCodespaces.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/user/codespaces/:codespace_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (codespace_name: string) =>
    `/user/codespaces/${encodeURIComponent(codespace_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByCodespace_name.Headers>,
    codespace_name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByCodespace_name.path(codespace_name),
      contentType: "application/json",
    });
    try {
      assert.param("codespace_name")(() => typia.assert(codespace_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
