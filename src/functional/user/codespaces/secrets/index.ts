import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUserCodespacesSecrets } from "../../../../structures/IApiUserCodespacesSecrets";
import { body } from "../../../../structures/body";
import { codespaces_minus_secret } from "../../../../structures/codespaces_minus_secret";
import { empty_minus_object } from "../../../../structures/empty_minus_object";
import { response } from "../../../../structures/response";

export * as public_key from "./public_key";
export * as repositories from "./repositories";
/**
 * List secrets for the authenticated user.
 * Lists all development environment secrets available for a user's codespaces without revealing their
 * encrypted values.
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/secrets
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiUserCodespacesSecrets.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/user/codespaces/secrets",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/codespaces/secrets";
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (connection: IConnection<get.Headers>): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a secret for the authenticated user.
 * Gets a development environment secret available to a user's codespaces without revealing its encrypted value.
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/secrets/:secret_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getBySecret_name(
  connection: IConnection<getBySecret_name.Headers>,
  secret_name: string,
): Promise<getBySecret_name.Output> {
  return !!connection.simulate
    ? getBySecret_name.simulate(connection, secret_name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getBySecret_name.METADATA,
          path: getBySecret_name.path(secret_name),
          status: null,
        },
      );
}
export namespace getBySecret_name {
  export type Headers = IApiUserCodespacesSecrets.GetHeader;
  export type Output = codespaces_minus_secret;

  export const METADATA = {
    method: "GET",
    path: "/user/codespaces/secrets/:secret_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (secret_name: string) =>
    `/user/codespaces/secrets/${encodeURIComponent(secret_name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): codespaces_minus_secret => typia.random<codespaces_minus_secret>(g);
  export const simulate = (
    connection: IConnection<getBySecret_name.Headers>,
    secret_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getBySecret_name.path(secret_name),
      contentType: "application/json",
    });
    try {
      assert.param("secret_name")(() => typia.assert(secret_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create or update a secret for the authenticated user.
 * Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/secrets/:secret_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putBySecret_name(
  connection: IConnection<putBySecret_name.Headers>,
  secret_name: string,
  body: putBySecret_name.Input,
): Promise<putBySecret_name.Output> {
  return !!connection.simulate
    ? putBySecret_name.simulate(connection, secret_name, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putBySecret_name.METADATA,
          path: putBySecret_name.path(secret_name),
          status: null,
        },
        body,
      );
}
export namespace putBySecret_name {
  export type Headers = IApiUserCodespacesSecrets.PutHeader;
  export type Input = body;
  export type Output = empty_minus_object;

  export const METADATA = {
    method: "PUT",
    path: "/user/codespaces/secrets/:secret_name",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (secret_name: string) =>
    `/user/codespaces/secrets/${encodeURIComponent(secret_name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): empty_minus_object => typia.random<empty_minus_object>(g);
  export const simulate = (
    connection: IConnection<putBySecret_name.Headers>,
    secret_name: string,
    body: putBySecret_name.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putBySecret_name.path(secret_name),
      contentType: "application/json",
    });
    try {
      assert.param("secret_name")(() => typia.assert(secret_name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a secret for the authenticated user.
 * Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/secrets/:secret_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseBySecret_name(
  connection: IConnection<eraseBySecret_name.Headers>,
  secret_name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseBySecret_name.simulate(connection, secret_name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseBySecret_name.METADATA,
          path: eraseBySecret_name.path(secret_name),
          status: null,
        },
      );
}
export namespace eraseBySecret_name {
  export type Headers = IApiUserCodespacesSecrets.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/user/codespaces/secrets/:secret_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (secret_name: string) =>
    `/user/codespaces/secrets/${encodeURIComponent(secret_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseBySecret_name.Headers>,
    secret_name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseBySecret_name.path(secret_name),
      contentType: "application/json",
    });
    try {
      assert.param("secret_name")(() => typia.assert(secret_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
