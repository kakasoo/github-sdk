import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiUserCodespacesSecretsRepositories } from "../../../../../structures/IApiUserCodespacesSecretsRepositories";
import { response } from "../../../../../structures/response";
import { body } from "../../../../../structures/body";
/**
 * List selected repositories for a user secret.
 * List the repositories that have been granted the ability to use a user's development environment secret.
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/secrets/:secret_name/repositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getBySecret_name(
  connection: IConnection<getBySecret_name.Headers>,
  secret_name: string,
): Promise<getBySecret_name.Output> {
  return !!connection.simulate
    ? getBySecret_name.simulate(connection, secret_name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getBySecret_name.METADATA,
          path: getBySecret_name.path(secret_name),
          status: null,
        },
      );
}
export namespace getBySecret_name {
  export type Headers = IApiUserCodespacesSecretsRepositories.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/user/codespaces/secrets/:secret_name/repositories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (secret_name: string) =>
    `/user/codespaces/secrets/${encodeURIComponent(secret_name ?? "null")}/repositories`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getBySecret_name.Headers>,
    secret_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getBySecret_name.path(secret_name),
      contentType: "application/json",
    });
    try {
      assert.param("secret_name")(() => typia.assert(secret_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Set selected repositories for a user secret.
 * Select the repositories that will use a user's development environment secret.
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/secrets/:secret_name/repositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putBySecret_name(
  connection: IConnection<putBySecret_name.Headers>,
  secret_name: string,
  body: putBySecret_name.Input,
): Promise<void> {
  return !!connection.simulate
    ? putBySecret_name.simulate(connection, secret_name, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putBySecret_name.METADATA,
          path: putBySecret_name.path(secret_name),
          status: null,
        },
        body,
      );
}
export namespace putBySecret_name {
  export type Headers = IApiUserCodespacesSecretsRepositories.PutHeader;
  export type Input = body;

  export const METADATA = {
    method: "PUT",
    path: "/user/codespaces/secrets/:secret_name/repositories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (secret_name: string) =>
    `/user/codespaces/secrets/${encodeURIComponent(secret_name ?? "null")}/repositories`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putBySecret_name.Headers>,
    secret_name: string,
    body: putBySecret_name.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putBySecret_name.path(secret_name),
      contentType: "application/json",
    });
    try {
      assert.param("secret_name")(() => typia.assert(secret_name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Add a selected repository to a user secret.
 * Adds a repository to the selected repositories for a user's development environment secret.
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/secrets/:secret_name/repositories/:repository_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putBySecret_nameAndRepository_id(
  connection: IConnection<putBySecret_nameAndRepository_id.Headers>,
  secret_name: string,
  repository_id: number & tags.Type<"int32">,
): Promise<void> {
  return !!connection.simulate
    ? putBySecret_nameAndRepository_id.simulate(
        connection,
        secret_name,
        repository_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putBySecret_nameAndRepository_id.METADATA,
          path: putBySecret_nameAndRepository_id.path(
            secret_name,
            repository_id,
          ),
          status: null,
        },
      );
}
export namespace putBySecret_nameAndRepository_id {
  export type Headers = IApiUserCodespacesSecretsRepositories.PutHeader;

  export const METADATA = {
    method: "PUT",
    path: "/user/codespaces/secrets/:secret_name/repositories/:repository_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    secret_name: string,
    repository_id: number & tags.Type<"int32">,
  ) =>
    `/user/codespaces/secrets/${encodeURIComponent(secret_name ?? "null")}/repositories/${encodeURIComponent(repository_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putBySecret_nameAndRepository_id.Headers>,
    secret_name: string,
    repository_id: number & tags.Type<"int32">,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putBySecret_nameAndRepository_id.path(secret_name, repository_id),
      contentType: "application/json",
    });
    try {
      assert.param("secret_name")(() => typia.assert(secret_name));
      assert.param("repository_id")(() => typia.assert(repository_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove a selected repository from a user secret.
 * Removes a repository from the selected repositories for a user's development environment secret.
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/secrets/:secret_name/repositories/:repository_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseBySecret_nameAndRepository_id(
  connection: IConnection<eraseBySecret_nameAndRepository_id.Headers>,
  secret_name: string,
  repository_id: number & tags.Type<"int32">,
): Promise<void> {
  return !!connection.simulate
    ? eraseBySecret_nameAndRepository_id.simulate(
        connection,
        secret_name,
        repository_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseBySecret_nameAndRepository_id.METADATA,
          path: eraseBySecret_nameAndRepository_id.path(
            secret_name,
            repository_id,
          ),
          status: null,
        },
      );
}
export namespace eraseBySecret_nameAndRepository_id {
  export type Headers = IApiUserCodespacesSecretsRepositories.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/user/codespaces/secrets/:secret_name/repositories/:repository_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    secret_name: string,
    repository_id: number & tags.Type<"int32">,
  ) =>
    `/user/codespaces/secrets/${encodeURIComponent(secret_name ?? "null")}/repositories/${encodeURIComponent(repository_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseBySecret_nameAndRepository_id.Headers>,
    secret_name: string,
    repository_id: number & tags.Type<"int32">,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseBySecret_nameAndRepository_id.path(secret_name, repository_id),
      contentType: "application/json",
    });
    try {
      assert.param("secret_name")(() => typia.assert(secret_name));
      assert.param("repository_id")(() => typia.assert(repository_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
