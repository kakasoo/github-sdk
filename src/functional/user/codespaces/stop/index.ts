import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUserCodespacesStop } from "../../../../structures/IApiUserCodespacesStop";
import { codespace } from "../../../../structures/codespace";

/**
 * Stop a codespace for the authenticated user.
 * Stops a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/:codespace_name/stop
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByCodespace_name(
  connection: IConnection<postByCodespace_name.Headers>,
  codespace_name: string,
): Promise<postByCodespace_name.Output> {
  return !!connection.simulate
    ? postByCodespace_name.simulate(connection, codespace_name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByCodespace_name.METADATA,
          path: postByCodespace_name.path(codespace_name),
          status: null,
        },
      );
}
export namespace postByCodespace_name {
  export type Headers = IApiUserCodespacesStop.PostHeader;
  export type Output = codespace;

  export const METADATA = {
    method: "POST",
    path: "/user/codespaces/:codespace_name/stop",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (codespace_name: string) =>
    `/user/codespaces/${encodeURIComponent(codespace_name ?? "null")}/stop`;
  export const random = (g?: Partial<typia.IRandomGenerator>): codespace =>
    typia.random<codespace>(g);
  export const simulate = (
    connection: IConnection<postByCodespace_name.Headers>,
    codespace_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByCodespace_name.path(codespace_name),
      contentType: "application/json",
    });
    try {
      assert.param("codespace_name")(() => typia.assert(codespace_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
