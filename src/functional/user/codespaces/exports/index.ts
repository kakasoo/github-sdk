import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUserCodespacesExports } from "../../../../structures/IApiUserCodespacesExports";
import { codespace_minus_export_minus_details } from "../../../../structures/codespace_minus_export_minus_details";

/**
 * Export a codespace for the authenticated user.
 * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
 *
 * If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/:codespace_name/exports
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByCodespace_name(
  connection: IConnection<postByCodespace_name.Headers>,
  codespace_name: string,
): Promise<void> {
  return !!connection.simulate
    ? postByCodespace_name.simulate(connection, codespace_name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByCodespace_name.METADATA,
          path: postByCodespace_name.path(codespace_name),
          status: null,
        },
      );
}
export namespace postByCodespace_name {
  export type Headers = IApiUserCodespacesExports.PostHeader;

  export const METADATA = {
    method: "POST",
    path: "/user/codespaces/:codespace_name/exports",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (codespace_name: string) =>
    `/user/codespaces/${encodeURIComponent(codespace_name ?? "null")}/exports`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<postByCodespace_name.Headers>,
    codespace_name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByCodespace_name.path(codespace_name),
      contentType: "application/json",
    });
    try {
      assert.param("codespace_name")(() => typia.assert(codespace_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get details about a codespace export.
 * Gets information about an export of a codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 *
 * @tag codespaces
 * @path user/codespaces/:codespace_name/exports/:export_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByCodespace_nameAndExport_id(
  connection: IConnection<getByCodespace_nameAndExport_id.Headers>,
  codespace_name: string,
  export_id: string,
): Promise<getByCodespace_nameAndExport_id.Output> {
  return !!connection.simulate
    ? getByCodespace_nameAndExport_id.simulate(
        connection,
        codespace_name,
        export_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByCodespace_nameAndExport_id.METADATA,
          path: getByCodespace_nameAndExport_id.path(codespace_name, export_id),
          status: null,
        },
      );
}
export namespace getByCodespace_nameAndExport_id {
  export type Headers = IApiUserCodespacesExports.GetHeader;
  export type Output = codespace_minus_export_minus_details;

  export const METADATA = {
    method: "GET",
    path: "/user/codespaces/:codespace_name/exports/:export_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (codespace_name: string, export_id: string) =>
    `/user/codespaces/${encodeURIComponent(codespace_name ?? "null")}/exports/${encodeURIComponent(export_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): codespace_minus_export_minus_details =>
    typia.random<codespace_minus_export_minus_details>(g);
  export const simulate = (
    connection: IConnection<getByCodespace_nameAndExport_id.Headers>,
    codespace_name: string,
    export_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByCodespace_nameAndExport_id.path(codespace_name, export_id),
      contentType: "application/json",
    });
    try {
      assert.param("codespace_name")(() => typia.assert(codespace_name));
      assert.param("export_id")(() => typia.assert(export_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
