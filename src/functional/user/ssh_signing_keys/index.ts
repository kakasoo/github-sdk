import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiUserSshSigningKeys } from "../../../structures/IApiUserSshSigningKeys";
import { ssh_minus_signing_minus_key } from "../../../structures/ssh_minus_signing_minus_key";
import { body } from "../../../structures/body";
/**
 * List SSH signing keys for the authenticated user.
 * Lists the SSH signing keys for the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
 *
 * @tag users
 * @path user/ssh_signing_keys
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiUserSshSigningKeys.GetHeader;
  export type Output = ssh_minus_signing_minus_key[];

  export const METADATA = {
    method: "GET",
    path: "/user/ssh_signing_keys",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/ssh_signing_keys";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ssh_minus_signing_minus_key[] =>
    typia.random<ssh_minus_signing_minus_key[]>(g);
  export const simulate = (connection: IConnection<get.Headers>): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a SSH signing key for the authenticated user.
 * Creates an SSH signing key for the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.
 *
 * @tag users
 * @path user/ssh_signing_keys
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function post(
  connection: IConnection,
  body: post.Input,
): Promise<post.Output> {
  return !!connection.simulate
    ? post.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        body,
      );
}
export namespace post {
  export type Input = body;
  export type Output = ssh_minus_signing_minus_key;

  export const METADATA = {
    method: "POST",
    path: "/user/ssh_signing_keys",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/ssh_signing_keys";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ssh_minus_signing_minus_key =>
    typia.random<ssh_minus_signing_minus_key>(g);
  export const simulate = (
    connection: IConnection,
    body: post.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an SSH signing key for the authenticated user.
 * Gets extended details for an SSH signing key.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
 *
 * @tag users
 * @path user/ssh_signing_keys/:ssh_signing_key_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getBySsh_signing_key_id(
  connection: IConnection<getBySsh_signing_key_id.Headers>,
  ssh_signing_key_id: string,
): Promise<getBySsh_signing_key_id.Output> {
  return !!connection.simulate
    ? getBySsh_signing_key_id.simulate(connection, ssh_signing_key_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getBySsh_signing_key_id.METADATA,
          path: getBySsh_signing_key_id.path(ssh_signing_key_id),
          status: null,
        },
      );
}
export namespace getBySsh_signing_key_id {
  export type Headers = IApiUserSshSigningKeys.GetHeader;
  export type Output = ssh_minus_signing_minus_key;

  export const METADATA = {
    method: "GET",
    path: "/user/ssh_signing_keys/:ssh_signing_key_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (ssh_signing_key_id: string) =>
    `/user/ssh_signing_keys/${encodeURIComponent(ssh_signing_key_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ssh_minus_signing_minus_key =>
    typia.random<ssh_minus_signing_minus_key>(g);
  export const simulate = (
    connection: IConnection<getBySsh_signing_key_id.Headers>,
    ssh_signing_key_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getBySsh_signing_key_id.path(ssh_signing_key_id),
      contentType: "application/json",
    });
    try {
      assert.param("ssh_signing_key_id")(() =>
        typia.assert(ssh_signing_key_id),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete an SSH signing key for the authenticated user.
 * Deletes an SSH signing key from the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint.
 *
 * @tag users
 * @path user/ssh_signing_keys/:ssh_signing_key_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseBySsh_signing_key_id(
  connection: IConnection<eraseBySsh_signing_key_id.Headers>,
  ssh_signing_key_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseBySsh_signing_key_id.simulate(connection, ssh_signing_key_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseBySsh_signing_key_id.METADATA,
          path: eraseBySsh_signing_key_id.path(ssh_signing_key_id),
          status: null,
        },
      );
}
export namespace eraseBySsh_signing_key_id {
  export type Headers = IApiUserSshSigningKeys.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/user/ssh_signing_keys/:ssh_signing_key_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (ssh_signing_key_id: string) =>
    `/user/ssh_signing_keys/${encodeURIComponent(ssh_signing_key_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseBySsh_signing_key_id.Headers>,
    ssh_signing_key_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseBySsh_signing_key_id.path(ssh_signing_key_id),
      contentType: "application/json",
    });
    try {
      assert.param("ssh_signing_key_id")(() =>
        typia.assert(ssh_signing_key_id),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
