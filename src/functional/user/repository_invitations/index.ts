import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiUserRepositoryInvitations } from "../../../structures/IApiUserRepositoryInvitations";
import { repository_minus_invitation } from "../../../structures/repository_minus_invitation";
/**
 * List repository invitations for the authenticated user.
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 *
 * @tag repos
 * @path user/repository_invitations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiUserRepositoryInvitations.GetHeader;
  export type Output = repository_minus_invitation[];

  export const METADATA = {
    method: "GET",
    path: "/user/repository_invitations",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/repository_invitations";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_invitation[] =>
    typia.random<repository_minus_invitation[]>(g);
  export const simulate = (connection: IConnection<get.Headers>): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag repos
 * @path user/repository_invitations/:invitation_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByInvitation_id(
  connection: IConnection<patchByInvitation_id.Headers>,
  invitation_id: string,
): Promise<void> {
  return !!connection.simulate
    ? patchByInvitation_id.simulate(connection, invitation_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByInvitation_id.METADATA,
          path: patchByInvitation_id.path(invitation_id),
          status: null,
        },
      );
}
export namespace patchByInvitation_id {
  export type Headers = IApiUserRepositoryInvitations.PatchHeader;

  export const METADATA = {
    method: "PATCH",
    path: "/user/repository_invitations/:invitation_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (invitation_id: string) =>
    `/user/repository_invitations/${encodeURIComponent(invitation_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<patchByInvitation_id.Headers>,
    invitation_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByInvitation_id.path(invitation_id),
      contentType: "application/json",
    });
    try {
      assert.param("invitation_id")(() => typia.assert(invitation_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag repos
 * @path user/repository_invitations/:invitation_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByInvitation_id(
  connection: IConnection<eraseByInvitation_id.Headers>,
  invitation_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByInvitation_id.simulate(connection, invitation_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByInvitation_id.METADATA,
          path: eraseByInvitation_id.path(invitation_id),
          status: null,
        },
      );
}
export namespace eraseByInvitation_id {
  export type Headers = IApiUserRepositoryInvitations.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/user/repository_invitations/:invitation_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (invitation_id: string) =>
    `/user/repository_invitations/${encodeURIComponent(invitation_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByInvitation_id.Headers>,
    invitation_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByInvitation_id.path(invitation_id),
      contentType: "application/json",
    });
    try {
      assert.param("invitation_id")(() => typia.assert(invitation_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
