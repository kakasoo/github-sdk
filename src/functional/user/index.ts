import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUser } from "../../structures/IApiUser";
import { body } from "../../structures/body";
import { private_minus_user } from "../../structures/private_minus_user";
import { public_minus_user } from "../../structures/public_minus_user";

export * as blocks from "./blocks";
export * as codespaces from "./codespaces";
export * as docker from "./docker";
export * as email from "./email";
export * as emails from "./emails";
export * as followers from "./followers";
export * as following from "./following";
export * as gpg_keys from "./gpg_keys";
export * as installations from "./installations";
export * as interaction_limits from "./interaction_limits";
export * as issues from "./issues";
export * as keys from "./keys";
export * as marketplace_purchases from "./marketplace_purchases";
export * as memberships from "./memberships";
export * as migrations from "./migrations";
export * as orgs from "./orgs";
export * as packages from "./packages";
export * as projects from "./projects";
export * as public_emails from "./public_emails";
export * as repos from "./repos";
export * as repository_invitations from "./repository_invitations";
export * as social_accounts from "./social_accounts";
export * as ssh_signing_keys from "./ssh_signing_keys";
export * as starred from "./starred";
export * as subscriptions from "./subscriptions";
export * as teams from "./teams";
/**
 * Get the authenticated user.
 * OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.
 *
 * @tag users
 * @path user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(connection: IConnection): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Output = private_minus_user | public_minus_user;

  export const METADATA = {
    method: "GET",
    path: "/user",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): private_minus_user | public_minus_user =>
    typia.random<private_minus_user | public_minus_user>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update the authenticated user.
 * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 *
 * @tag users
 * @path user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patch(
  connection: IConnection,
  body: patch.Input,
): Promise<patch.Output> {
  return !!connection.simulate
    ? patch.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        body,
      );
}
export namespace patch {
  export type Input = body;
  export type Output = private_minus_user;

  export const METADATA = {
    method: "PATCH",
    path: "/user",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): private_minus_user => typia.random<private_minus_user>(g);
  export const simulate = (
    connection: IConnection,
    body: patch.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a user using their ID.
 * Provides publicly available information about someone with a GitHub account. This method takes their durable user `ID` instead of their `login`, which can change over time.
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/users/emails)".
 *
 * @tag users
 * @path user/:account_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByAccount_id(
  connection: IConnection<getByAccount_id.Headers>,
  account_id: string,
): Promise<getByAccount_id.Output> {
  return !!connection.simulate
    ? getByAccount_id.simulate(connection, account_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByAccount_id.METADATA,
          path: getByAccount_id.path(account_id),
          status: null,
        },
      );
}
export namespace getByAccount_id {
  export type Headers = IApiUser.GetHeader;
  export type Output = private_minus_user | public_minus_user;

  export const METADATA = {
    method: "GET",
    path: "/user/:account_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (account_id: string) =>
    `/user/${encodeURIComponent(account_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): private_minus_user | public_minus_user =>
    typia.random<private_minus_user | public_minus_user>(g);
  export const simulate = (
    connection: IConnection<getByAccount_id.Headers>,
    account_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByAccount_id.path(account_id),
      contentType: "application/json",
    });
    try {
      assert.param("account_id")(() => typia.assert(account_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
