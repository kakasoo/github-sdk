import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUserInstallationsRepositories } from "../../../../structures/IApiUserInstallationsRepositories";
import { response } from "../../../../structures/response";

/**
 * List repositories accessible to the user access token.
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 *
 * @tag apps
 * @path user/installations/:installation_id/repositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByInstallation_id(
  connection: IConnection<getByInstallation_id.Headers>,
  installation_id: string,
): Promise<getByInstallation_id.Output> {
  return !!connection.simulate
    ? getByInstallation_id.simulate(connection, installation_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByInstallation_id.METADATA,
          path: getByInstallation_id.path(installation_id),
          status: null,
        },
      );
}
export namespace getByInstallation_id {
  export type Headers = IApiUserInstallationsRepositories.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/user/installations/:installation_id/repositories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (installation_id: string) =>
    `/user/installations/${encodeURIComponent(installation_id ?? "null")}/repositories`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByInstallation_id.Headers>,
    installation_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByInstallation_id.path(installation_id),
      contentType: "application/json",
    });
    try {
      assert.param("installation_id")(() => typia.assert(installation_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Add a repository to an app installation.
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * This endpoint only works for PATs (classic) with the `repo` scope.
 *
 * @tag apps
 * @path user/installations/:installation_id/repositories/:repository_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByInstallation_idAndRepository_id(
  connection: IConnection<putByInstallation_idAndRepository_id.Headers>,
  installation_id: string,
  repository_id: string,
): Promise<void> {
  return !!connection.simulate
    ? putByInstallation_idAndRepository_id.simulate(
        connection,
        installation_id,
        repository_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByInstallation_idAndRepository_id.METADATA,
          path: putByInstallation_idAndRepository_id.path(
            installation_id,
            repository_id,
          ),
          status: null,
        },
      );
}
export namespace putByInstallation_idAndRepository_id {
  export type Headers = IApiUserInstallationsRepositories.PutHeader;

  export const METADATA = {
    method: "PUT",
    path: "/user/installations/:installation_id/repositories/:repository_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (installation_id: string, repository_id: string) =>
    `/user/installations/${encodeURIComponent(installation_id ?? "null")}/repositories/${encodeURIComponent(repository_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putByInstallation_idAndRepository_id.Headers>,
    installation_id: string,
    repository_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByInstallation_idAndRepository_id.path(
        installation_id,
        repository_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("installation_id")(() => typia.assert(installation_id));
      assert.param("repository_id")(() => typia.assert(repository_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove a repository from an app installation.
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`.
 *
 * This endpoint only works for PATs (classic) with the `repo` scope.
 *
 * @tag apps
 * @path user/installations/:installation_id/repositories/:repository_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByInstallation_idAndRepository_id(
  connection: IConnection<eraseByInstallation_idAndRepository_id.Headers>,
  installation_id: string,
  repository_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByInstallation_idAndRepository_id.simulate(
        connection,
        installation_id,
        repository_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByInstallation_idAndRepository_id.METADATA,
          path: eraseByInstallation_idAndRepository_id.path(
            installation_id,
            repository_id,
          ),
          status: null,
        },
      );
}
export namespace eraseByInstallation_idAndRepository_id {
  export type Headers = IApiUserInstallationsRepositories.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/user/installations/:installation_id/repositories/:repository_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (installation_id: string, repository_id: string) =>
    `/user/installations/${encodeURIComponent(installation_id ?? "null")}/repositories/${encodeURIComponent(repository_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByInstallation_idAndRepository_id.Headers>,
    installation_id: string,
    repository_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByInstallation_idAndRepository_id.path(
        installation_id,
        repository_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("installation_id")(() => typia.assert(installation_id));
      assert.param("repository_id")(() => typia.assert(repository_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
