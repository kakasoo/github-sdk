import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiUserMigrationsArchive } from "../../../../structures/IApiUserMigrationsArchive";
/**
 * Download a user migration archive.
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 *
 * @tag migrations
 * @path user/migrations/:migration_id/archive
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByMigration_id(
  connection: IConnection<getByMigration_id.Headers>,
  migration_id: string,
): Promise<void> {
  return !!connection.simulate
    ? getByMigration_id.simulate(connection, migration_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByMigration_id.METADATA,
          path: getByMigration_id.path(migration_id),
          status: null,
        },
      );
}
export namespace getByMigration_id {
  export type Headers = IApiUserMigrationsArchive.GetHeader;

  export const METADATA = {
    method: "GET",
    path: "/user/migrations/:migration_id/archive",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (migration_id: string) =>
    `/user/migrations/${encodeURIComponent(migration_id ?? "null")}/archive`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<getByMigration_id.Headers>,
    migration_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByMigration_id.path(migration_id),
      contentType: "application/json",
    });
    try {
      assert.param("migration_id")(() => typia.assert(migration_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a user migration archive.
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
 *
 * @tag migrations
 * @path user/migrations/:migration_id/archive
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByMigration_id(
  connection: IConnection<eraseByMigration_id.Headers>,
  migration_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByMigration_id.simulate(connection, migration_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByMigration_id.METADATA,
          path: eraseByMigration_id.path(migration_id),
          status: null,
        },
      );
}
export namespace eraseByMigration_id {
  export type Headers = IApiUserMigrationsArchive.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/user/migrations/:migration_id/archive",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (migration_id: string) =>
    `/user/migrations/${encodeURIComponent(migration_id ?? "null")}/archive`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByMigration_id.Headers>,
    migration_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByMigration_id.path(migration_id),
      contentType: "application/json",
    });
    try {
      assert.param("migration_id")(() => typia.assert(migration_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
