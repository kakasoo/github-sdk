import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiUserMigrations } from "../../../structures/IApiUserMigrations";
import { migration } from "../../../structures/migration";
import { body } from "../../../structures/body";
export * as archive from "./archive";
export * as repos from "./repos";
export * as repositories from "./repositories";
/**
 * List user migrations.
 * Lists all migrations a user has started.
 *
 * @tag migrations
 * @path user/migrations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiUserMigrations.GetHeader;
  export type Output = migration[];

  export const METADATA = {
    method: "GET",
    path: "/user/migrations",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/migrations";
  export const random = (g?: Partial<typia.IRandomGenerator>): migration[] =>
    typia.random<migration[]>(g);
  export const simulate = (connection: IConnection<get.Headers>): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Start a user migration.
 * Initiates the generation of a user migration archive.
 *
 * @tag migrations
 * @path user/migrations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function post(
  connection: IConnection,
  body: post.Input,
): Promise<post.Output> {
  return !!connection.simulate
    ? post.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        body,
      );
}
export namespace post {
  export type Input = body;
  export type Output = migration;

  export const METADATA = {
    method: "POST",
    path: "/user/migrations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/user/migrations";
  export const random = (g?: Partial<typia.IRandomGenerator>): migration =>
    typia.random<migration>(g);
  export const simulate = (
    connection: IConnection,
    body: post.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a user migration status.
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
 *
 * @tag migrations
 * @path user/migrations/:migration_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByMigration_id(
  connection: IConnection<getByMigration_id.Headers>,
  migration_id: string,
  query: getByMigration_id.Query,
): Promise<getByMigration_id.Output> {
  return !!connection.simulate
    ? getByMigration_id.simulate(connection, migration_id, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByMigration_id.METADATA,
          path: getByMigration_id.path(migration_id, query),
          status: null,
        },
      );
}
export namespace getByMigration_id {
  export type Headers = IApiUserMigrations.GetHeader;
  export type Query = IApiUserMigrations.GetQuery;
  export type Output = migration;

  export const METADATA = {
    method: "GET",
    path: "/user/migrations/:migration_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    migration_id: string,
    query: getByMigration_id.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/user/migrations/${encodeURIComponent(migration_id ?? "null")}`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (g?: Partial<typia.IRandomGenerator>): migration =>
    typia.random<migration>(g);
  export const simulate = (
    connection: IConnection<getByMigration_id.Headers>,
    migration_id: string,
    query: getByMigration_id.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByMigration_id.path(migration_id, query),
      contentType: "application/json",
    });
    try {
      assert.param("migration_id")(() => typia.assert(migration_id));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
