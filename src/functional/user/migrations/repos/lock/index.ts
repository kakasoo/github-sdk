import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUserMigrationsReposLock } from "../../../../../structures/IApiUserMigrationsReposLock";

/**
 * Unlock a user repository.
 * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
 *
 * @tag migrations
 * @path user/migrations/:migration_id/repos/:repo_name/lock
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByMigration_idAndRepo_name(
  connection: IConnection<eraseByMigration_idAndRepo_name.Headers>,
  migration_id: string,
  repo_name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByMigration_idAndRepo_name.simulate(
        connection,
        migration_id,
        repo_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByMigration_idAndRepo_name.METADATA,
          path: eraseByMigration_idAndRepo_name.path(migration_id, repo_name),
          status: null,
        },
      );
}
export namespace eraseByMigration_idAndRepo_name {
  export type Headers = IApiUserMigrationsReposLock.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/user/migrations/:migration_id/repos/:repo_name/lock",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (migration_id: string, repo_name: string) =>
    `/user/migrations/${encodeURIComponent(migration_id ?? "null")}/repos/${encodeURIComponent(repo_name ?? "null")}/lock`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByMigration_idAndRepo_name.Headers>,
    migration_id: string,
    repo_name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByMigration_idAndRepo_name.path(migration_id, repo_name),
      contentType: "application/json",
    });
    try {
      assert.param("migration_id")(() => typia.assert(migration_id));
      assert.param("repo_name")(() => typia.assert(repo_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
