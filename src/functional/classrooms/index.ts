import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiClassrooms } from "../../structures/IApiClassrooms";
import { simple_minus_classroom } from "../../structures/simple_minus_classroom";
import { classroom } from "../../structures/classroom";
export * as assignments from "./assignments";
/**
 * List classrooms.
 * Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.
 *
 * @tag classroom
 * @path classrooms
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiClassrooms.GetHeader;
  export type Output = simple_minus_classroom[];

  export const METADATA = {
    method: "GET",
    path: "/classrooms",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/classrooms";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): simple_minus_classroom[] => typia.random<simple_minus_classroom[]>(g);
  export const simulate = (connection: IConnection<get.Headers>): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a classroom.
 * Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.
 *
 * @tag classroom
 * @path classrooms/:classroom_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByClassroom_id(
  connection: IConnection<getByClassroom_id.Headers>,
  classroom_id: string,
): Promise<getByClassroom_id.Output> {
  return !!connection.simulate
    ? getByClassroom_id.simulate(connection, classroom_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByClassroom_id.METADATA,
          path: getByClassroom_id.path(classroom_id),
          status: null,
        },
      );
}
export namespace getByClassroom_id {
  export type Headers = IApiClassrooms.GetHeader;
  export type Output = classroom;

  export const METADATA = {
    method: "GET",
    path: "/classrooms/:classroom_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (classroom_id: string) =>
    `/classrooms/${encodeURIComponent(classroom_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): classroom =>
    typia.random<classroom>(g);
  export const simulate = (
    connection: IConnection<getByClassroom_id.Headers>,
    classroom_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByClassroom_id.path(classroom_id),
      contentType: "application/json",
    });
    try {
      assert.param("classroom_id")(() => typia.assert(classroom_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
