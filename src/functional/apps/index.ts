import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiApps } from "../../structures/IApiApps";
import { integration } from "../../structures/integration";
/**
 * Get an app.
 * > [!NOTE]
 * > The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 *
 * @tag apps
 * @path apps/:app_slug
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByApp_slug(
  connection: IConnection<getByApp_slug.Headers>,
  app_slug: string,
): Promise<getByApp_slug.Output> {
  return !!connection.simulate
    ? getByApp_slug.simulate(connection, app_slug)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByApp_slug.METADATA,
          path: getByApp_slug.path(app_slug),
          status: null,
        },
      );
}
export namespace getByApp_slug {
  export type Headers = IApiApps.GetHeader;
  export type Output = integration;

  export const METADATA = {
    method: "GET",
    path: "/apps/:app_slug",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (app_slug: string) =>
    `/apps/${encodeURIComponent(app_slug ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): integration =>
    typia.random<integration>(g);
  export const simulate = (
    connection: IConnection<getByApp_slug.Headers>,
    app_slug: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByApp_slug.path(app_slug),
      contentType: "application/json",
    });
    try {
      assert.param("app_slug")(() => typia.assert(app_slug));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
