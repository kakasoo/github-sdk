import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiGistsForks } from "../../../structures/IApiGistsForks";
import { gist_minus_simple } from "../../../structures/gist_minus_simple";
import { base_minus_gist } from "../../../structures/base_minus_gist";
/**
 * @tag gists
 * @path gists/:gist_id/forks
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByGist_id(
  connection: IConnection<getByGist_id.Headers>,
  gist_id: string,
): Promise<getByGist_id.Output> {
  return !!connection.simulate
    ? getByGist_id.simulate(connection, gist_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByGist_id.METADATA,
          path: getByGist_id.path(gist_id),
          status: null,
        },
      );
}
export namespace getByGist_id {
  export type Headers = IApiGistsForks.GetHeader;
  export type Output = gist_minus_simple[];

  export const METADATA = {
    method: "GET",
    path: "/gists/:gist_id/forks",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/forks`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): gist_minus_simple[] => typia.random<gist_minus_simple[]>(g);
  export const simulate = (
    connection: IConnection<getByGist_id.Headers>,
    gist_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByGist_id.path(gist_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag gists
 * @path gists/:gist_id/forks
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByGist_id(
  connection: IConnection<postByGist_id.Headers>,
  gist_id: string,
): Promise<postByGist_id.Output> {
  return !!connection.simulate
    ? postByGist_id.simulate(connection, gist_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByGist_id.METADATA,
          path: postByGist_id.path(gist_id),
          status: null,
        },
      );
}
export namespace postByGist_id {
  export type Headers = IApiGistsForks.PostHeader;
  export type Output = base_minus_gist;

  export const METADATA = {
    method: "POST",
    path: "/gists/:gist_id/forks",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/forks`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): base_minus_gist => typia.random<base_minus_gist>(g);
  export const simulate = (
    connection: IConnection<postByGist_id.Headers>,
    gist_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByGist_id.path(gist_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
