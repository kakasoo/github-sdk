import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiGistsStar } from "../../../structures/IApiGistsStar";

/**
 * @tag gists
 * @path gists/:gist_id/star
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByGist_id(
  connection: IConnection<getByGist_id.Headers>,
  gist_id: string,
): Promise<void> {
  return !!connection.simulate
    ? getByGist_id.simulate(connection, gist_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByGist_id.METADATA,
          path: getByGist_id.path(gist_id),
          status: null,
        },
      );
}
export namespace getByGist_id {
  export type Headers = IApiGistsStar.GetHeader;

  export const METADATA = {
    method: "GET",
    path: "/gists/:gist_id/star",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/star`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<getByGist_id.Headers>,
    gist_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByGist_id.path(gist_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Star a gist.
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 *
 * @tag gists
 * @path gists/:gist_id/star
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByGist_id(
  connection: IConnection<putByGist_id.Headers>,
  gist_id: string,
): Promise<void> {
  return !!connection.simulate
    ? putByGist_id.simulate(connection, gist_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByGist_id.METADATA,
          path: putByGist_id.path(gist_id),
          status: null,
        },
      );
}
export namespace putByGist_id {
  export type Headers = IApiGistsStar.PutHeader;

  export const METADATA = {
    method: "PUT",
    path: "/gists/:gist_id/star",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/star`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putByGist_id.Headers>,
    gist_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByGist_id.path(gist_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag gists
 * @path gists/:gist_id/star
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByGist_id(
  connection: IConnection<eraseByGist_id.Headers>,
  gist_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByGist_id.simulate(connection, gist_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByGist_id.METADATA,
          path: eraseByGist_id.path(gist_id),
          status: null,
        },
      );
}
export namespace eraseByGist_id {
  export type Headers = IApiGistsStar.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/gists/:gist_id/star",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/star`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByGist_id.Headers>,
    gist_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByGist_id.path(gist_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
