import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiGistsComments } from "../../../structures/IApiGistsComments";
import { body } from "../../../structures/body";
import { gist_minus_comment } from "../../../structures/gist_minus_comment";

/**
 * List gist comments.
 * Lists the comments on a gist.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
 *
 * @tag gists
 * @path gists/:gist_id/comments
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByGist_id(
  connection: IConnection<getByGist_id.Headers>,
  gist_id: string,
): Promise<getByGist_id.Output> {
  return !!connection.simulate
    ? getByGist_id.simulate(connection, gist_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByGist_id.METADATA,
          path: getByGist_id.path(gist_id),
          status: null,
        },
      );
}
export namespace getByGist_id {
  export type Headers = IApiGistsComments.GetHeader;
  export type Output = gist_minus_comment[];

  export const METADATA = {
    method: "GET",
    path: "/gists/:gist_id/comments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/comments`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): gist_minus_comment[] => typia.random<gist_minus_comment[]>(g);
  export const simulate = (
    connection: IConnection<getByGist_id.Headers>,
    gist_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByGist_id.path(gist_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a gist comment.
 * Creates a comment on a gist.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
 *
 * @tag gists
 * @path gists/:gist_id/comments
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByGist_id(
  connection: IConnection<postByGist_id.Headers>,
  gist_id: string,
  body: postByGist_id.Input,
): Promise<postByGist_id.Output> {
  return !!connection.simulate
    ? postByGist_id.simulate(connection, gist_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByGist_id.METADATA,
          path: postByGist_id.path(gist_id),
          status: null,
        },
        body,
      );
}
export namespace postByGist_id {
  export type Headers = IApiGistsComments.PostHeader;
  export type Input = body;
  export type Output = gist_minus_comment;

  export const METADATA = {
    method: "POST",
    path: "/gists/:gist_id/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/comments`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): gist_minus_comment => typia.random<gist_minus_comment>(g);
  export const simulate = (
    connection: IConnection<postByGist_id.Headers>,
    gist_id: string,
    body: postByGist_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByGist_id.path(gist_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a gist comment.
 * Gets a comment on a gist.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
 *
 * @tag gists
 * @path gists/:gist_id/comments/:comment_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByGist_idAndComment_id(
  connection: IConnection<getByGist_idAndComment_id.Headers>,
  gist_id: string,
  comment_id: string,
): Promise<getByGist_idAndComment_id.Output> {
  return !!connection.simulate
    ? getByGist_idAndComment_id.simulate(connection, gist_id, comment_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByGist_idAndComment_id.METADATA,
          path: getByGist_idAndComment_id.path(gist_id, comment_id),
          status: null,
        },
      );
}
export namespace getByGist_idAndComment_id {
  export type Headers = IApiGistsComments.GetHeader;
  export type Output = gist_minus_comment;

  export const METADATA = {
    method: "GET",
    path: "/gists/:gist_id/comments/:comment_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string, comment_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/comments/${encodeURIComponent(comment_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): gist_minus_comment => typia.random<gist_minus_comment>(g);
  export const simulate = (
    connection: IConnection<getByGist_idAndComment_id.Headers>,
    gist_id: string,
    comment_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByGist_idAndComment_id.path(gist_id, comment_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
      assert.param("comment_id")(() => typia.assert(comment_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a gist comment.
 * Updates a comment on a gist.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
 *
 * @tag gists
 * @path gists/:gist_id/comments/:comment_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByGist_idAndComment_id(
  connection: IConnection<patchByGist_idAndComment_id.Headers>,
  gist_id: string,
  comment_id: string,
  body: patchByGist_idAndComment_id.Input,
): Promise<patchByGist_idAndComment_id.Output> {
  return !!connection.simulate
    ? patchByGist_idAndComment_id.simulate(
        connection,
        gist_id,
        comment_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByGist_idAndComment_id.METADATA,
          path: patchByGist_idAndComment_id.path(gist_id, comment_id),
          status: null,
        },
        body,
      );
}
export namespace patchByGist_idAndComment_id {
  export type Headers = IApiGistsComments.PatchHeader;
  export type Input = body;
  export type Output = gist_minus_comment;

  export const METADATA = {
    method: "PATCH",
    path: "/gists/:gist_id/comments/:comment_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string, comment_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/comments/${encodeURIComponent(comment_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): gist_minus_comment => typia.random<gist_minus_comment>(g);
  export const simulate = (
    connection: IConnection<patchByGist_idAndComment_id.Headers>,
    gist_id: string,
    comment_id: string,
    body: patchByGist_idAndComment_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByGist_idAndComment_id.path(gist_id, comment_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
      assert.param("comment_id")(() => typia.assert(comment_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag gists
 * @path gists/:gist_id/comments/:comment_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByGist_idAndComment_id(
  connection: IConnection<eraseByGist_idAndComment_id.Headers>,
  gist_id: string,
  comment_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByGist_idAndComment_id.simulate(connection, gist_id, comment_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByGist_idAndComment_id.METADATA,
          path: eraseByGist_idAndComment_id.path(gist_id, comment_id),
          status: null,
        },
      );
}
export namespace eraseByGist_idAndComment_id {
  export type Headers = IApiGistsComments.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/gists/:gist_id/comments/:comment_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (gist_id: string, comment_id: string) =>
    `/gists/${encodeURIComponent(gist_id ?? "null")}/comments/${encodeURIComponent(comment_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByGist_idAndComment_id.Headers>,
    gist_id: string,
    comment_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByGist_idAndComment_id.path(gist_id, comment_id),
      contentType: "application/json",
    });
    try {
      assert.param("gist_id")(() => typia.assert(gist_id));
      assert.param("comment_id")(() => typia.assert(comment_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
