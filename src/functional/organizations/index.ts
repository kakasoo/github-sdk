import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrganizations } from "../../structures/IApiOrganizations";
import { organization_minus_simple } from "../../structures/organization_minus_simple";
/**
 * List organizations.
 * Lists all organizations, in the order that they were created.
 *
 * > [!NOTE]
 * > Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
 *
 * @tag orgs
 * @path organizations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiOrganizations.GetHeader;
  export type Output = organization_minus_simple[];

  export const METADATA = {
    method: "GET",
    path: "/organizations",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/organizations";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): organization_minus_simple[] =>
    typia.random<organization_minus_simple[]>(g);
  export const simulate = (connection: IConnection<get.Headers>): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
