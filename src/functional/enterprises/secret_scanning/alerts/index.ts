import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiEnterprisesSecretScanningAlerts } from "../../../../structures/IApiEnterprisesSecretScanningAlerts";
import { organization_minus_secret_minus_scanning_minus_alert } from "../../../../structures/organization_minus_secret_minus_scanning_minus_alert";

/**
 * List secret scanning alerts for an enterprise.
 * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
 *
 * Alerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
 *
 * The authenticated user must be a member of the enterprise in order to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.
 *
 * @tag secret-scanning
 * @path enterprises/:enterprise/secret-scanning/alerts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByEnterprise(
  connection: IConnection<getByEnterprise.Headers>,
  enterprise: string,
): Promise<getByEnterprise.Output> {
  return !!connection.simulate
    ? getByEnterprise.simulate(connection, enterprise)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByEnterprise.METADATA,
          path: getByEnterprise.path(enterprise),
          status: null,
        },
      );
}
export namespace getByEnterprise {
  export type Headers = IApiEnterprisesSecretScanningAlerts.GetHeader;
  export type Output = organization_minus_secret_minus_scanning_minus_alert[];

  export const METADATA = {
    method: "GET",
    path: "/enterprises/:enterprise/secret-scanning/alerts",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (enterprise: string) =>
    `/enterprises/${encodeURIComponent(enterprise ?? "null")}/secret-scanning/alerts`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): organization_minus_secret_minus_scanning_minus_alert[] =>
    typia.random<organization_minus_secret_minus_scanning_minus_alert[]>(g);
  export const simulate = (
    connection: IConnection<getByEnterprise.Headers>,
    enterprise: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByEnterprise.path(enterprise),
      contentType: "application/json",
    });
    try {
      assert.param("enterprise")(() => typia.assert(enterprise));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
