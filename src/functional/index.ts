import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { root } from "../structures/root";
export * as advisories from "./advisories";
export * as app from "./app";
export * as app_manifests from "./app_manifests";
export * as applications from "./applications";
export * as apps from "./apps";
export * as assignments from "./assignments";
export * as classrooms from "./classrooms";
export * as codes_of_conduct from "./codes_of_conduct";
export * as emojis from "./emojis";
export * as enterprises from "./enterprises";
export * as events from "./events";
export * as feeds from "./feeds";
export * as gists from "./gists";
export * as gitignore from "./gitignore";
export * as installation from "./installation";
export * as issues from "./issues";
export * as licenses from "./licenses";
export * as marketplace_listing from "./marketplace_listing";
export * as meta from "./meta";
export * as networks from "./networks";
export * as notifications from "./notifications";
export * as organizations from "./organizations";
export * as orgs from "./orgs";
export * as projects from "./projects";
export * as rate_limit from "./rate_limit";
export * as repos from "./repos";
export * as repositories from "./repositories";
export * as search from "./search";
export * as teams from "./teams";
export * as user from "./user";
export * as users from "./users";
export * as versions from "./versions";
export * as zen from "./zen";
/**
 * GitHub API Root.
 * Get Hypermedia links to resources accessible in GitHub's REST API
 *
 * @tag meta
 * @path
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(connection: IConnection): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Output = root;

  export const METADATA = {
    method: "GET",
    path: "/",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/";
  export const random = (g?: Partial<typia.IRandomGenerator>): root =>
    typia.random<root>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
