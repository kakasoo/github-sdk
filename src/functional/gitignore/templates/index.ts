import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { gitignore_minus_template } from "../../../structures/gitignore_minus_template";
/**
 * Get all gitignore templates.
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
 *
 * @tag gitignore
 * @path gitignore/templates
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(connection: IConnection): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Output = string[];

  export const METADATA = {
    method: "GET",
    path: "/gitignore/templates",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/gitignore/templates";
  export const random = (g?: Partial<typia.IRandomGenerator>): string[] =>
    typia.random<string[]>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a gitignore template.
 * Get the content of a gitignore template.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * - **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
 *
 * @tag gitignore
 * @path gitignore/templates/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByName(
  connection: IConnection,
  name: string,
): Promise<getByName.Output> {
  return !!connection.simulate
    ? getByName.simulate(connection, name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByName.METADATA,
          path: getByName.path(name),
          status: null,
        },
      );
}
export namespace getByName {
  export type Output = gitignore_minus_template;

  export const METADATA = {
    method: "GET",
    path: "/gitignore/templates/:name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (name: string) =>
    `/gitignore/templates/${encodeURIComponent(name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): gitignore_minus_template => typia.random<gitignore_minus_template>(g);
  export const simulate = (connection: IConnection, name: string): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByName.path(name),
      contentType: "application/json",
    });
    try {
      assert.param("name")(() => typia.assert(name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
