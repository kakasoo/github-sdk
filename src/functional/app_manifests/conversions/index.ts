import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
/**
 * Create a GitHub App from a manifest.
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
 *
 * @tag apps
 * @path app-manifests/:code/conversions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByCode(
  connection: IConnection,
  code: string,
): Promise<postByCode.Output> {
  return !!connection.simulate
    ? postByCode.simulate(connection, code)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByCode.METADATA,
          path: postByCode.path(code),
          status: null,
        },
      );
}
export namespace postByCode {
  export type Output = any;

  export const METADATA = {
    method: "POST",
    path: "/app-manifests/:code/conversions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (code: string) =>
    `/app-manifests/${encodeURIComponent(code ?? "null")}/conversions`;
  export const random = (g?: Partial<typia.IRandomGenerator>): any =>
    typia.random<any>(g);
  export const simulate = (connection: IConnection, code: string): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByCode.path(code),
      contentType: "application/json",
    });
    try {
      assert.param("code")(() => typia.assert(code));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
