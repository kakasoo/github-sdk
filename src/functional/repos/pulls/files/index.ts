import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposPullsFiles } from "../../../../structures/IApiReposPullsFiles";
import { diff_minus_entry } from "../../../../structures/diff_minus_entry";

/**
 * List pull requests files.
 * Lists the files in a specified pull request.
 *
 * > [!NOTE]
 * > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 *
 * @tag pulls
 * @path repos/:owner/:repo/pulls/:pull_number/files
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndPull_number(
  connection: IConnection<getByOwnerAndRepoAndPull_number.Headers>,
  owner: string,
  repo: string,
  pull_number: string,
): Promise<getByOwnerAndRepoAndPull_number.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndPull_number.simulate(
        connection,
        owner,
        repo,
        pull_number,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndPull_number.METADATA,
          path: getByOwnerAndRepoAndPull_number.path(owner, repo, pull_number),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndPull_number {
  export type Headers = IApiReposPullsFiles.GetHeader;
  export type Output = diff_minus_entry[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/pulls/:pull_number/files",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, pull_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pulls/${encodeURIComponent(pull_number ?? "null")}/files`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): diff_minus_entry[] => typia.random<diff_minus_entry[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndPull_number.Headers>,
    owner: string,
    repo: string,
    pull_number: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndPull_number.path(owner, repo, pull_number),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("pull_number")(() => typia.assert(pull_number));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
