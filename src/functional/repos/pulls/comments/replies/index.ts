import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposPullsCommentsReplies } from "../../../../../structures/IApiReposPullsCommentsReplies";
import { body } from "../../../../../structures/body";
import { pull_minus_request_minus_review_minus_comment } from "../../../../../structures/pull_minus_request_minus_review_minus_comment";
/**
 * Create a reply for a review comment.
 * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
 * and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 *
 * @tag pulls
 * @path repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndPull_numberAndComment_id(
  connection: IConnection<postByOwnerAndRepoAndPull_numberAndComment_id.Headers>,
  owner: string,
  repo: string,
  pull_number: string,
  comment_id: string,
  body: postByOwnerAndRepoAndPull_numberAndComment_id.Input,
): Promise<postByOwnerAndRepoAndPull_numberAndComment_id.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndPull_numberAndComment_id.simulate(
        connection,
        owner,
        repo,
        pull_number,
        comment_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndPull_numberAndComment_id.METADATA,
          path: postByOwnerAndRepoAndPull_numberAndComment_id.path(
            owner,
            repo,
            pull_number,
            comment_id,
          ),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepoAndPull_numberAndComment_id {
  export type Headers = IApiReposPullsCommentsReplies.PostHeader;
  export type Input = body;
  export type Output = pull_minus_request_minus_review_minus_comment;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    pull_number: string,
    comment_id: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pulls/${encodeURIComponent(pull_number ?? "null")}/comments/${encodeURIComponent(comment_id ?? "null")}/replies`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): pull_minus_request_minus_review_minus_comment =>
    typia.random<pull_minus_request_minus_review_minus_comment>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndPull_numberAndComment_id.Headers>,
    owner: string,
    repo: string,
    pull_number: string,
    comment_id: string,
    body: postByOwnerAndRepoAndPull_numberAndComment_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndPull_numberAndComment_id.path(
        owner,
        repo,
        pull_number,
        comment_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("pull_number")(() => typia.assert(pull_number));
      assert.param("comment_id")(() => typia.assert(comment_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
