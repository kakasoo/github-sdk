import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposPullsRequestedReviewers } from "../../../../structures/IApiReposPullsRequestedReviewers";
import { pull_minus_request_minus_review_minus_request } from "../../../../structures/pull_minus_request_minus_review_minus_request";
import { pull_minus_request_minus_simple } from "../../../../structures/pull_minus_request_minus_simple";
import { body } from "../../../../structures/body";
/**
 * Get all requested reviewers for a pull request.
 * Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
 *
 * @tag pulls
 * @path repos/:owner/:repo/pulls/:pull_number/requested_reviewers
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndPull_number(
  connection: IConnection<getByOwnerAndRepoAndPull_number.Headers>,
  owner: string,
  repo: string,
  pull_number: string,
): Promise<getByOwnerAndRepoAndPull_number.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndPull_number.simulate(
        connection,
        owner,
        repo,
        pull_number,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndPull_number.METADATA,
          path: getByOwnerAndRepoAndPull_number.path(owner, repo, pull_number),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndPull_number {
  export type Headers = IApiReposPullsRequestedReviewers.GetHeader;
  export type Output = pull_minus_request_minus_review_minus_request;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, pull_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pulls/${encodeURIComponent(pull_number ?? "null")}/requested_reviewers`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): pull_minus_request_minus_review_minus_request =>
    typia.random<pull_minus_request_minus_review_minus_request>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndPull_number.Headers>,
    owner: string,
    repo: string,
    pull_number: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndPull_number.path(owner, repo, pull_number),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("pull_number")(() => typia.assert(pull_number));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Request reviewers for a pull request.
 * Requests reviews for a pull request from a given set of users and/or teams.
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * @tag pulls
 * @path repos/:owner/:repo/pulls/:pull_number/requested_reviewers
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndPull_number(
  connection: IConnection<postByOwnerAndRepoAndPull_number.Headers>,
  owner: string,
  repo: string,
  pull_number: string,
  body: postByOwnerAndRepoAndPull_number.Input,
): Promise<postByOwnerAndRepoAndPull_number.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndPull_number.simulate(
        connection,
        owner,
        repo,
        pull_number,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndPull_number.METADATA,
          path: postByOwnerAndRepoAndPull_number.path(owner, repo, pull_number),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepoAndPull_number {
  export type Headers = IApiReposPullsRequestedReviewers.PostHeader;
  export type Input = any | any;
  export type Output = pull_minus_request_minus_simple;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, pull_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pulls/${encodeURIComponent(pull_number ?? "null")}/requested_reviewers`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): pull_minus_request_minus_simple =>
    typia.random<pull_minus_request_minus_simple>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndPull_number.Headers>,
    owner: string,
    repo: string,
    pull_number: string,
    body: postByOwnerAndRepoAndPull_number.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndPull_number.path(owner, repo, pull_number),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("pull_number")(() => typia.assert(pull_number));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove requested reviewers from a pull request.
 * Removes review requests from a pull request for a given set of users and/or teams.
 *
 * @tag pulls
 * @path repos/:owner/:repo/pulls/:pull_number/requested_reviewers
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndPull_number(
  connection: IConnection<eraseByOwnerAndRepoAndPull_number.Headers>,
  owner: string,
  repo: string,
  pull_number: string,
  body: eraseByOwnerAndRepoAndPull_number.Input,
): Promise<eraseByOwnerAndRepoAndPull_number.Output> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndPull_number.simulate(
        connection,
        owner,
        repo,
        pull_number,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndPull_number.METADATA,
          path: eraseByOwnerAndRepoAndPull_number.path(
            owner,
            repo,
            pull_number,
          ),
          status: null,
        },
        body,
      );
}
export namespace eraseByOwnerAndRepoAndPull_number {
  export type Headers = IApiReposPullsRequestedReviewers.DeleteHeader;
  export type Input = body;
  export type Output = pull_minus_request_minus_simple;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, pull_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pulls/${encodeURIComponent(pull_number ?? "null")}/requested_reviewers`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): pull_minus_request_minus_simple =>
    typia.random<pull_minus_request_minus_simple>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndPull_number.Headers>,
    owner: string,
    repo: string,
    pull_number: string,
    body: eraseByOwnerAndRepoAndPull_number.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndPull_number.path(owner, repo, pull_number),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("pull_number")(() => typia.assert(pull_number));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
