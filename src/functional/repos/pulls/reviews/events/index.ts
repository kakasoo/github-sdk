import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposPullsReviewsEvents } from "../../../../../structures/IApiReposPullsReviewsEvents";
import { body } from "../../../../../structures/body";
import { pull_minus_request_minus_review } from "../../../../../structures/pull_minus_request_minus_review";

/**
 * Submit a review for a pull request.
 * Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."
 *
 * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 *
 * @tag pulls
 * @path repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndPull_numberAndReview_id(
  connection: IConnection<postByOwnerAndRepoAndPull_numberAndReview_id.Headers>,
  owner: string,
  repo: string,
  pull_number: string,
  review_id: string,
  body: postByOwnerAndRepoAndPull_numberAndReview_id.Input,
): Promise<postByOwnerAndRepoAndPull_numberAndReview_id.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndPull_numberAndReview_id.simulate(
        connection,
        owner,
        repo,
        pull_number,
        review_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndPull_numberAndReview_id.METADATA,
          path: postByOwnerAndRepoAndPull_numberAndReview_id.path(
            owner,
            repo,
            pull_number,
            review_id,
          ),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepoAndPull_numberAndReview_id {
  export type Headers = IApiReposPullsReviewsEvents.PostHeader;
  export type Input = body;
  export type Output = pull_minus_request_minus_review;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    pull_number: string,
    review_id: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pulls/${encodeURIComponent(pull_number ?? "null")}/reviews/${encodeURIComponent(review_id ?? "null")}/events`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): pull_minus_request_minus_review =>
    typia.random<pull_minus_request_minus_review>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndPull_numberAndReview_id.Headers>,
    owner: string,
    repo: string,
    pull_number: string,
    review_id: string,
    body: postByOwnerAndRepoAndPull_numberAndReview_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndPull_numberAndReview_id.path(
        owner,
        repo,
        pull_number,
        review_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("pull_number")(() => typia.assert(pull_number));
      assert.param("review_id")(() => typia.assert(review_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
