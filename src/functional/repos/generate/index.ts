import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { body } from "../../../structures/body";
import { full_minus_repository } from "../../../structures/full_minus_repository";

/**
 * Create a repository using a template.
 * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
 *
 * OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
 *
 * @param template_owner The account owner of the template repository. The name is not case sensitive.
 * @param template_repo The name of the template repository without the `.git` extension. The name is not case sensitive.
 * @tag repos
 * @path repos/:template_owner/:template_repo/generate
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByTemplate_ownerAndTemplate_repo(
  connection: IConnection,
  template_owner: string,
  template_repo: string,
  body: postByTemplate_ownerAndTemplate_repo.Input,
): Promise<postByTemplate_ownerAndTemplate_repo.Output> {
  return !!connection.simulate
    ? postByTemplate_ownerAndTemplate_repo.simulate(
        connection,
        template_owner,
        template_repo,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByTemplate_ownerAndTemplate_repo.METADATA,
          path: postByTemplate_ownerAndTemplate_repo.path(
            template_owner,
            template_repo,
          ),
          status: null,
        },
        body,
      );
}
export namespace postByTemplate_ownerAndTemplate_repo {
  export type Input = body;
  export type Output = full_minus_repository;

  export const METADATA = {
    method: "POST",
    path: "/repos/:template_owner/:template_repo/generate",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (template_owner: string, template_repo: string) =>
    `/repos/${encodeURIComponent(template_owner ?? "null")}/${encodeURIComponent(template_repo ?? "null")}/generate`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): full_minus_repository => typia.random<full_minus_repository>(g);
  export const simulate = (
    connection: IConnection,
    template_owner: string,
    template_repo: string,
    body: postByTemplate_ownerAndTemplate_repo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByTemplate_ownerAndTemplate_repo.path(
        template_owner,
        template_repo,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("template_owner")(() => typia.assert(template_owner));
      assert.param("template_repo")(() => typia.assert(template_repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
