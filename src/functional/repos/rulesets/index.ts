import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposRulesets } from "../../../structures/IApiReposRulesets";
import { repository_minus_ruleset } from "../../../structures/repository_minus_ruleset";
import { body } from "../../../structures/body";
export * as rule_suites from "./rule_suites";
/**
 * Get all repository rulesets.
 * Get all the rulesets for a repository.
 *
 * @tag repos
 * @path repos/:owner/:repo/rulesets
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  query: getByOwnerAndRepo.Query,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo, query),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposRulesets.GetHeader;
  export type Query = IApiReposRulesets.GetQuery;
  export type Output = repository_minus_ruleset[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/rulesets",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    query: getByOwnerAndRepo.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/rulesets`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_ruleset[] => typia.random<repository_minus_ruleset[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    query: getByOwnerAndRepo.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo, query),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a repository ruleset.
 * Create a ruleset for a repository.
 *
 * @param body Request body
 * @tag repos
 * @path repos/:owner/:repo/rulesets
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposRulesets.PostHeader;
  export type Input = body;
  export type Output = repository_minus_ruleset;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/rulesets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/rulesets`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_ruleset => typia.random<repository_minus_ruleset>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a repository ruleset.
 * Get a ruleset for a repository.
 *
 * **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
 * making the API request has write access to the ruleset.
 *
 * @param ruleset_id The ID of the ruleset.
 * @tag repos
 * @path repos/:owner/:repo/rulesets/:ruleset_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndRuleset_id(
  connection: IConnection<getByOwnerAndRepoAndRuleset_id.Headers>,
  owner: string,
  repo: string,
  ruleset_id: number & tags.Type<"int32">,
  query: getByOwnerAndRepoAndRuleset_id.Query,
): Promise<getByOwnerAndRepoAndRuleset_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndRuleset_id.simulate(
        connection,
        owner,
        repo,
        ruleset_id,
        query,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndRuleset_id.METADATA,
          path: getByOwnerAndRepoAndRuleset_id.path(
            owner,
            repo,
            ruleset_id,
            query,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndRuleset_id {
  export type Headers = IApiReposRulesets.GetHeader;
  export type Query = IApiReposRulesets.GetQuery;
  export type Output = repository_minus_ruleset;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/rulesets/:ruleset_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    ruleset_id: number & tags.Type<"int32">,
    query: getByOwnerAndRepoAndRuleset_id.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/rulesets/${encodeURIComponent(ruleset_id ?? "null")}`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_ruleset => typia.random<repository_minus_ruleset>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndRuleset_id.Headers>,
    owner: string,
    repo: string,
    ruleset_id: number & tags.Type<"int32">,
    query: getByOwnerAndRepoAndRuleset_id.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndRuleset_id.path(owner, repo, ruleset_id, query),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("ruleset_id")(() => typia.assert(ruleset_id));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a repository ruleset.
 * Update a ruleset for a repository.
 *
 * @param ruleset_id The ID of the ruleset.
 * @param body Request body
 * @tag repos
 * @path repos/:owner/:repo/rulesets/:ruleset_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOwnerAndRepoAndRuleset_id(
  connection: IConnection<putByOwnerAndRepoAndRuleset_id.Headers>,
  owner: string,
  repo: string,
  ruleset_id: number & tags.Type<"int32">,
  body: putByOwnerAndRepoAndRuleset_id.Input,
): Promise<putByOwnerAndRepoAndRuleset_id.Output> {
  return !!connection.simulate
    ? putByOwnerAndRepoAndRuleset_id.simulate(
        connection,
        owner,
        repo,
        ruleset_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOwnerAndRepoAndRuleset_id.METADATA,
          path: putByOwnerAndRepoAndRuleset_id.path(owner, repo, ruleset_id),
          status: null,
        },
        body,
      );
}
export namespace putByOwnerAndRepoAndRuleset_id {
  export type Headers = IApiReposRulesets.PutHeader;
  export type Input = body;
  export type Output = repository_minus_ruleset;

  export const METADATA = {
    method: "PUT",
    path: "/repos/:owner/:repo/rulesets/:ruleset_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    ruleset_id: number & tags.Type<"int32">,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/rulesets/${encodeURIComponent(ruleset_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_ruleset => typia.random<repository_minus_ruleset>(g);
  export const simulate = (
    connection: IConnection<putByOwnerAndRepoAndRuleset_id.Headers>,
    owner: string,
    repo: string,
    ruleset_id: number & tags.Type<"int32">,
    body: putByOwnerAndRepoAndRuleset_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOwnerAndRepoAndRuleset_id.path(owner, repo, ruleset_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("ruleset_id")(() => typia.assert(ruleset_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a repository ruleset.
 * Delete a ruleset for a repository.
 *
 * @param ruleset_id The ID of the ruleset.
 * @tag repos
 * @path repos/:owner/:repo/rulesets/:ruleset_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndRuleset_id(
  connection: IConnection<eraseByOwnerAndRepoAndRuleset_id.Headers>,
  owner: string,
  repo: string,
  ruleset_id: number & tags.Type<"int32">,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndRuleset_id.simulate(
        connection,
        owner,
        repo,
        ruleset_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndRuleset_id.METADATA,
          path: eraseByOwnerAndRepoAndRuleset_id.path(owner, repo, ruleset_id),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndRuleset_id {
  export type Headers = IApiReposRulesets.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/rulesets/:ruleset_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    ruleset_id: number & tags.Type<"int32">,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/rulesets/${encodeURIComponent(ruleset_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndRuleset_id.Headers>,
    owner: string,
    repo: string,
    ruleset_id: number & tags.Type<"int32">,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndRuleset_id.path(owner, repo, ruleset_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("ruleset_id")(() => typia.assert(ruleset_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
