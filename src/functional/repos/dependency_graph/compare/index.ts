import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposDependencyGraphCompare } from "../../../../structures/IApiReposDependencyGraphCompare";
import { dependency_minus_graph_minus_diff } from "../../../../structures/dependency_minus_graph_minus_diff";

/**
 * Get a diff of the dependencies between commits.
 * Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
 *
 * @param basehead The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.
 * @tag dependency-graph
 * @path repos/:owner/:repo/dependency-graph/compare/:basehead
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndBasehead(
  connection: IConnection<getByOwnerAndRepoAndBasehead.Headers>,
  owner: string,
  repo: string,
  basehead: string,
): Promise<getByOwnerAndRepoAndBasehead.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndBasehead.simulate(connection, owner, repo, basehead)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndBasehead.METADATA,
          path: getByOwnerAndRepoAndBasehead.path(owner, repo, basehead),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndBasehead {
  export type Headers = IApiReposDependencyGraphCompare.GetHeader;
  export type Output = dependency_minus_graph_minus_diff;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/dependency-graph/compare/:basehead",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, basehead: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/dependency-graph/compare/${encodeURIComponent(basehead ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): dependency_minus_graph_minus_diff =>
    typia.random<dependency_minus_graph_minus_diff>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndBasehead.Headers>,
    owner: string,
    repo: string,
    basehead: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndBasehead.path(owner, repo, basehead),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("basehead")(() => typia.assert(basehead));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
