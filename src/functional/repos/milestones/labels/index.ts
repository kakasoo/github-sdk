import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposMilestonesLabels } from "../../../../structures/IApiReposMilestonesLabels";
import { label } from "../../../../structures/label";
/**
 * List labels for issues in a milestone.
 * Lists labels for issues in a milestone.
 *
 * @tag issues
 * @path repos/:owner/:repo/milestones/:milestone_number/labels
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndMilestone_number(
  connection: IConnection<getByOwnerAndRepoAndMilestone_number.Headers>,
  owner: string,
  repo: string,
  milestone_number: string,
): Promise<getByOwnerAndRepoAndMilestone_number.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndMilestone_number.simulate(
        connection,
        owner,
        repo,
        milestone_number,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndMilestone_number.METADATA,
          path: getByOwnerAndRepoAndMilestone_number.path(
            owner,
            repo,
            milestone_number,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndMilestone_number {
  export type Headers = IApiReposMilestonesLabels.GetHeader;
  export type Output = label[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/milestones/:milestone_number/labels",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, milestone_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/milestones/${encodeURIComponent(milestone_number ?? "null")}/labels`;
  export const random = (g?: Partial<typia.IRandomGenerator>): label[] =>
    typia.random<label[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndMilestone_number.Headers>,
    owner: string,
    repo: string,
    milestone_number: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndMilestone_number.path(
        owner,
        repo,
        milestone_number,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("milestone_number")(() => typia.assert(milestone_number));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
