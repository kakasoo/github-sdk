import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposMilestones } from "../../../structures/IApiReposMilestones";
import { milestone } from "../../../structures/milestone";
import { body } from "../../../structures/body";
export * as labels from "./labels";
/**
 * List milestones.
 * Lists milestones for a repository.
 *
 * @tag issues
 * @path repos/:owner/:repo/milestones
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  query: getByOwnerAndRepo.Query,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo, query),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposMilestones.GetHeader;
  export type Query = IApiReposMilestones.GetQuery;
  export type Output = milestone[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/milestones",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    query: getByOwnerAndRepo.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/milestones`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (g?: Partial<typia.IRandomGenerator>): milestone[] =>
    typia.random<milestone[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    query: getByOwnerAndRepo.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo, query),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a milestone.
 * Creates a milestone.
 *
 * @tag issues
 * @path repos/:owner/:repo/milestones
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposMilestones.PostHeader;
  export type Input = body;
  export type Output = milestone;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/milestones",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/milestones`;
  export const random = (g?: Partial<typia.IRandomGenerator>): milestone =>
    typia.random<milestone>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a milestone.
 * Gets a milestone using the given milestone number.
 *
 * @tag issues
 * @path repos/:owner/:repo/milestones/:milestone_number
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndMilestone_number(
  connection: IConnection<getByOwnerAndRepoAndMilestone_number.Headers>,
  owner: string,
  repo: string,
  milestone_number: string,
): Promise<getByOwnerAndRepoAndMilestone_number.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndMilestone_number.simulate(
        connection,
        owner,
        repo,
        milestone_number,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndMilestone_number.METADATA,
          path: getByOwnerAndRepoAndMilestone_number.path(
            owner,
            repo,
            milestone_number,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndMilestone_number {
  export type Headers = IApiReposMilestones.GetHeader;
  export type Output = milestone;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/milestones/:milestone_number",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, milestone_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/milestones/${encodeURIComponent(milestone_number ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): milestone =>
    typia.random<milestone>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndMilestone_number.Headers>,
    owner: string,
    repo: string,
    milestone_number: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndMilestone_number.path(
        owner,
        repo,
        milestone_number,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("milestone_number")(() => typia.assert(milestone_number));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag issues
 * @path repos/:owner/:repo/milestones/:milestone_number
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndMilestone_number(
  connection: IConnection<patchByOwnerAndRepoAndMilestone_number.Headers>,
  owner: string,
  repo: string,
  milestone_number: string,
  body: patchByOwnerAndRepoAndMilestone_number.Input,
): Promise<patchByOwnerAndRepoAndMilestone_number.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndMilestone_number.simulate(
        connection,
        owner,
        repo,
        milestone_number,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndMilestone_number.METADATA,
          path: patchByOwnerAndRepoAndMilestone_number.path(
            owner,
            repo,
            milestone_number,
          ),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndMilestone_number {
  export type Headers = IApiReposMilestones.PatchHeader;
  export type Input = body;
  export type Output = milestone;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/milestones/:milestone_number",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, milestone_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/milestones/${encodeURIComponent(milestone_number ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): milestone =>
    typia.random<milestone>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndMilestone_number.Headers>,
    owner: string,
    repo: string,
    milestone_number: string,
    body: patchByOwnerAndRepoAndMilestone_number.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndMilestone_number.path(
        owner,
        repo,
        milestone_number,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("milestone_number")(() => typia.assert(milestone_number));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a milestone.
 * Deletes a milestone using the given milestone number.
 *
 * @tag issues
 * @path repos/:owner/:repo/milestones/:milestone_number
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndMilestone_number(
  connection: IConnection<eraseByOwnerAndRepoAndMilestone_number.Headers>,
  owner: string,
  repo: string,
  milestone_number: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndMilestone_number.simulate(
        connection,
        owner,
        repo,
        milestone_number,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndMilestone_number.METADATA,
          path: eraseByOwnerAndRepoAndMilestone_number.path(
            owner,
            repo,
            milestone_number,
          ),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndMilestone_number {
  export type Headers = IApiReposMilestones.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/milestones/:milestone_number",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, milestone_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/milestones/${encodeURIComponent(milestone_number ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndMilestone_number.Headers>,
    owner: string,
    repo: string,
    milestone_number: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndMilestone_number.path(
        owner,
        repo,
        milestone_number,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("milestone_number")(() => typia.assert(milestone_number));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
