import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposHooks } from "../../../structures/IApiReposHooks";
import { hook } from "../../../structures/hook";
import { body } from "../../../structures/body";
export * as config from "./config";
export * as deliveries from "./deliveries";
export * as pings from "./pings";
export * as tests from "./tests";
/**
 * List repository webhooks.
 * Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
 *
 * @tag repos
 * @path repos/:owner/:repo/hooks
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposHooks.GetHeader;
  export type Output = hook[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/hooks",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/hooks`;
  export const random = (g?: Partial<typia.IRandomGenerator>): hook[] =>
    typia.random<hook[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a repository webhook.
 * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
 * share the same `config` as long as those webhooks do not have any `events` that overlap.
 *
 * @tag repos
 * @path repos/:owner/:repo/hooks
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposHooks.PostHeader;
  export type Input = body;
  export type Output = hook;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/hooks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/hooks`;
  export const random = (g?: Partial<typia.IRandomGenerator>): hook =>
    typia.random<hook>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a repository webhook.
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
 *
 * @tag repos
 * @path repos/:owner/:repo/hooks/:hook_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndHook_id(
  connection: IConnection<getByOwnerAndRepoAndHook_id.Headers>,
  owner: string,
  repo: string,
  hook_id: string,
): Promise<getByOwnerAndRepoAndHook_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndHook_id.simulate(connection, owner, repo, hook_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndHook_id.METADATA,
          path: getByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndHook_id {
  export type Headers = IApiReposHooks.GetHeader;
  export type Output = hook;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/hooks/:hook_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, hook_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/hooks/${encodeURIComponent(hook_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): hook =>
    typia.random<hook>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndHook_id.Headers>,
    owner: string,
    repo: string,
    hook_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("hook_id")(() => typia.assert(hook_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a repository webhook.
 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
 *
 * @tag repos
 * @path repos/:owner/:repo/hooks/:hook_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndHook_id(
  connection: IConnection<patchByOwnerAndRepoAndHook_id.Headers>,
  owner: string,
  repo: string,
  hook_id: string,
  body: patchByOwnerAndRepoAndHook_id.Input,
): Promise<patchByOwnerAndRepoAndHook_id.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndHook_id.simulate(
        connection,
        owner,
        repo,
        hook_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndHook_id.METADATA,
          path: patchByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndHook_id {
  export type Headers = IApiReposHooks.PatchHeader;
  export type Input = body;
  export type Output = hook;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/hooks/:hook_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, hook_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/hooks/${encodeURIComponent(hook_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): hook =>
    typia.random<hook>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndHook_id.Headers>,
    owner: string,
    repo: string,
    hook_id: string,
    body: patchByOwnerAndRepoAndHook_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("hook_id")(() => typia.assert(hook_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag repos
 * @path repos/:owner/:repo/hooks/:hook_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndHook_id(
  connection: IConnection<eraseByOwnerAndRepoAndHook_id.Headers>,
  owner: string,
  repo: string,
  hook_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndHook_id.simulate(connection, owner, repo, hook_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndHook_id.METADATA,
          path: eraseByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndHook_id {
  export type Headers = IApiReposHooks.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/hooks/:hook_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, hook_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/hooks/${encodeURIComponent(hook_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndHook_id.Headers>,
    owner: string,
    repo: string,
    hook_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("hook_id")(() => typia.assert(hook_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
