import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposHooksConfig } from "../../../../structures/IApiReposHooksConfig";
import { body } from "../../../../structures/body";
import { webhook_minus_config } from "../../../../structures/webhook_minus_config";

/**
 * Get a webhook configuration for a repository.
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/hooks/:hook_id/config
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndHook_id(
  connection: IConnection<getByOwnerAndRepoAndHook_id.Headers>,
  owner: string,
  repo: string,
  hook_id: string,
): Promise<getByOwnerAndRepoAndHook_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndHook_id.simulate(connection, owner, repo, hook_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndHook_id.METADATA,
          path: getByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndHook_id {
  export type Headers = IApiReposHooksConfig.GetHeader;
  export type Output = webhook_minus_config;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/hooks/:hook_id/config",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, hook_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/hooks/${encodeURIComponent(hook_id ?? "null")}/config`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): webhook_minus_config => typia.random<webhook_minus_config>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndHook_id.Headers>,
    owner: string,
    repo: string,
    hook_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("hook_id")(() => typia.assert(hook_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a webhook configuration for a repository.
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/hooks/:hook_id/config
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndHook_id(
  connection: IConnection<patchByOwnerAndRepoAndHook_id.Headers>,
  owner: string,
  repo: string,
  hook_id: string,
  body: patchByOwnerAndRepoAndHook_id.Input,
): Promise<patchByOwnerAndRepoAndHook_id.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndHook_id.simulate(
        connection,
        owner,
        repo,
        hook_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndHook_id.METADATA,
          path: patchByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndHook_id {
  export type Headers = IApiReposHooksConfig.PatchHeader;
  export type Input = body;
  export type Output = webhook_minus_config;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/hooks/:hook_id/config",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, hook_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/hooks/${encodeURIComponent(hook_id ?? "null")}/config`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): webhook_minus_config => typia.random<webhook_minus_config>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndHook_id.Headers>,
    owner: string,
    repo: string,
    hook_id: string,
    body: patchByOwnerAndRepoAndHook_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndHook_id.path(owner, repo, hook_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("hook_id")(() => typia.assert(hook_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
