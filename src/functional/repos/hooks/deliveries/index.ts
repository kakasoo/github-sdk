import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposHooksDeliveries } from "../../../../structures/IApiReposHooksDeliveries";
import { hook_minus_delivery_minus_item } from "../../../../structures/hook_minus_delivery_minus_item";
import { hook_minus_delivery } from "../../../../structures/hook_minus_delivery";
export * as attempts from "./attempts";
/**
 * List deliveries for a repository webhook.
 * Returns a list of webhook deliveries for a webhook configured in a repository.
 *
 * @tag repos
 * @path repos/:owner/:repo/hooks/:hook_id/deliveries
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndHook_id(
  connection: IConnection<getByOwnerAndRepoAndHook_id.Headers>,
  owner: string,
  repo: string,
  hook_id: string,
  query: getByOwnerAndRepoAndHook_id.Query,
): Promise<getByOwnerAndRepoAndHook_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndHook_id.simulate(
        connection,
        owner,
        repo,
        hook_id,
        query,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndHook_id.METADATA,
          path: getByOwnerAndRepoAndHook_id.path(owner, repo, hook_id, query),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndHook_id {
  export type Headers = IApiReposHooksDeliveries.GetHeader;
  export type Query = IApiReposHooksDeliveries.GetQuery;
  export type Output = hook_minus_delivery_minus_item[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/hooks/:hook_id/deliveries",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    hook_id: string,
    query: getByOwnerAndRepoAndHook_id.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/hooks/${encodeURIComponent(hook_id ?? "null")}/deliveries`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): hook_minus_delivery_minus_item[] =>
    typia.random<hook_minus_delivery_minus_item[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndHook_id.Headers>,
    owner: string,
    repo: string,
    hook_id: string,
    query: getByOwnerAndRepoAndHook_id.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndHook_id.path(owner, repo, hook_id, query),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("hook_id")(() => typia.assert(hook_id));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a delivery for a repository webhook.
 * Returns a delivery for a webhook configured in a repository.
 *
 * @tag repos
 * @path repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndHook_idAndDelivery_id(
  connection: IConnection<getByOwnerAndRepoAndHook_idAndDelivery_id.Headers>,
  owner: string,
  repo: string,
  hook_id: string,
  delivery_id: string,
): Promise<getByOwnerAndRepoAndHook_idAndDelivery_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndHook_idAndDelivery_id.simulate(
        connection,
        owner,
        repo,
        hook_id,
        delivery_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndHook_idAndDelivery_id.METADATA,
          path: getByOwnerAndRepoAndHook_idAndDelivery_id.path(
            owner,
            repo,
            hook_id,
            delivery_id,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndHook_idAndDelivery_id {
  export type Headers = IApiReposHooksDeliveries.GetHeader;
  export type Output = hook_minus_delivery;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    hook_id: string,
    delivery_id: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/hooks/${encodeURIComponent(hook_id ?? "null")}/deliveries/${encodeURIComponent(delivery_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): hook_minus_delivery => typia.random<hook_minus_delivery>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndHook_idAndDelivery_id.Headers>,
    owner: string,
    repo: string,
    hook_id: string,
    delivery_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndHook_idAndDelivery_id.path(
        owner,
        repo,
        hook_id,
        delivery_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("hook_id")(() => typia.assert(hook_id));
      assert.param("delivery_id")(() => typia.assert(delivery_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
