import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposEnvironmentsDeploymentBranchPolicies } from "../../../../structures/IApiReposEnvironmentsDeploymentBranchPolicies";
import { deployment_minus_branch_minus_policy } from "../../../../structures/deployment_minus_branch_minus_policy";
import { deployment_minus_branch_minus_policy_minus_name_minus_pattern } from "../../../../structures/deployment_minus_branch_minus_policy_minus_name_minus_pattern";
import { deployment_minus_branch_minus_policy_minus_name_minus_pattern_minus_with_minus_type } from "../../../../structures/deployment_minus_branch_minus_policy_minus_name_minus_pattern_minus_with_minus_type";
import { response } from "../../../../structures/response";

/**
 * List deployment branch policies.
 * Lists the deployment branch policies for an environment.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments/:environment_name/deployment-branch-policies
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndEnvironment_name(
  connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
): Promise<getByOwnerAndRepoAndEnvironment_name.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndEnvironment_name.simulate(
        connection,
        owner,
        repo,
        environment_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndEnvironment_name.METADATA,
          path: getByOwnerAndRepoAndEnvironment_name.path(
            owner,
            repo,
            environment_name,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndEnvironment_name {
  export type Headers = IApiReposEnvironmentsDeploymentBranchPolicies.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, environment_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/deployment-branch-policies`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndEnvironment_name.path(
        owner,
        repo,
        environment_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a deployment branch policy.
 * Creates a deployment branch or tag policy for an environment.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments/:environment_name/deployment-branch-policies
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndEnvironment_name(
  connection: IConnection<postByOwnerAndRepoAndEnvironment_name.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
  body: postByOwnerAndRepoAndEnvironment_name.Input,
): Promise<postByOwnerAndRepoAndEnvironment_name.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndEnvironment_name.simulate(
        connection,
        owner,
        repo,
        environment_name,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndEnvironment_name.METADATA,
          path: postByOwnerAndRepoAndEnvironment_name.path(
            owner,
            repo,
            environment_name,
          ),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepoAndEnvironment_name {
  export type Headers =
    IApiReposEnvironmentsDeploymentBranchPolicies.PostHeader;
  export type Input =
    deployment_minus_branch_minus_policy_minus_name_minus_pattern_minus_with_minus_type;
  export type Output = deployment_minus_branch_minus_policy;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, environment_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/deployment-branch-policies`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): deployment_minus_branch_minus_policy =>
    typia.random<deployment_minus_branch_minus_policy>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndEnvironment_name.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
    body: postByOwnerAndRepoAndEnvironment_name.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndEnvironment_name.path(
        owner,
        repo,
        environment_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a deployment branch policy.
 * Gets a deployment branch or tag policy for an environment.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id(
  connection: IConnection<getByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
  branch_policy_id: string,
): Promise<getByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.simulate(
        connection,
        owner,
        repo,
        environment_name,
        branch_policy_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.METADATA,
          path: getByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.path(
            owner,
            repo,
            environment_name,
            branch_policy_id,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id {
  export type Headers = IApiReposEnvironmentsDeploymentBranchPolicies.GetHeader;
  export type Output = deployment_minus_branch_minus_policy;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    environment_name: string,
    branch_policy_id: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/deployment-branch-policies/${encodeURIComponent(branch_policy_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): deployment_minus_branch_minus_policy =>
    typia.random<deployment_minus_branch_minus_policy>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
    branch_policy_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.path(
        owner,
        repo,
        environment_name,
        branch_policy_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
      assert.param("branch_policy_id")(() => typia.assert(branch_policy_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a deployment branch policy.
 * Updates a deployment branch or tag policy for an environment.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id(
  connection: IConnection<putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
  branch_policy_id: string,
  body: putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Input,
): Promise<putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Output> {
  return !!connection.simulate
    ? putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.simulate(
        connection,
        owner,
        repo,
        environment_name,
        branch_policy_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.METADATA,
          path: putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.path(
            owner,
            repo,
            environment_name,
            branch_policy_id,
          ),
          status: null,
        },
        body,
      );
}
export namespace putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id {
  export type Headers = IApiReposEnvironmentsDeploymentBranchPolicies.PutHeader;
  export type Input =
    deployment_minus_branch_minus_policy_minus_name_minus_pattern;
  export type Output = deployment_minus_branch_minus_policy;

  export const METADATA = {
    method: "PUT",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    environment_name: string,
    branch_policy_id: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/deployment-branch-policies/${encodeURIComponent(branch_policy_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): deployment_minus_branch_minus_policy =>
    typia.random<deployment_minus_branch_minus_policy>(g);
  export const simulate = (
    connection: IConnection<putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
    branch_policy_id: string,
    body: putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.path(
        owner,
        repo,
        environment_name,
        branch_policy_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
      assert.param("branch_policy_id")(() => typia.assert(branch_policy_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a deployment branch policy.
 * Deletes a deployment branch or tag policy for an environment.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id(
  connection: IConnection<eraseByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
  branch_policy_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.simulate(
        connection,
        owner,
        repo,
        environment_name,
        branch_policy_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.METADATA,
          path: eraseByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.path(
            owner,
            repo,
            environment_name,
            branch_policy_id,
          ),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id {
  export type Headers =
    IApiReposEnvironmentsDeploymentBranchPolicies.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    environment_name: string,
    branch_policy_id: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/deployment-branch-policies/${encodeURIComponent(branch_policy_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
    branch_policy_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndEnvironment_nameAndBranch_policy_id.path(
        owner,
        repo,
        environment_name,
        branch_policy_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
      assert.param("branch_policy_id")(() => typia.assert(branch_policy_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
