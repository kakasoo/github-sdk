import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposEnvironmentsSecretsPublicKey } from "../../../../../structures/IApiReposEnvironmentsSecretsPublicKey";
import { actions_minus_public_minus_key } from "../../../../../structures/actions_minus_public_minus_key";

/**
 * Get an environment public key.
 * Get the public key for an environment, which you need to encrypt environment
 * secrets. You need to encrypt a secret before you can create or update secrets.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/environments/:environment_name/secrets/public-key
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndEnvironment_name(
  connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
): Promise<getByOwnerAndRepoAndEnvironment_name.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndEnvironment_name.simulate(
        connection,
        owner,
        repo,
        environment_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndEnvironment_name.METADATA,
          path: getByOwnerAndRepoAndEnvironment_name.path(
            owner,
            repo,
            environment_name,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndEnvironment_name {
  export type Headers = IApiReposEnvironmentsSecretsPublicKey.GetHeader;
  export type Output = actions_minus_public_minus_key;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/environments/:environment_name/secrets/public-key",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, environment_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/secrets/public-key`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): actions_minus_public_minus_key =>
    typia.random<actions_minus_public_minus_key>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndEnvironment_name.path(
        owner,
        repo,
        environment_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
