import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposEnvironments } from "../../../structures/IApiReposEnvironments";
import { body } from "../../../structures/body";
import { environment } from "../../../structures/environment";
import { response } from "../../../structures/response";

export * as deployment_branch_policies from "./deployment_branch_policies";
export * as deployment_protection_rules from "./deployment_protection_rules";
export * as secrets from "./secrets";
export * as variables from "./variables";
/**
 * List environments.
 * Lists the environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposEnvironments.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/environments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an environment.
 * > [!NOTE]
 * > To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments/:environment_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndEnvironment_name(
  connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
): Promise<getByOwnerAndRepoAndEnvironment_name.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndEnvironment_name.simulate(
        connection,
        owner,
        repo,
        environment_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndEnvironment_name.METADATA,
          path: getByOwnerAndRepoAndEnvironment_name.path(
            owner,
            repo,
            environment_name,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndEnvironment_name {
  export type Headers = IApiReposEnvironments.GetHeader;
  export type Output = environment;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/environments/:environment_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, environment_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): environment =>
    typia.random<environment>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndEnvironment_name.path(
        owner,
        repo,
        environment_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
 *
 * > [!NOTE]
 * > To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
 *
 * > [!NOTE]
 * > To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)."
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments/:environment_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOwnerAndRepoAndEnvironment_name(
  connection: IConnection<putByOwnerAndRepoAndEnvironment_name.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
  body: putByOwnerAndRepoAndEnvironment_name.Input,
): Promise<putByOwnerAndRepoAndEnvironment_name.Output> {
  return !!connection.simulate
    ? putByOwnerAndRepoAndEnvironment_name.simulate(
        connection,
        owner,
        repo,
        environment_name,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOwnerAndRepoAndEnvironment_name.METADATA,
          path: putByOwnerAndRepoAndEnvironment_name.path(
            owner,
            repo,
            environment_name,
          ),
          status: null,
        },
        body,
      );
}
export namespace putByOwnerAndRepoAndEnvironment_name {
  export type Headers = IApiReposEnvironments.PutHeader;
  export type Input = body;
  export type Output = environment;

  export const METADATA = {
    method: "PUT",
    path: "/repos/:owner/:repo/environments/:environment_name",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, environment_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): environment =>
    typia.random<environment>(g);
  export const simulate = (
    connection: IConnection<putByOwnerAndRepoAndEnvironment_name.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
    body: putByOwnerAndRepoAndEnvironment_name.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOwnerAndRepoAndEnvironment_name.path(
        owner,
        repo,
        environment_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete an environment.
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments/:environment_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndEnvironment_name(
  connection: IConnection<eraseByOwnerAndRepoAndEnvironment_name.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndEnvironment_name.simulate(
        connection,
        owner,
        repo,
        environment_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndEnvironment_name.METADATA,
          path: eraseByOwnerAndRepoAndEnvironment_name.path(
            owner,
            repo,
            environment_name,
          ),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndEnvironment_name {
  export type Headers = IApiReposEnvironments.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/environments/:environment_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, environment_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndEnvironment_name.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndEnvironment_name.path(
        owner,
        repo,
        environment_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
