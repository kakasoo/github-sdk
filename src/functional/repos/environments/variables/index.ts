import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposEnvironmentsVariables } from "../../../../structures/IApiReposEnvironmentsVariables";
import { actions_minus_variable } from "../../../../structures/actions_minus_variable";
import { body } from "../../../../structures/body";
import { empty_minus_object } from "../../../../structures/empty_minus_object";
import { response } from "../../../../structures/response";

/**
 * List environment variables.
 * Lists all environment variables.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/environments/:environment_name/variables
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndEnvironment_name(
  connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
): Promise<getByOwnerAndRepoAndEnvironment_name.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndEnvironment_name.simulate(
        connection,
        owner,
        repo,
        environment_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndEnvironment_name.METADATA,
          path: getByOwnerAndRepoAndEnvironment_name.path(
            owner,
            repo,
            environment_name,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndEnvironment_name {
  export type Headers = IApiReposEnvironmentsVariables.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/environments/:environment_name/variables",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, environment_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/variables`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndEnvironment_name.path(
        owner,
        repo,
        environment_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create an environment variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/environments/:environment_name/variables
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndEnvironment_name(
  connection: IConnection<postByOwnerAndRepoAndEnvironment_name.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
  body: postByOwnerAndRepoAndEnvironment_name.Input,
): Promise<postByOwnerAndRepoAndEnvironment_name.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndEnvironment_name.simulate(
        connection,
        owner,
        repo,
        environment_name,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndEnvironment_name.METADATA,
          path: postByOwnerAndRepoAndEnvironment_name.path(
            owner,
            repo,
            environment_name,
          ),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepoAndEnvironment_name {
  export type Headers = IApiReposEnvironmentsVariables.PostHeader;
  export type Input = body;
  export type Output = empty_minus_object;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/environments/:environment_name/variables",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, environment_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/variables`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): empty_minus_object => typia.random<empty_minus_object>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndEnvironment_name.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
    body: postByOwnerAndRepoAndEnvironment_name.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndEnvironment_name.path(
        owner,
        repo,
        environment_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an environment variable.
 * Gets a specific variable in an environment.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/environments/:environment_name/variables/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndEnvironment_nameAndName(
  connection: IConnection<getByOwnerAndRepoAndEnvironment_nameAndName.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
  name: string,
): Promise<getByOwnerAndRepoAndEnvironment_nameAndName.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndEnvironment_nameAndName.simulate(
        connection,
        owner,
        repo,
        environment_name,
        name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndEnvironment_nameAndName.METADATA,
          path: getByOwnerAndRepoAndEnvironment_nameAndName.path(
            owner,
            repo,
            environment_name,
            name,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndEnvironment_nameAndName {
  export type Headers = IApiReposEnvironmentsVariables.GetHeader;
  export type Output = actions_minus_variable;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/environments/:environment_name/variables/:name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    environment_name: string,
    name: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/variables/${encodeURIComponent(name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): actions_minus_variable => typia.random<actions_minus_variable>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndEnvironment_nameAndName.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
    name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndEnvironment_nameAndName.path(
        owner,
        repo,
        environment_name,
        name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
      assert.param("name")(() => typia.assert(name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update an environment variable.
 * Updates an environment variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/environments/:environment_name/variables/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndEnvironment_nameAndName(
  connection: IConnection<patchByOwnerAndRepoAndEnvironment_nameAndName.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
  name: string,
  body: patchByOwnerAndRepoAndEnvironment_nameAndName.Input,
): Promise<void> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndEnvironment_nameAndName.simulate(
        connection,
        owner,
        repo,
        environment_name,
        name,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndEnvironment_nameAndName.METADATA,
          path: patchByOwnerAndRepoAndEnvironment_nameAndName.path(
            owner,
            repo,
            environment_name,
            name,
          ),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndEnvironment_nameAndName {
  export type Headers = IApiReposEnvironmentsVariables.PatchHeader;
  export type Input = body;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/environments/:environment_name/variables/:name",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    environment_name: string,
    name: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/variables/${encodeURIComponent(name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndEnvironment_nameAndName.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
    name: string,
    body: patchByOwnerAndRepoAndEnvironment_nameAndName.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndEnvironment_nameAndName.path(
        owner,
        repo,
        environment_name,
        name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
      assert.param("name")(() => typia.assert(name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete an environment variable.
 * Deletes an environment variable using the variable name.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/environments/:environment_name/variables/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndEnvironment_nameAndName(
  connection: IConnection<eraseByOwnerAndRepoAndEnvironment_nameAndName.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
  name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndEnvironment_nameAndName.simulate(
        connection,
        owner,
        repo,
        environment_name,
        name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndEnvironment_nameAndName.METADATA,
          path: eraseByOwnerAndRepoAndEnvironment_nameAndName.path(
            owner,
            repo,
            environment_name,
            name,
          ),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndEnvironment_nameAndName {
  export type Headers = IApiReposEnvironmentsVariables.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/environments/:environment_name/variables/:name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    environment_name: string,
    name: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/variables/${encodeURIComponent(name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndEnvironment_nameAndName.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
    name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndEnvironment_nameAndName.path(
        owner,
        repo,
        environment_name,
        name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
      assert.param("name")(() => typia.assert(name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
