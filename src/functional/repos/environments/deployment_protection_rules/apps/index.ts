import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposEnvironmentsDeploymentProtectionRulesApps } from "../../../../../structures/IApiReposEnvironmentsDeploymentProtectionRulesApps";
import { response } from "../../../../../structures/response";
/**
 * List custom deployment rule integrations available for an environment.
 * Gets all custom deployment protection rule integrations that are available for an environment.
 *
 * The authenticated user must have admin or owner permissions to the repository to use this endpoint.
 *
 * For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
 *
 * For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 *
 * @tag repos
 * @path repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/apps
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndEnvironment_name(
  connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
  owner: string,
  repo: string,
  environment_name: string,
): Promise<getByOwnerAndRepoAndEnvironment_name.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndEnvironment_name.simulate(
        connection,
        owner,
        repo,
        environment_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndEnvironment_name.METADATA,
          path: getByOwnerAndRepoAndEnvironment_name.path(
            owner,
            repo,
            environment_name,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndEnvironment_name {
  export type Headers =
    IApiReposEnvironmentsDeploymentProtectionRulesApps.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/apps",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, environment_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/environments/${encodeURIComponent(environment_name ?? "null")}/deployment_protection_rules/apps`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndEnvironment_name.Headers>,
    owner: string,
    repo: string,
    environment_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndEnvironment_name.path(
        owner,
        repo,
        environment_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("environment_name")(() => typia.assert(environment_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
