import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposLabels } from "../../../structures/IApiReposLabels";
import { body } from "../../../structures/body";
import { label } from "../../../structures/label";

/**
 * List labels for a repository.
 * Lists all labels for a repository.
 *
 * @tag issues
 * @path repos/:owner/:repo/labels
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposLabels.GetHeader;
  export type Output = label[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/labels",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/labels`;
  export const random = (g?: Partial<typia.IRandomGenerator>): label[] =>
    typia.random<label[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a label.
 * Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).
 *
 * @tag issues
 * @path repos/:owner/:repo/labels
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposLabels.PostHeader;
  export type Input = body;
  export type Output = label;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/labels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/labels`;
  export const random = (g?: Partial<typia.IRandomGenerator>): label =>
    typia.random<label>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a label.
 * Gets a label using the given name.
 *
 * @tag issues
 * @path repos/:owner/:repo/labels/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndName(
  connection: IConnection<getByOwnerAndRepoAndName.Headers>,
  owner: string,
  repo: string,
  name: string,
): Promise<getByOwnerAndRepoAndName.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndName.simulate(connection, owner, repo, name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndName.METADATA,
          path: getByOwnerAndRepoAndName.path(owner, repo, name),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndName {
  export type Headers = IApiReposLabels.GetHeader;
  export type Output = label;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/labels/:name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/labels/${encodeURIComponent(name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): label =>
    typia.random<label>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndName.Headers>,
    owner: string,
    repo: string,
    name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndName.path(owner, repo, name),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("name")(() => typia.assert(name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a label.
 * Updates a label using the given label name.
 *
 * @tag issues
 * @path repos/:owner/:repo/labels/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndName(
  connection: IConnection<patchByOwnerAndRepoAndName.Headers>,
  owner: string,
  repo: string,
  name: string,
  body: patchByOwnerAndRepoAndName.Input,
): Promise<patchByOwnerAndRepoAndName.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndName.simulate(connection, owner, repo, name, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndName.METADATA,
          path: patchByOwnerAndRepoAndName.path(owner, repo, name),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndName {
  export type Headers = IApiReposLabels.PatchHeader;
  export type Input = body;
  export type Output = label;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/labels/:name",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/labels/${encodeURIComponent(name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): label =>
    typia.random<label>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndName.Headers>,
    owner: string,
    repo: string,
    name: string,
    body: patchByOwnerAndRepoAndName.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndName.path(owner, repo, name),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("name")(() => typia.assert(name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a label.
 * Deletes a label using the given label name.
 *
 * @tag issues
 * @path repos/:owner/:repo/labels/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndName(
  connection: IConnection<eraseByOwnerAndRepoAndName.Headers>,
  owner: string,
  repo: string,
  name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndName.simulate(connection, owner, repo, name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndName.METADATA,
          path: eraseByOwnerAndRepoAndName.path(owner, repo, name),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndName {
  export type Headers = IApiReposLabels.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/labels/:name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/labels/${encodeURIComponent(name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndName.Headers>,
    owner: string,
    repo: string,
    name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndName.path(owner, repo, name),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("name")(() => typia.assert(name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
