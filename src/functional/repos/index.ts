import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiRepos } from "../../structures/IApiRepos";
import { full_minus_repository } from "../../structures/full_minus_repository";
import { body } from "../../structures/body";
export * as actions from "./actions";
export * as activity from "./activity";
export * as assignees from "./assignees";
export * as attestations from "./attestations";
export * as autolinks from "./autolinks";
export * as automated_security_fixes from "./automated_security_fixes";
export * as branches from "./branches";
export * as check_runs from "./check_runs";
export * as check_suites from "./check_suites";
export * as code_scanning from "./code_scanning";
export * as code_security_configuration from "./code_security_configuration";
export * as codeowners from "./codeowners";
export * as codespaces from "./codespaces";
export * as collaborators from "./collaborators";
export * as comments from "./comments";
export * as commits from "./commits";
export * as community from "./community";
export * as compare from "./compare";
export * as contents from "./contents";
export * as contributors from "./contributors";
export * as dependabot from "./dependabot";
export * as dependency_graph from "./dependency_graph";
export * as deployments from "./deployments";
export * as dispatches from "./dispatches";
export * as environments from "./environments";
export * as events from "./events";
export * as forks from "./forks";
export * as git from "./git";
export * as hooks from "./hooks";
export * as _import from "./_import";
export * as installation from "./installation";
export * as interaction_limits from "./interaction_limits";
export * as invitations from "./invitations";
export * as issues from "./issues";
export * as keys from "./keys";
export * as labels from "./labels";
export * as languages from "./languages";
export * as license from "./license";
export * as merge_upstream from "./merge_upstream";
export * as merges from "./merges";
export * as milestones from "./milestones";
export * as notifications from "./notifications";
export * as pages from "./pages";
export * as private_vulnerability_reporting from "./private_vulnerability_reporting";
export * as projects from "./projects";
export * as properties from "./properties";
export * as pulls from "./pulls";
export * as readme from "./readme";
export * as releases from "./releases";
export * as rules from "./rules";
export * as rulesets from "./rulesets";
export * as secret_scanning from "./secret_scanning";
export * as security_advisories from "./security_advisories";
export * as stargazers from "./stargazers";
export * as stats from "./stats";
export * as statuses from "./statuses";
export * as subscribers from "./subscribers";
export * as subscription from "./subscription";
export * as tags from "./tags";
export * as tarball from "./tarball";
export * as teams from "./teams";
export * as topics from "./topics";
export * as traffic from "./traffic";
export * as transfer from "./transfer";
export * as vulnerability_alerts from "./vulnerability_alerts";
export * as zipball from "./zipball";
export * as generate from "./generate";
/**
 * Get a repository.
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 *
 * > [!NOTE]
 * > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * @tag repos
 * @path repos/:owner/:repo
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiRepos.GetHeader;
  export type Output = full_minus_repository;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): full_minus_repository => typia.random<full_minus_repository>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a repository.
 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepo(
  connection: IConnection<patchByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: patchByOwnerAndRepo.Input,
): Promise<patchByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepo.METADATA,
          path: patchByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepo {
  export type Headers = IApiRepos.PatchHeader;
  export type Input = body;
  export type Output = full_minus_repository;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): full_minus_repository => typia.random<full_minus_repository>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: patchByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a repository.
 * Deleting a repository requires admin access.
 *
 * If an organization owner has configured the organization to prevent members from deleting organization-owned
 * repositories, you will get a `403 Forbidden` response.
 *
 * OAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepo(
  connection: IConnection<eraseByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepo.METADATA,
          path: eraseByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepo {
  export type Headers = IApiRepos.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
