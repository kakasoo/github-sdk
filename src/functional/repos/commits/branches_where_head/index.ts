import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposCommitsBranchesWhereHead } from "../../../../structures/IApiReposCommitsBranchesWhereHead";
import { branch_minus_short } from "../../../../structures/branch_minus_short";
/**
 * List branches for HEAD commit.
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 *
 * @tag repos
 * @path repos/:owner/:repo/commits/:commit_sha/branches-where-head
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndCommit_sha(
  connection: IConnection<getByOwnerAndRepoAndCommit_sha.Headers>,
  owner: string,
  repo: string,
  commit_sha: string,
): Promise<getByOwnerAndRepoAndCommit_sha.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndCommit_sha.simulate(
        connection,
        owner,
        repo,
        commit_sha,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndCommit_sha.METADATA,
          path: getByOwnerAndRepoAndCommit_sha.path(owner, repo, commit_sha),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndCommit_sha {
  export type Headers = IApiReposCommitsBranchesWhereHead.GetHeader;
  export type Output = branch_minus_short[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/commits/:commit_sha/branches-where-head",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, commit_sha: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/commits/${encodeURIComponent(commit_sha ?? "null")}/branches-where-head`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): branch_minus_short[] => typia.random<branch_minus_short[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndCommit_sha.Headers>,
    owner: string,
    repo: string,
    commit_sha: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndCommit_sha.path(owner, repo, commit_sha),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("commit_sha")(() => typia.assert(commit_sha));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
