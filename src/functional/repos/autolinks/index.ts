import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposAutolinks } from "../../../structures/IApiReposAutolinks";
import { autolink } from "../../../structures/autolink";
import { body } from "../../../structures/body";
/**
 * Get all autolinks of a repository.
 * Gets all autolinks that are configured for a repository.
 *
 * Information about autolinks are only available to repository administrators.
 *
 * @tag repos
 * @path repos/:owner/:repo/autolinks
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposAutolinks.GetHeader;
  export type Output = autolink[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/autolinks",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/autolinks`;
  export const random = (g?: Partial<typia.IRandomGenerator>): autolink[] =>
    typia.random<autolink[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create an autolink reference for a repository.
 * Users with admin access to the repository can create an autolink.
 *
 * @tag repos
 * @path repos/:owner/:repo/autolinks
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposAutolinks.PostHeader;
  export type Input = body;
  export type Output = autolink;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/autolinks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/autolinks`;
  export const random = (g?: Partial<typia.IRandomGenerator>): autolink =>
    typia.random<autolink>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an autolink reference of a repository.
 * This returns a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 *
 * @tag repos
 * @path repos/:owner/:repo/autolinks/:autolink_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndAutolink_id(
  connection: IConnection<getByOwnerAndRepoAndAutolink_id.Headers>,
  owner: string,
  repo: string,
  autolink_id: string,
): Promise<getByOwnerAndRepoAndAutolink_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndAutolink_id.simulate(
        connection,
        owner,
        repo,
        autolink_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndAutolink_id.METADATA,
          path: getByOwnerAndRepoAndAutolink_id.path(owner, repo, autolink_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndAutolink_id {
  export type Headers = IApiReposAutolinks.GetHeader;
  export type Output = autolink;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/autolinks/:autolink_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, autolink_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/autolinks/${encodeURIComponent(autolink_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): autolink =>
    typia.random<autolink>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndAutolink_id.Headers>,
    owner: string,
    repo: string,
    autolink_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndAutolink_id.path(owner, repo, autolink_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("autolink_id")(() => typia.assert(autolink_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete an autolink reference from a repository.
 * This deletes a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 *
 * @tag repos
 * @path repos/:owner/:repo/autolinks/:autolink_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndAutolink_id(
  connection: IConnection<eraseByOwnerAndRepoAndAutolink_id.Headers>,
  owner: string,
  repo: string,
  autolink_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndAutolink_id.simulate(
        connection,
        owner,
        repo,
        autolink_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndAutolink_id.METADATA,
          path: eraseByOwnerAndRepoAndAutolink_id.path(
            owner,
            repo,
            autolink_id,
          ),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndAutolink_id {
  export type Headers = IApiReposAutolinks.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/autolinks/:autolink_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, autolink_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/autolinks/${encodeURIComponent(autolink_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndAutolink_id.Headers>,
    owner: string,
    repo: string,
    autolink_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndAutolink_id.path(owner, repo, autolink_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("autolink_id")(() => typia.assert(autolink_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
