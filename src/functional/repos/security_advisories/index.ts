import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposSecurityAdvisories } from "../../../structures/IApiReposSecurityAdvisories";
import { repository_minus_advisory } from "../../../structures/repository_minus_advisory";
import { repository_minus_advisory_minus_create } from "../../../structures/repository_minus_advisory_minus_create";
import { repository_minus_advisory_minus_update } from "../../../structures/repository_minus_advisory_minus_update";

export * as reports from "./reports";
export * as cve from "./cve";
export * as forks from "./forks";
/**
 * List repository security advisories.
 * Lists security advisories in a repository.
 *
 * The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
 *
 * @tag security-advisories
 * @path repos/:owner/:repo/security-advisories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  query: getByOwnerAndRepo.Query,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo, query),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposSecurityAdvisories.GetHeader;
  export type Query = IApiReposSecurityAdvisories.GetQuery;
  export type Output = repository_minus_advisory[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/security-advisories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    query: getByOwnerAndRepo.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/security-advisories`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_advisory[] =>
    typia.random<repository_minus_advisory[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    query: getByOwnerAndRepo.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo, query),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a repository security advisory.
 * Creates a new repository security advisory.
 *
 * In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
 *
 * @tag security-advisories
 * @path repos/:owner/:repo/security-advisories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposSecurityAdvisories.PostHeader;
  export type Input = repository_minus_advisory_minus_create;
  export type Output = repository_minus_advisory;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/security-advisories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/security-advisories`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_advisory => typia.random<repository_minus_advisory>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
 *
 * Anyone can access any published security advisory on a public repository.
 *
 * The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a
 * collaborator on the security advisory.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
 *
 * @tag security-advisories
 * @path repos/:owner/:repo/security-advisories/:ghsa_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndGhsa_id(
  connection: IConnection<getByOwnerAndRepoAndGhsa_id.Headers>,
  owner: string,
  repo: string,
  ghsa_id: string,
): Promise<getByOwnerAndRepoAndGhsa_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndGhsa_id.simulate(connection, owner, repo, ghsa_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndGhsa_id.METADATA,
          path: getByOwnerAndRepoAndGhsa_id.path(owner, repo, ghsa_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndGhsa_id {
  export type Headers = IApiReposSecurityAdvisories.GetHeader;
  export type Output = repository_minus_advisory;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/security-advisories/:ghsa_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, ghsa_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/security-advisories/${encodeURIComponent(ghsa_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_advisory => typia.random<repository_minus_advisory>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndGhsa_id.Headers>,
    owner: string,
    repo: string,
    ghsa_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndGhsa_id.path(owner, repo, ghsa_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("ghsa_id")(() => typia.assert(ghsa_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
 *
 * In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,
 * or a collaborator on the repository security advisory.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
 *
 * @tag security-advisories
 * @path repos/:owner/:repo/security-advisories/:ghsa_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndGhsa_id(
  connection: IConnection<patchByOwnerAndRepoAndGhsa_id.Headers>,
  owner: string,
  repo: string,
  ghsa_id: string,
  body: patchByOwnerAndRepoAndGhsa_id.Input,
): Promise<patchByOwnerAndRepoAndGhsa_id.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndGhsa_id.simulate(
        connection,
        owner,
        repo,
        ghsa_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndGhsa_id.METADATA,
          path: patchByOwnerAndRepoAndGhsa_id.path(owner, repo, ghsa_id),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndGhsa_id {
  export type Headers = IApiReposSecurityAdvisories.PatchHeader;
  export type Input = repository_minus_advisory_minus_update;
  export type Output = repository_minus_advisory;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/security-advisories/:ghsa_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, ghsa_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/security-advisories/${encodeURIComponent(ghsa_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_advisory => typia.random<repository_minus_advisory>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndGhsa_id.Headers>,
    owner: string,
    repo: string,
    ghsa_id: string,
    body: patchByOwnerAndRepoAndGhsa_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndGhsa_id.path(owner, repo, ghsa_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("ghsa_id")(() => typia.assert(ghsa_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
