import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposSecurityAdvisoriesCve } from "../../../../structures/IApiReposSecurityAdvisoriesCve";

/**
 * Request a CVE for a repository security advisory.
 * If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."
 *
 * You may request a CVE for public repositories, but cannot do so for private repositories.
 *
 * In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
 *
 * @tag security-advisories
 * @path repos/:owner/:repo/security-advisories/:ghsa_id/cve
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndGhsa_id(
  connection: IConnection<postByOwnerAndRepoAndGhsa_id.Headers>,
  owner: string,
  repo: string,
  ghsa_id: string,
): Promise<void> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndGhsa_id.simulate(connection, owner, repo, ghsa_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndGhsa_id.METADATA,
          path: postByOwnerAndRepoAndGhsa_id.path(owner, repo, ghsa_id),
          status: null,
        },
      );
}
export namespace postByOwnerAndRepoAndGhsa_id {
  export type Headers = IApiReposSecurityAdvisoriesCve.PostHeader;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/security-advisories/:ghsa_id/cve",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, ghsa_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/security-advisories/${encodeURIComponent(ghsa_id ?? "null")}/cve`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndGhsa_id.Headers>,
    owner: string,
    repo: string,
    ghsa_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndGhsa_id.path(owner, repo, ghsa_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("ghsa_id")(() => typia.assert(ghsa_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
