import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposDeploymentsStatuses } from "../../../../structures/IApiReposDeploymentsStatuses";
import { deployment_minus_status } from "../../../../structures/deployment_minus_status";
import { body } from "../../../../structures/body";
/**
 * List deployment statuses.
 * Users with pull access can view deployment statuses for a deployment:
 *
 * @tag repos
 * @path repos/:owner/:repo/deployments/:deployment_id/statuses
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndDeployment_id(
  connection: IConnection<getByOwnerAndRepoAndDeployment_id.Headers>,
  owner: string,
  repo: string,
  deployment_id: string,
): Promise<getByOwnerAndRepoAndDeployment_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndDeployment_id.simulate(
        connection,
        owner,
        repo,
        deployment_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndDeployment_id.METADATA,
          path: getByOwnerAndRepoAndDeployment_id.path(
            owner,
            repo,
            deployment_id,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndDeployment_id {
  export type Headers = IApiReposDeploymentsStatuses.GetHeader;
  export type Output = deployment_minus_status[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, deployment_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/deployments/${encodeURIComponent(deployment_id ?? "null")}/statuses`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): deployment_minus_status[] => typia.random<deployment_minus_status[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndDeployment_id.Headers>,
    owner: string,
    repo: string,
    deployment_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndDeployment_id.path(owner, repo, deployment_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("deployment_id")(() => typia.assert(deployment_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a deployment status.
 * Users with `push` access can create deployment statuses for a given deployment.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/deployments/:deployment_id/statuses
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndDeployment_id(
  connection: IConnection<postByOwnerAndRepoAndDeployment_id.Headers>,
  owner: string,
  repo: string,
  deployment_id: string,
  body: postByOwnerAndRepoAndDeployment_id.Input,
): Promise<postByOwnerAndRepoAndDeployment_id.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndDeployment_id.simulate(
        connection,
        owner,
        repo,
        deployment_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndDeployment_id.METADATA,
          path: postByOwnerAndRepoAndDeployment_id.path(
            owner,
            repo,
            deployment_id,
          ),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepoAndDeployment_id {
  export type Headers = IApiReposDeploymentsStatuses.PostHeader;
  export type Input = body;
  export type Output = deployment_minus_status;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, deployment_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/deployments/${encodeURIComponent(deployment_id ?? "null")}/statuses`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): deployment_minus_status => typia.random<deployment_minus_status>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndDeployment_id.Headers>,
    owner: string,
    repo: string,
    deployment_id: string,
    body: postByOwnerAndRepoAndDeployment_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndDeployment_id.path(owner, repo, deployment_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("deployment_id")(() => typia.assert(deployment_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a deployment status.
 * Users with pull access can view a deployment status for a deployment:
 *
 * @tag repos
 * @path repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndDeployment_idAndStatus_id(
  connection: IConnection<getByOwnerAndRepoAndDeployment_idAndStatus_id.Headers>,
  owner: string,
  repo: string,
  deployment_id: string,
  status_id: number & tags.Type<"int32">,
): Promise<getByOwnerAndRepoAndDeployment_idAndStatus_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndDeployment_idAndStatus_id.simulate(
        connection,
        owner,
        repo,
        deployment_id,
        status_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndDeployment_idAndStatus_id.METADATA,
          path: getByOwnerAndRepoAndDeployment_idAndStatus_id.path(
            owner,
            repo,
            deployment_id,
            status_id,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndDeployment_idAndStatus_id {
  export type Headers = IApiReposDeploymentsStatuses.GetHeader;
  export type Output = deployment_minus_status;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    deployment_id: string,
    status_id: number & tags.Type<"int32">,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/deployments/${encodeURIComponent(deployment_id ?? "null")}/statuses/${encodeURIComponent(status_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): deployment_minus_status => typia.random<deployment_minus_status>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndDeployment_idAndStatus_id.Headers>,
    owner: string,
    repo: string,
    deployment_id: string,
    status_id: number & tags.Type<"int32">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndDeployment_idAndStatus_id.path(
        owner,
        repo,
        deployment_id,
        status_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("deployment_id")(() => typia.assert(deployment_id));
      assert.param("status_id")(() => typia.assert(status_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
