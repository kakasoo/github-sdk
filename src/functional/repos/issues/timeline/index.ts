import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposIssuesTimeline } from "../../../../structures/IApiReposIssuesTimeline";
import { timeline_minus_issue_minus_events } from "../../../../structures/timeline_minus_issue_minus_events";
/**
 * List timeline events for an issue.
 * List all timeline events for an issue.
 *
 * @tag issues
 * @path repos/:owner/:repo/issues/:issue_number/timeline
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndIssue_number(
  connection: IConnection<getByOwnerAndRepoAndIssue_number.Headers>,
  owner: string,
  repo: string,
  issue_number: string,
): Promise<getByOwnerAndRepoAndIssue_number.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndIssue_number.simulate(
        connection,
        owner,
        repo,
        issue_number,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndIssue_number.METADATA,
          path: getByOwnerAndRepoAndIssue_number.path(
            owner,
            repo,
            issue_number,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndIssue_number {
  export type Headers = IApiReposIssuesTimeline.GetHeader;
  export type Output = timeline_minus_issue_minus_events[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/issues/:issue_number/timeline",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, issue_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/issues/${encodeURIComponent(issue_number ?? "null")}/timeline`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): timeline_minus_issue_minus_events[] =>
    typia.random<timeline_minus_issue_minus_events[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndIssue_number.Headers>,
    owner: string,
    repo: string,
    issue_number: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndIssue_number.path(owner, repo, issue_number),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("issue_number")(() => typia.assert(issue_number));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
