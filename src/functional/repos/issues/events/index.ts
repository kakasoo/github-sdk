import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";

import { IApiReposIssuesEvents } from "../../../../structures/IApiReposIssuesEvents";
import { issue_minus_event } from "../../../../structures/issue_minus_event";
import { issue_minus_event_minus_for_minus_issue } from "../../../../structures/issue_minus_event_minus_for_minus_issue";

/**
 * List issue events for a repository.
 * Lists events for a repository.
 *
 * @tag issues
 * @path repos/:owner/:repo/issues/events
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposIssuesEvents.GetHeader;
  export type Output = issue_minus_event[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/issues/events",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/issues/events`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): issue_minus_event[] => typia.random<issue_minus_event[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an issue event.
 * Gets a single event by the event id.
 *
 * @tag issues
 * @path repos/:owner/:repo/issues/events/:event_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndEvent_id(
  connection: IConnection<getByOwnerAndRepoAndEvent_id.Headers>,
  owner: string,
  repo: string,
  event_id: number & tags.Type<"int32">,
): Promise<getByOwnerAndRepoAndEvent_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndEvent_id.simulate(connection, owner, repo, event_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndEvent_id.METADATA,
          path: getByOwnerAndRepoAndEvent_id.path(owner, repo, event_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndEvent_id {
  export type Headers = IApiReposIssuesEvents.GetHeader;
  export type Output = issue_minus_event;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/issues/events/:event_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    event_id: number & tags.Type<"int32">,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/issues/events/${encodeURIComponent(event_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): issue_minus_event => typia.random<issue_minus_event>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndEvent_id.Headers>,
    owner: string,
    repo: string,
    event_id: number & tags.Type<"int32">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndEvent_id.path(owner, repo, event_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("event_id")(() => typia.assert(event_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * List issue events.
 * Lists all events for an issue.
 *
 * @tag issues
 * @path repos/:owner/:repo/issues/:issue_number/events
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndIssue_number(
  connection: IConnection<getByOwnerAndRepoAndIssue_number.Headers>,
  owner: string,
  repo: string,
  issue_number: string,
): Promise<getByOwnerAndRepoAndIssue_number.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndIssue_number.simulate(
        connection,
        owner,
        repo,
        issue_number,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndIssue_number.METADATA,
          path: getByOwnerAndRepoAndIssue_number.path(
            owner,
            repo,
            issue_number,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndIssue_number {
  export type Headers = IApiReposIssuesEvents.GetHeader;
  export type Output = issue_minus_event_minus_for_minus_issue[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/issues/:issue_number/events",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, issue_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/issues/${encodeURIComponent(issue_number ?? "null")}/events`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): issue_minus_event_minus_for_minus_issue[] =>
    typia.random<issue_minus_event_minus_for_minus_issue[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndIssue_number.Headers>,
    owner: string,
    repo: string,
    issue_number: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndIssue_number.path(owner, repo, issue_number),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("issue_number")(() => typia.assert(issue_number));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
