import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposInvitations } from "../../../structures/IApiReposInvitations";
import { repository_minus_invitation } from "../../../structures/repository_minus_invitation";
import { body } from "../../../structures/body";
/**
 * List repository invitations.
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 *
 * @tag repos
 * @path repos/:owner/:repo/invitations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposInvitations.GetHeader;
  export type Output = repository_minus_invitation[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/invitations",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/invitations`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_invitation[] =>
    typia.random<repository_minus_invitation[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag repos
 * @path repos/:owner/:repo/invitations/:invitation_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndInvitation_id(
  connection: IConnection<patchByOwnerAndRepoAndInvitation_id.Headers>,
  owner: string,
  repo: string,
  invitation_id: string,
  body: patchByOwnerAndRepoAndInvitation_id.Input,
): Promise<patchByOwnerAndRepoAndInvitation_id.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndInvitation_id.simulate(
        connection,
        owner,
        repo,
        invitation_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndInvitation_id.METADATA,
          path: patchByOwnerAndRepoAndInvitation_id.path(
            owner,
            repo,
            invitation_id,
          ),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndInvitation_id {
  export type Headers = IApiReposInvitations.PatchHeader;
  export type Input = body;
  export type Output = repository_minus_invitation;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/invitations/:invitation_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, invitation_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/invitations/${encodeURIComponent(invitation_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): repository_minus_invitation =>
    typia.random<repository_minus_invitation>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndInvitation_id.Headers>,
    owner: string,
    repo: string,
    invitation_id: string,
    body: patchByOwnerAndRepoAndInvitation_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndInvitation_id.path(
        owner,
        repo,
        invitation_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("invitation_id")(() => typia.assert(invitation_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag repos
 * @path repos/:owner/:repo/invitations/:invitation_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndInvitation_id(
  connection: IConnection<eraseByOwnerAndRepoAndInvitation_id.Headers>,
  owner: string,
  repo: string,
  invitation_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndInvitation_id.simulate(
        connection,
        owner,
        repo,
        invitation_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndInvitation_id.METADATA,
          path: eraseByOwnerAndRepoAndInvitation_id.path(
            owner,
            repo,
            invitation_id,
          ),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndInvitation_id {
  export type Headers = IApiReposInvitations.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/invitations/:invitation_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, invitation_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/invitations/${encodeURIComponent(invitation_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndInvitation_id.Headers>,
    owner: string,
    repo: string,
    invitation_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndInvitation_id.path(
        owner,
        repo,
        invitation_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("invitation_id")(() => typia.assert(invitation_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
