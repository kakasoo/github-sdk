import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposActionsRunsDeploymentProtectionRule } from "../../../../../structures/IApiReposActionsRunsDeploymentProtectionRule";
import { review_minus_custom_minus_gates_minus_comment_minus_required } from "../../../../../structures/review_minus_custom_minus_gates_minus_comment_minus_required";
import { review_minus_custom_minus_gates_minus_state_minus_required } from "../../../../../structures/review_minus_custom_minus_gates_minus_state_minus_required";
/**
 * Review custom deployment protection rules for a workflow run.
 * Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
 *
 * > [!NOTE]
 * > GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/runs/:run_id/deployment_protection_rule
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndRun_id(
  connection: IConnection<postByOwnerAndRepoAndRun_id.Headers>,
  owner: string,
  repo: string,
  run_id: string,
  body: postByOwnerAndRepoAndRun_id.Input,
): Promise<void> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndRun_id.simulate(
        connection,
        owner,
        repo,
        run_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndRun_id.METADATA,
          path: postByOwnerAndRepoAndRun_id.path(owner, repo, run_id),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepoAndRun_id {
  export type Headers = IApiReposActionsRunsDeploymentProtectionRule.PostHeader;
  export type Input =
    | review_minus_custom_minus_gates_minus_comment_minus_required
    | review_minus_custom_minus_gates_minus_state_minus_required;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/actions/runs/:run_id/deployment_protection_rule",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, run_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/runs/${encodeURIComponent(run_id ?? "null")}/deployment_protection_rule`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndRun_id.Headers>,
    owner: string,
    repo: string,
    run_id: string,
    body: postByOwnerAndRepoAndRun_id.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndRun_id.path(owner, repo, run_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("run_id")(() => typia.assert(run_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
