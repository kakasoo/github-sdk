import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposActionsRunnersLabels } from "../../../../../structures/IApiReposActionsRunnersLabels";
import { body } from "../../../../../structures/body";
import { response } from "../../../../../structures/response";

/**
 * List labels for a self-hosted runner for a repository.
 * Lists all labels for a self-hosted runner configured in a repository.
 *
 * Authenticated users must have admin access to the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/runners/:runner_id/labels
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndRunner_id(
  connection: IConnection<getByOwnerAndRepoAndRunner_id.Headers>,
  owner: string,
  repo: string,
  runner_id: string,
): Promise<getByOwnerAndRepoAndRunner_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndRunner_id.simulate(connection, owner, repo, runner_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndRunner_id.METADATA,
          path: getByOwnerAndRepoAndRunner_id.path(owner, repo, runner_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndRunner_id {
  export type Headers = IApiReposActionsRunnersLabels.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, runner_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/runners/${encodeURIComponent(runner_id ?? "null")}/labels`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndRunner_id.Headers>,
    owner: string,
    repo: string,
    runner_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndRunner_id.path(owner, repo, runner_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("runner_id")(() => typia.assert(runner_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Add custom labels to a self-hosted runner for a repository.
 * Adds custom labels to a self-hosted runner configured in a repository.
 *
 * Authenticated users must have admin access to the organization to use this endpoint.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/runners/:runner_id/labels
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndRunner_id(
  connection: IConnection<postByOwnerAndRepoAndRunner_id.Headers>,
  owner: string,
  repo: string,
  runner_id: string,
  body: postByOwnerAndRepoAndRunner_id.Input,
): Promise<postByOwnerAndRepoAndRunner_id.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndRunner_id.simulate(
        connection,
        owner,
        repo,
        runner_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndRunner_id.METADATA,
          path: postByOwnerAndRepoAndRunner_id.path(owner, repo, runner_id),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepoAndRunner_id {
  export type Headers = IApiReposActionsRunnersLabels.PostHeader;
  export type Input = body;
  export type Output = response;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, runner_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/runners/${encodeURIComponent(runner_id ?? "null")}/labels`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndRunner_id.Headers>,
    owner: string,
    repo: string,
    runner_id: string,
    body: postByOwnerAndRepoAndRunner_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndRunner_id.path(owner, repo, runner_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("runner_id")(() => typia.assert(runner_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Set custom labels for a self-hosted runner for a repository.
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in a repository.
 *
 * Authenticated users must have admin access to the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/runners/:runner_id/labels
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOwnerAndRepoAndRunner_id(
  connection: IConnection<putByOwnerAndRepoAndRunner_id.Headers>,
  owner: string,
  repo: string,
  runner_id: string,
  body: putByOwnerAndRepoAndRunner_id.Input,
): Promise<putByOwnerAndRepoAndRunner_id.Output> {
  return !!connection.simulate
    ? putByOwnerAndRepoAndRunner_id.simulate(
        connection,
        owner,
        repo,
        runner_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOwnerAndRepoAndRunner_id.METADATA,
          path: putByOwnerAndRepoAndRunner_id.path(owner, repo, runner_id),
          status: null,
        },
        body,
      );
}
export namespace putByOwnerAndRepoAndRunner_id {
  export type Headers = IApiReposActionsRunnersLabels.PutHeader;
  export type Input = body;
  export type Output = response;

  export const METADATA = {
    method: "PUT",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, runner_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/runners/${encodeURIComponent(runner_id ?? "null")}/labels`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<putByOwnerAndRepoAndRunner_id.Headers>,
    owner: string,
    repo: string,
    runner_id: string,
    body: putByOwnerAndRepoAndRunner_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOwnerAndRepoAndRunner_id.path(owner, repo, runner_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("runner_id")(() => typia.assert(runner_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove all custom labels from a self-hosted runner for a repository.
 * Remove all custom labels from a self-hosted runner configured in a
 * repository. Returns the remaining read-only labels from the runner.
 *
 * Authenticated users must have admin access to the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/runners/:runner_id/labels
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndRunner_id(
  connection: IConnection<eraseByOwnerAndRepoAndRunner_id.Headers>,
  owner: string,
  repo: string,
  runner_id: string,
): Promise<eraseByOwnerAndRepoAndRunner_id.Output> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndRunner_id.simulate(
        connection,
        owner,
        repo,
        runner_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndRunner_id.METADATA,
          path: eraseByOwnerAndRepoAndRunner_id.path(owner, repo, runner_id),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndRunner_id {
  export type Headers = IApiReposActionsRunnersLabels.DeleteHeader;
  export type Output = response;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, runner_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/runners/${encodeURIComponent(runner_id ?? "null")}/labels`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndRunner_id.Headers>,
    owner: string,
    repo: string,
    runner_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndRunner_id.path(owner, repo, runner_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("runner_id")(() => typia.assert(runner_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove a custom label from a self-hosted runner for a repository.
 * Remove a custom label from a self-hosted runner configured
 * in a repository. Returns the remaining labels from the runner.
 *
 * This endpoint returns a `404 Not Found` status if the custom label is not
 * present on the runner.
 *
 * Authenticated users must have admin access to the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/runners/:runner_id/labels/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndRunner_idAndName(
  connection: IConnection<eraseByOwnerAndRepoAndRunner_idAndName.Headers>,
  owner: string,
  repo: string,
  runner_id: string,
  name: string,
): Promise<eraseByOwnerAndRepoAndRunner_idAndName.Output> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndRunner_idAndName.simulate(
        connection,
        owner,
        repo,
        runner_id,
        name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndRunner_idAndName.METADATA,
          path: eraseByOwnerAndRepoAndRunner_idAndName.path(
            owner,
            repo,
            runner_id,
            name,
          ),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndRunner_idAndName {
  export type Headers = IApiReposActionsRunnersLabels.DeleteHeader;
  export type Output = response;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels/:name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    runner_id: string,
    name: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/runners/${encodeURIComponent(runner_id ?? "null")}/labels/${encodeURIComponent(name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndRunner_idAndName.Headers>,
    owner: string,
    repo: string,
    runner_id: string,
    name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndRunner_idAndName.path(
        owner,
        repo,
        runner_id,
        name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("runner_id")(() => typia.assert(runner_id));
      assert.param("name")(() => typia.assert(name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
