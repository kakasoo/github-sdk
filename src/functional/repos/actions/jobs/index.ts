import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposActionsJobs } from "../../../../structures/IApiReposActionsJobs";
import { job } from "../../../../structures/job";

export * as logs from "./logs";
export * as rerun from "./rerun";
/**
 * Get a job for a workflow run.
 * Gets a specific job in a workflow run.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/jobs/:job_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndJob_id(
  connection: IConnection<getByOwnerAndRepoAndJob_id.Headers>,
  owner: string,
  repo: string,
  job_id: string,
): Promise<getByOwnerAndRepoAndJob_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndJob_id.simulate(connection, owner, repo, job_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndJob_id.METADATA,
          path: getByOwnerAndRepoAndJob_id.path(owner, repo, job_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndJob_id {
  export type Headers = IApiReposActionsJobs.GetHeader;
  export type Output = job;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/actions/jobs/:job_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, job_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/jobs/${encodeURIComponent(job_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): job =>
    typia.random<job>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndJob_id.Headers>,
    owner: string,
    repo: string,
    job_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndJob_id.path(owner, repo, job_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("job_id")(() => typia.assert(job_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
