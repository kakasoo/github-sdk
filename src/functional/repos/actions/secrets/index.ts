import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposActionsSecrets } from "../../../../structures/IApiReposActionsSecrets";
import { actions_minus_secret } from "../../../../structures/actions_minus_secret";
import { body } from "../../../../structures/body";
import { empty_minus_object } from "../../../../structures/empty_minus_object";
import { response } from "../../../../structures/response";

export * as public_key from "./public_key";
/**
 * List repository secrets.
 * Lists all secrets available in a repository without revealing their encrypted
 * values.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/secrets
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposActionsSecrets.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/actions/secrets",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/secrets`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a repository secret.
 * Gets a single repository secret without revealing its encrypted value.
 *
 * The authenticated user must have collaborator access to the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/secrets/:secret_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndSecret_name(
  connection: IConnection<getByOwnerAndRepoAndSecret_name.Headers>,
  owner: string,
  repo: string,
  secret_name: string,
): Promise<getByOwnerAndRepoAndSecret_name.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndSecret_name.simulate(
        connection,
        owner,
        repo,
        secret_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndSecret_name.METADATA,
          path: getByOwnerAndRepoAndSecret_name.path(owner, repo, secret_name),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndSecret_name {
  export type Headers = IApiReposActionsSecrets.GetHeader;
  export type Output = actions_minus_secret;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/actions/secrets/:secret_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, secret_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/secrets/${encodeURIComponent(secret_name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): actions_minus_secret => typia.random<actions_minus_secret>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndSecret_name.Headers>,
    owner: string,
    repo: string,
    secret_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndSecret_name.path(owner, repo, secret_name),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("secret_name")(() => typia.assert(secret_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create or update a repository secret.
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/secrets/:secret_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOwnerAndRepoAndSecret_name(
  connection: IConnection<putByOwnerAndRepoAndSecret_name.Headers>,
  owner: string,
  repo: string,
  secret_name: string,
  body: putByOwnerAndRepoAndSecret_name.Input,
): Promise<putByOwnerAndRepoAndSecret_name.Output> {
  return !!connection.simulate
    ? putByOwnerAndRepoAndSecret_name.simulate(
        connection,
        owner,
        repo,
        secret_name,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOwnerAndRepoAndSecret_name.METADATA,
          path: putByOwnerAndRepoAndSecret_name.path(owner, repo, secret_name),
          status: null,
        },
        body,
      );
}
export namespace putByOwnerAndRepoAndSecret_name {
  export type Headers = IApiReposActionsSecrets.PutHeader;
  export type Input = body;
  export type Output = empty_minus_object;

  export const METADATA = {
    method: "PUT",
    path: "/repos/:owner/:repo/actions/secrets/:secret_name",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, secret_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/secrets/${encodeURIComponent(secret_name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): empty_minus_object => typia.random<empty_minus_object>(g);
  export const simulate = (
    connection: IConnection<putByOwnerAndRepoAndSecret_name.Headers>,
    owner: string,
    repo: string,
    secret_name: string,
    body: putByOwnerAndRepoAndSecret_name.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOwnerAndRepoAndSecret_name.path(owner, repo, secret_name),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("secret_name")(() => typia.assert(secret_name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a repository secret.
 * Deletes a secret in a repository using the secret name.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path repos/:owner/:repo/actions/secrets/:secret_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndSecret_name(
  connection: IConnection<eraseByOwnerAndRepoAndSecret_name.Headers>,
  owner: string,
  repo: string,
  secret_name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndSecret_name.simulate(
        connection,
        owner,
        repo,
        secret_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndSecret_name.METADATA,
          path: eraseByOwnerAndRepoAndSecret_name.path(
            owner,
            repo,
            secret_name,
          ),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndSecret_name {
  export type Headers = IApiReposActionsSecrets.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/actions/secrets/:secret_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, secret_name: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/actions/secrets/${encodeURIComponent(secret_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndSecret_name.Headers>,
    owner: string,
    repo: string,
    secret_name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndSecret_name.path(owner, repo, secret_name),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("secret_name")(() => typia.assert(secret_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
