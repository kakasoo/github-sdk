import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposCheckRuns } from "../../../structures/IApiReposCheckRuns";
import { check_minus_run } from "../../../structures/check_minus_run";

export * as annotations from "./annotations";
export * as rerequest from "./rerequest";
/**
 * Create a check run.
 * Creates a new check run for a specific commit in a repository.
 *
 * To create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite.
 *
 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 *
 * > [!NOTE]
 * > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * @tag checks
 * @path repos/:owner/:repo/check-runs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposCheckRuns.PostHeader;
  export type Input = any | any;
  export type Output = check_minus_run;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/check-runs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/check-runs`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): check_minus_run => typia.random<check_minus_run>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a check run.
 * Gets a single check run using its `id`.
 *
 * > [!NOTE]
 * > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
 *
 * @tag checks
 * @path repos/:owner/:repo/check-runs/:check_run_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndCheck_run_id(
  connection: IConnection<getByOwnerAndRepoAndCheck_run_id.Headers>,
  owner: string,
  repo: string,
  check_run_id: string,
): Promise<getByOwnerAndRepoAndCheck_run_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndCheck_run_id.simulate(
        connection,
        owner,
        repo,
        check_run_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndCheck_run_id.METADATA,
          path: getByOwnerAndRepoAndCheck_run_id.path(
            owner,
            repo,
            check_run_id,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndCheck_run_id {
  export type Headers = IApiReposCheckRuns.GetHeader;
  export type Output = check_minus_run;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/check-runs/:check_run_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, check_run_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/check-runs/${encodeURIComponent(check_run_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): check_minus_run => typia.random<check_minus_run>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndCheck_run_id.Headers>,
    owner: string,
    repo: string,
    check_run_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndCheck_run_id.path(owner, repo, check_run_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("check_run_id")(() => typia.assert(check_run_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a check run.
 * Updates a check run for a specific commit in a repository.
 *
 * > [!NOTE]
 * > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * OAuth apps and personal access tokens (classic) cannot use this endpoint.
 *
 * @tag checks
 * @path repos/:owner/:repo/check-runs/:check_run_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndCheck_run_id(
  connection: IConnection<patchByOwnerAndRepoAndCheck_run_id.Headers>,
  owner: string,
  repo: string,
  check_run_id: string,
  body: patchByOwnerAndRepoAndCheck_run_id.Input,
): Promise<patchByOwnerAndRepoAndCheck_run_id.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndCheck_run_id.simulate(
        connection,
        owner,
        repo,
        check_run_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndCheck_run_id.METADATA,
          path: patchByOwnerAndRepoAndCheck_run_id.path(
            owner,
            repo,
            check_run_id,
          ),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndCheck_run_id {
  export type Headers = IApiReposCheckRuns.PatchHeader;
  export type Input = any | any;
  export type Output = check_minus_run;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/check-runs/:check_run_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, check_run_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/check-runs/${encodeURIComponent(check_run_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): check_minus_run => typia.random<check_minus_run>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndCheck_run_id.Headers>,
    owner: string,
    repo: string,
    check_run_id: string,
    body: patchByOwnerAndRepoAndCheck_run_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndCheck_run_id.path(owner, repo, check_run_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("check_run_id")(() => typia.assert(check_run_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
