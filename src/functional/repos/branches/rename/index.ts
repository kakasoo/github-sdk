import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposBranchesRename } from "../../../../structures/IApiReposBranchesRename";
import { body } from "../../../../structures/body";
import { branch_minus_with_minus_protection } from "../../../../structures/branch_minus_with_minus_protection";

/**
 * Rename a branch.
 * Renames a branch in a repository.
 *
 * > [!NOTE]
 * > Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
 *
 * The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.
 *
 * In order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.
 *
 * @tag repos
 * @path repos/:owner/:repo/branches/:branch/rename
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepoAndBranch(
  connection: IConnection<postByOwnerAndRepoAndBranch.Headers>,
  owner: string,
  repo: string,
  branch: string,
  body: postByOwnerAndRepoAndBranch.Input,
): Promise<postByOwnerAndRepoAndBranch.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepoAndBranch.simulate(
        connection,
        owner,
        repo,
        branch,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepoAndBranch.METADATA,
          path: postByOwnerAndRepoAndBranch.path(owner, repo, branch),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepoAndBranch {
  export type Headers = IApiReposBranchesRename.PostHeader;
  export type Input = body;
  export type Output = branch_minus_with_minus_protection;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/branches/:branch/rename",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, branch: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/branches/${encodeURIComponent(branch ?? "null")}/rename`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): branch_minus_with_minus_protection =>
    typia.random<branch_minus_with_minus_protection>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepoAndBranch.Headers>,
    owner: string,
    repo: string,
    branch: string,
    body: postByOwnerAndRepoAndBranch.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepoAndBranch.path(owner, repo, branch),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("branch")(() => typia.assert(branch));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
