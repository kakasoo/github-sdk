import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";

import { IApiReposPagesBuilds } from "../../../../structures/IApiReposPagesBuilds";
import { page_minus_build } from "../../../../structures/page_minus_build";
import { page_minus_build_minus_status } from "../../../../structures/page_minus_build_minus_status";

export * as latest from "./latest";
/**
 * List GitHub Pages builds.
 * Lists builts of a GitHub Pages site.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/pages/builds
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposPagesBuilds.GetHeader;
  export type Output = page_minus_build[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/pages/builds",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pages/builds`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): page_minus_build[] => typia.random<page_minus_build[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Request a GitHub Pages build.
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 *
 * @tag repos
 * @path repos/:owner/:repo/pages/builds
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposPagesBuilds.PostHeader;
  export type Output = page_minus_build_minus_status;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/pages/builds",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pages/builds`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): page_minus_build_minus_status =>
    typia.random<page_minus_build_minus_status>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get GitHub Pages build.
 * Gets information about a GitHub Pages build.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/pages/builds/:build_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndBuild_id(
  connection: IConnection<getByOwnerAndRepoAndBuild_id.Headers>,
  owner: string,
  repo: string,
  build_id: number & tags.Type<"int32">,
): Promise<getByOwnerAndRepoAndBuild_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndBuild_id.simulate(connection, owner, repo, build_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndBuild_id.METADATA,
          path: getByOwnerAndRepoAndBuild_id.path(owner, repo, build_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndBuild_id {
  export type Headers = IApiReposPagesBuilds.GetHeader;
  export type Output = page_minus_build;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/pages/builds/:build_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    build_id: number & tags.Type<"int32">,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pages/builds/${encodeURIComponent(build_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): page_minus_build => typia.random<page_minus_build>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndBuild_id.Headers>,
    owner: string,
    repo: string,
    build_id: number & tags.Type<"int32">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndBuild_id.path(owner, repo, build_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("build_id")(() => typia.assert(build_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
