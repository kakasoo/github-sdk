import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposPagesDeployments } from "../../../../structures/IApiReposPagesDeployments";
import { body } from "../../../../structures/body";
import { page_minus_deployment } from "../../../../structures/page_minus_deployment";
import { pages_minus_deployment_minus_status } from "../../../../structures/pages_minus_deployment_minus_status";

export * as cancel from "./cancel";
/**
 * Create a GitHub Pages deployment for a repository.
 *
 * The authenticated user must have write permission to the repository.
 *
 * @tag repos
 * @path repos/:owner/:repo/pages/deployments
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposPagesDeployments.PostHeader;
  export type Input = body;
  export type Output = page_minus_deployment;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/pages/deployments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pages/deployments`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): page_minus_deployment => typia.random<page_minus_deployment>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get the status of a GitHub Pages deployment.
 * Gets the current status of a GitHub Pages deployment.
 *
 * The authenticated user must have read permission for the GitHub Pages site.
 *
 * @tag repos
 * @path repos/:owner/:repo/pages/deployments/:pages_deployment_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndPages_deployment_id(
  connection: IConnection<getByOwnerAndRepoAndPages_deployment_id.Headers>,
  owner: string,
  repo: string,
  pages_deployment_id: string,
): Promise<getByOwnerAndRepoAndPages_deployment_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndPages_deployment_id.simulate(
        connection,
        owner,
        repo,
        pages_deployment_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndPages_deployment_id.METADATA,
          path: getByOwnerAndRepoAndPages_deployment_id.path(
            owner,
            repo,
            pages_deployment_id,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndPages_deployment_id {
  export type Headers = IApiReposPagesDeployments.GetHeader;
  export type Output = pages_minus_deployment_minus_status;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/pages/deployments/:pages_deployment_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    pages_deployment_id: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/pages/deployments/${encodeURIComponent(pages_deployment_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): pages_minus_deployment_minus_status =>
    typia.random<pages_minus_deployment_minus_status>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndPages_deployment_id.Headers>,
    owner: string,
    repo: string,
    pages_deployment_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndPages_deployment_id.path(
        owner,
        repo,
        pages_deployment_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("pages_deployment_id")(() =>
        typia.assert(pages_deployment_id),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
