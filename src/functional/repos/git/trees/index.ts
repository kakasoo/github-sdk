import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposGitTrees } from "../../../../structures/IApiReposGitTrees";
import { body } from "../../../../structures/body";
import { git_minus_tree } from "../../../../structures/git_minus_tree";

/**
 * Create a tree.
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference)."
 *
 * Returns an error if you try to delete a file that does not exist.
 *
 * @tag git
 * @path repos/:owner/:repo/git/trees
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposGitTrees.PostHeader;
  export type Input = body;
  export type Output = git_minus_tree;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/git/trees",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/git/trees`;
  export const random = (g?: Partial<typia.IRandomGenerator>): git_minus_tree =>
    typia.random<git_minus_tree>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a tree.
 * Returns a single tree using the SHA1 value or ref name for that tree.
 *
 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 *
 * > [!NOTE]
 * > The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
 *
 * @param tree_sha The SHA1 value or ref (branch or tag) name of the tree.
 * @tag git
 * @path repos/:owner/:repo/git/trees/:tree_sha
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndTree_sha(
  connection: IConnection<getByOwnerAndRepoAndTree_sha.Headers>,
  owner: string,
  repo: string,
  tree_sha: string,
  query: getByOwnerAndRepoAndTree_sha.Query,
): Promise<getByOwnerAndRepoAndTree_sha.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndTree_sha.simulate(
        connection,
        owner,
        repo,
        tree_sha,
        query,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndTree_sha.METADATA,
          path: getByOwnerAndRepoAndTree_sha.path(owner, repo, tree_sha, query),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndTree_sha {
  export type Headers = IApiReposGitTrees.GetHeader;
  export type Query = IApiReposGitTrees.GetQuery;
  export type Output = git_minus_tree;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/git/trees/:tree_sha",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    tree_sha: string,
    query: getByOwnerAndRepoAndTree_sha.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/git/trees/${encodeURIComponent(tree_sha ?? "null")}`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (g?: Partial<typia.IRandomGenerator>): git_minus_tree =>
    typia.random<git_minus_tree>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndTree_sha.Headers>,
    owner: string,
    repo: string,
    tree_sha: string,
    query: getByOwnerAndRepoAndTree_sha.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndTree_sha.path(owner, repo, tree_sha, query),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("tree_sha")(() => typia.assert(tree_sha));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
