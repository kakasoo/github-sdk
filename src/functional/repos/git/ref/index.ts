import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposGitRef } from "../../../../structures/IApiReposGitRef";
import { git_minus_ref } from "../../../../structures/git_minus_ref";

/**
 * Get a reference.
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * > [!NOTE]
 * > You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * @tag git
 * @path repos/:owner/:repo/git/ref/:ref
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndRef(
  connection: IConnection<getByOwnerAndRepoAndRef.Headers>,
  owner: string,
  repo: string,
  ref: string,
): Promise<getByOwnerAndRepoAndRef.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndRef.simulate(connection, owner, repo, ref)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndRef.METADATA,
          path: getByOwnerAndRepoAndRef.path(owner, repo, ref),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndRef {
  export type Headers = IApiReposGitRef.GetHeader;
  export type Output = git_minus_ref;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/git/ref/:ref",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, ref: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/git/ref/${encodeURIComponent(ref ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): git_minus_ref =>
    typia.random<git_minus_ref>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndRef.Headers>,
    owner: string,
    repo: string,
    ref: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndRef.path(owner, repo, ref),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("ref")(() => typia.assert(ref));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
