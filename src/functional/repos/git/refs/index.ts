import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposGitRefs } from "../../../../structures/IApiReposGitRefs";
import { body } from "../../../../structures/body";
import { git_minus_ref } from "../../../../structures/git_minus_ref";

/**
 * Create a reference.
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 *
 * @tag git
 * @path repos/:owner/:repo/git/refs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposGitRefs.PostHeader;
  export type Input = body;
  export type Output = git_minus_ref;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/git/refs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/git/refs`;
  export const random = (g?: Partial<typia.IRandomGenerator>): git_minus_ref =>
    typia.random<git_minus_ref>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a reference.
 * Updates the provided reference to point to a new SHA. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
 *
 * @tag git
 * @path repos/:owner/:repo/git/refs/:ref
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndRef(
  connection: IConnection<patchByOwnerAndRepoAndRef.Headers>,
  owner: string,
  repo: string,
  ref: string,
  body: patchByOwnerAndRepoAndRef.Input,
): Promise<patchByOwnerAndRepoAndRef.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndRef.simulate(connection, owner, repo, ref, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndRef.METADATA,
          path: patchByOwnerAndRepoAndRef.path(owner, repo, ref),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndRef {
  export type Headers = IApiReposGitRefs.PatchHeader;
  export type Input = body;
  export type Output = git_minus_ref;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/git/refs/:ref",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, ref: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/git/refs/${encodeURIComponent(ref ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): git_minus_ref =>
    typia.random<git_minus_ref>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndRef.Headers>,
    owner: string,
    repo: string,
    ref: string,
    body: patchByOwnerAndRepoAndRef.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndRef.path(owner, repo, ref),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("ref")(() => typia.assert(ref));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a reference.
 * Deletes the provided reference.
 *
 * @tag git
 * @path repos/:owner/:repo/git/refs/:ref
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndRef(
  connection: IConnection<eraseByOwnerAndRepoAndRef.Headers>,
  owner: string,
  repo: string,
  ref: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndRef.simulate(connection, owner, repo, ref)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndRef.METADATA,
          path: eraseByOwnerAndRepoAndRef.path(owner, repo, ref),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndRef {
  export type Headers = IApiReposGitRefs.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/git/refs/:ref",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, ref: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/git/refs/${encodeURIComponent(ref ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndRef.Headers>,
    owner: string,
    repo: string,
    ref: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndRef.path(owner, repo, ref),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("ref")(() => typia.assert(ref));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
