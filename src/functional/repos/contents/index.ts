import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposContents } from "../../../structures/IApiReposContents";
import { content_minus_directory } from "../../../structures/content_minus_directory";
import { content_minus_file } from "../../../structures/content_minus_file";
import { content_minus_symlink } from "../../../structures/content_minus_symlink";
import { content_minus_submodule } from "../../../structures/content_minus_submodule";
import { body } from "../../../structures/body";
import { file_minus_commit } from "../../../structures/file_minus_commit";
/**
 * Get repository content.
 * Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
 * - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
 * - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.
 *
 * If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".
 *
 * If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.
 *
 * If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.
 *
 * **Notes**:
 *
 * - To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
 * - This API has an upper limit of 1,000 files for a directory. If you need to retrieve
 * more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).
 * - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
 * - If the requested file's size is:
 * - 1 MB or smaller: All features of this endpoint are supported.
 * - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
 * string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
 * - Greater than 100 MB: This endpoint is not supported.
 *
 * @param path path parameter
 * @tag repos
 * @path repos/:owner/:repo/contents/:path
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndPath(
  connection: IConnection<getByOwnerAndRepoAndPath.Headers>,
  owner: string,
  repo: string,
  path: string,
  query: getByOwnerAndRepoAndPath.Query,
): Promise<getByOwnerAndRepoAndPath.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndPath.simulate(connection, owner, repo, path, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndPath.METADATA,
          path: getByOwnerAndRepoAndPath.path(owner, repo, path, query),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndPath {
  export type Headers = IApiReposContents.GetHeader;
  export type Query = IApiReposContents.GetQuery;
  export type Output =
    | content_minus_directory
    | content_minus_file
    | content_minus_symlink
    | content_minus_submodule;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/contents/:path",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    path: string,
    query: getByOwnerAndRepoAndPath.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/contents/${encodeURIComponent(path ?? "null")}`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ):
    | content_minus_directory
    | content_minus_file
    | content_minus_symlink
    | content_minus_submodule =>
    typia.random<
      | content_minus_directory
      | content_minus_file
      | content_minus_symlink
      | content_minus_submodule
    >(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndPath.Headers>,
    owner: string,
    repo: string,
    path: string,
    query: getByOwnerAndRepoAndPath.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndPath.path(owner, repo, path, query),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("path")(() => typia.assert(path));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create or update file contents.
 * Creates a new file or replaces an existing file in a repository.
 *
 * > [!NOTE]
 * > If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.
 *
 * @param path path parameter
 * @tag repos
 * @path repos/:owner/:repo/contents/:path
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOwnerAndRepoAndPath(
  connection: IConnection<putByOwnerAndRepoAndPath.Headers>,
  owner: string,
  repo: string,
  path: string,
  body: putByOwnerAndRepoAndPath.Input,
): Promise<putByOwnerAndRepoAndPath.Output> {
  return !!connection.simulate
    ? putByOwnerAndRepoAndPath.simulate(connection, owner, repo, path, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOwnerAndRepoAndPath.METADATA,
          path: putByOwnerAndRepoAndPath.path(owner, repo, path),
          status: null,
        },
        body,
      );
}
export namespace putByOwnerAndRepoAndPath {
  export type Headers = IApiReposContents.PutHeader;
  export type Input = body;
  export type Output = file_minus_commit;

  export const METADATA = {
    method: "PUT",
    path: "/repos/:owner/:repo/contents/:path",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, path: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/contents/${encodeURIComponent(path ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): file_minus_commit => typia.random<file_minus_commit>(g);
  export const simulate = (
    connection: IConnection<putByOwnerAndRepoAndPath.Headers>,
    owner: string,
    repo: string,
    path: string,
    body: putByOwnerAndRepoAndPath.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOwnerAndRepoAndPath.path(owner, repo, path),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("path")(() => typia.assert(path));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a file.
 * Deletes a file in a repository.
 *
 * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
 *
 * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
 *
 * > [!NOTE]
 * > If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
 *
 * @param path path parameter
 * @tag repos
 * @path repos/:owner/:repo/contents/:path
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndPath(
  connection: IConnection<eraseByOwnerAndRepoAndPath.Headers>,
  owner: string,
  repo: string,
  path: string,
  body: eraseByOwnerAndRepoAndPath.Input,
): Promise<eraseByOwnerAndRepoAndPath.Output> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndPath.simulate(connection, owner, repo, path, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndPath.METADATA,
          path: eraseByOwnerAndRepoAndPath.path(owner, repo, path),
          status: null,
        },
        body,
      );
}
export namespace eraseByOwnerAndRepoAndPath {
  export type Headers = IApiReposContents.DeleteHeader;
  export type Input = body;
  export type Output = file_minus_commit;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/contents/:path",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, path: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/contents/${encodeURIComponent(path ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): file_minus_commit => typia.random<file_minus_commit>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndPath.Headers>,
    owner: string,
    repo: string,
    path: string,
    body: eraseByOwnerAndRepoAndPath.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndPath.path(owner, repo, path),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("path")(() => typia.assert(path));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
