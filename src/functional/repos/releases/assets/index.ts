import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposReleasesAssets } from "../../../../structures/IApiReposReleasesAssets";
import { body } from "../../../../structures/body";
import { release_minus_asset } from "../../../../structures/release_minus_asset";

/**
 * Get a release asset.
 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 *
 * @tag repos
 * @path repos/:owner/:repo/releases/assets/:asset_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndAsset_id(
  connection: IConnection<getByOwnerAndRepoAndAsset_id.Headers>,
  owner: string,
  repo: string,
  asset_id: string,
): Promise<getByOwnerAndRepoAndAsset_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndAsset_id.simulate(connection, owner, repo, asset_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndAsset_id.METADATA,
          path: getByOwnerAndRepoAndAsset_id.path(owner, repo, asset_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndAsset_id {
  export type Headers = IApiReposReleasesAssets.GetHeader;
  export type Output = release_minus_asset;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/releases/assets/:asset_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, asset_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/releases/assets/${encodeURIComponent(asset_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): release_minus_asset => typia.random<release_minus_asset>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndAsset_id.Headers>,
    owner: string,
    repo: string,
    asset_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndAsset_id.path(owner, repo, asset_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("asset_id")(() => typia.assert(asset_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a release asset.
 * Users with push access to the repository can edit a release asset.
 *
 * @tag repos
 * @path repos/:owner/:repo/releases/assets/:asset_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndAsset_id(
  connection: IConnection<patchByOwnerAndRepoAndAsset_id.Headers>,
  owner: string,
  repo: string,
  asset_id: string,
  body: patchByOwnerAndRepoAndAsset_id.Input,
): Promise<patchByOwnerAndRepoAndAsset_id.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndAsset_id.simulate(
        connection,
        owner,
        repo,
        asset_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndAsset_id.METADATA,
          path: patchByOwnerAndRepoAndAsset_id.path(owner, repo, asset_id),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndAsset_id {
  export type Headers = IApiReposReleasesAssets.PatchHeader;
  export type Input = body;
  export type Output = release_minus_asset;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/releases/assets/:asset_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, asset_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/releases/assets/${encodeURIComponent(asset_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): release_minus_asset => typia.random<release_minus_asset>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndAsset_id.Headers>,
    owner: string,
    repo: string,
    asset_id: string,
    body: patchByOwnerAndRepoAndAsset_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndAsset_id.path(owner, repo, asset_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("asset_id")(() => typia.assert(asset_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag repos
 * @path repos/:owner/:repo/releases/assets/:asset_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOwnerAndRepoAndAsset_id(
  connection: IConnection<eraseByOwnerAndRepoAndAsset_id.Headers>,
  owner: string,
  repo: string,
  asset_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOwnerAndRepoAndAsset_id.simulate(connection, owner, repo, asset_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOwnerAndRepoAndAsset_id.METADATA,
          path: eraseByOwnerAndRepoAndAsset_id.path(owner, repo, asset_id),
          status: null,
        },
      );
}
export namespace eraseByOwnerAndRepoAndAsset_id {
  export type Headers = IApiReposReleasesAssets.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/repos/:owner/:repo/releases/assets/:asset_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, asset_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/releases/assets/${encodeURIComponent(asset_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOwnerAndRepoAndAsset_id.Headers>,
    owner: string,
    repo: string,
    asset_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOwnerAndRepoAndAsset_id.path(owner, repo, asset_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("asset_id")(() => typia.assert(asset_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag repos
 * @path repos/:owner/:repo/releases/:release_id/assets
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndRelease_id(
  connection: IConnection<getByOwnerAndRepoAndRelease_id.Headers>,
  owner: string,
  repo: string,
  release_id: string,
): Promise<getByOwnerAndRepoAndRelease_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndRelease_id.simulate(
        connection,
        owner,
        repo,
        release_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndRelease_id.METADATA,
          path: getByOwnerAndRepoAndRelease_id.path(owner, repo, release_id),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndRelease_id {
  export type Headers = IApiReposReleasesAssets.GetHeader;
  export type Output = release_minus_asset[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/releases/:release_id/assets",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, release_id: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/releases/${encodeURIComponent(release_id ?? "null")}/assets`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): release_minus_asset[] => typia.random<release_minus_asset[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndRelease_id.Headers>,
    owner: string,
    repo: string,
    release_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndRelease_id.path(owner, repo, release_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("release_id")(() => typia.assert(release_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
