import { IConnection, HttpError } from "@nestia/fetcher";
import typia, { tags } from "typia";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposCodeScanningCodeqlVariantAnalysesRepos } from "../../../../../../structures/IApiReposCodeScanningCodeqlVariantAnalysesRepos";
import { code_minus_scanning_minus_variant_minus_analysis_minus_repo_minus_task } from "../../../../../../structures/code_minus_scanning_minus_variant_minus_analysis_minus_repo_minus_task";
/**
 * Get the analysis status of a repository in a CodeQL variant analysis.
 * Gets the analysis status of a repository in a CodeQL variant analysis.
 *
 * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 *
 * @param repo The name of the controller repository.
 * @param codeql_variant_analysis_id The ID of the variant analysis.
 * @param repo_owner The account owner of the variant analysis repository. The name is not case sensitive.
 * @param repo_name The name of the variant analysis repository.
 * @tag code-scanning
 * @path repos/:owner/:repo/code-scanning/codeql/variant-analyses/:codeql_variant_analysis_id/repos/:repo_owner/:repo_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndCodeql_variant_analysis_idAndRepo_ownerAndRepo_name(
  connection: IConnection<getByOwnerAndRepoAndCodeql_variant_analysis_idAndRepo_ownerAndRepo_name.Headers>,
  owner: string,
  repo: string,
  codeql_variant_analysis_id: number & tags.Type<"int32">,
  repo_owner: string,
  repo_name: string,
): Promise<getByOwnerAndRepoAndCodeql_variant_analysis_idAndRepo_ownerAndRepo_name.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndCodeql_variant_analysis_idAndRepo_ownerAndRepo_name.simulate(
        connection,
        owner,
        repo,
        codeql_variant_analysis_id,
        repo_owner,
        repo_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndCodeql_variant_analysis_idAndRepo_ownerAndRepo_name.METADATA,
          path: getByOwnerAndRepoAndCodeql_variant_analysis_idAndRepo_ownerAndRepo_name.path(
            owner,
            repo,
            codeql_variant_analysis_id,
            repo_owner,
            repo_name,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndCodeql_variant_analysis_idAndRepo_ownerAndRepo_name {
  export type Headers =
    IApiReposCodeScanningCodeqlVariantAnalysesRepos.GetHeader;
  export type Output =
    code_minus_scanning_minus_variant_minus_analysis_minus_repo_minus_task;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/code-scanning/codeql/variant-analyses/:codeql_variant_analysis_id/repos/:repo_owner/:repo_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    codeql_variant_analysis_id: number & tags.Type<"int32">,
    repo_owner: string,
    repo_name: string,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/code-scanning/codeql/variant-analyses/${encodeURIComponent(codeql_variant_analysis_id ?? "null")}/repos/${encodeURIComponent(repo_owner ?? "null")}/${encodeURIComponent(repo_name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_scanning_minus_variant_minus_analysis_minus_repo_minus_task =>
    typia.random<code_minus_scanning_minus_variant_minus_analysis_minus_repo_minus_task>(
      g,
    );
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndCodeql_variant_analysis_idAndRepo_ownerAndRepo_name.Headers>,
    owner: string,
    repo: string,
    codeql_variant_analysis_id: number & tags.Type<"int32">,
    repo_owner: string,
    repo_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndCodeql_variant_analysis_idAndRepo_ownerAndRepo_name.path(
        owner,
        repo,
        codeql_variant_analysis_id,
        repo_owner,
        repo_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("codeql_variant_analysis_id")(() =>
        typia.assert(codeql_variant_analysis_id),
      );
      assert.param("repo_owner")(() => typia.assert(repo_owner));
      assert.param("repo_name")(() => typia.assert(repo_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
