import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";

import { IApiReposCodeScanningCodeqlVariantAnalyses } from "../../../../../structures/IApiReposCodeScanningCodeqlVariantAnalyses";
import { code_minus_scanning_minus_variant_minus_analysis } from "../../../../../structures/code_minus_scanning_minus_variant_minus_analysis";

export * as repos from "./repos";
/**
 * Create a CodeQL variant analysis.
 * Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.
 *
 * Get started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).
 *
 * Use the `owner` and `repo` parameters in the URL to specify the controller repository that
 * will be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag code-scanning
 * @path repos/:owner/:repo/code-scanning/codeql/variant-analyses
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOwnerAndRepo(
  connection: IConnection<postByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: postByOwnerAndRepo.Input,
): Promise<postByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? postByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOwnerAndRepo.METADATA,
          path: postByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace postByOwnerAndRepo {
  export type Headers = IApiReposCodeScanningCodeqlVariantAnalyses.PostHeader;
  export type Input = any | any | any;
  export type Output = code_minus_scanning_minus_variant_minus_analysis;

  export const METADATA = {
    method: "POST",
    path: "/repos/:owner/:repo/code-scanning/codeql/variant-analyses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/code-scanning/codeql/variant-analyses`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_scanning_minus_variant_minus_analysis =>
    typia.random<code_minus_scanning_minus_variant_minus_analysis>(g);
  export const simulate = (
    connection: IConnection<postByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: postByOwnerAndRepo.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get the summary of a CodeQL variant analysis.
 * Gets the summary of a CodeQL variant analysis.
 *
 * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 *
 * @param codeql_variant_analysis_id The unique identifier of the variant analysis.
 * @tag code-scanning
 * @path repos/:owner/:repo/code-scanning/codeql/variant-analyses/:codeql_variant_analysis_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndCodeql_variant_analysis_id(
  connection: IConnection<getByOwnerAndRepoAndCodeql_variant_analysis_id.Headers>,
  owner: string,
  repo: string,
  codeql_variant_analysis_id: number & tags.Type<"int32">,
): Promise<getByOwnerAndRepoAndCodeql_variant_analysis_id.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndCodeql_variant_analysis_id.simulate(
        connection,
        owner,
        repo,
        codeql_variant_analysis_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndCodeql_variant_analysis_id.METADATA,
          path: getByOwnerAndRepoAndCodeql_variant_analysis_id.path(
            owner,
            repo,
            codeql_variant_analysis_id,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndCodeql_variant_analysis_id {
  export type Headers = IApiReposCodeScanningCodeqlVariantAnalyses.GetHeader;
  export type Output = code_minus_scanning_minus_variant_minus_analysis;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/code-scanning/codeql/variant-analyses/:codeql_variant_analysis_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    codeql_variant_analysis_id: number & tags.Type<"int32">,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/code-scanning/codeql/variant-analyses/${encodeURIComponent(codeql_variant_analysis_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_scanning_minus_variant_minus_analysis =>
    typia.random<code_minus_scanning_minus_variant_minus_analysis>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndCodeql_variant_analysis_id.Headers>,
    owner: string,
    repo: string,
    codeql_variant_analysis_id: number & tags.Type<"int32">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndCodeql_variant_analysis_id.path(
        owner,
        repo,
        codeql_variant_analysis_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("codeql_variant_analysis_id")(() =>
        typia.assert(codeql_variant_analysis_id),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
