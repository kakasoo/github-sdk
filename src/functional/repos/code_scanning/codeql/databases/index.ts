import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposCodeScanningCodeqlDatabases } from "../../../../../structures/IApiReposCodeScanningCodeqlDatabases";
import { code_minus_scanning_minus_codeql_minus_database } from "../../../../../structures/code_minus_scanning_minus_codeql_minus_database";
/**
 * List CodeQL databases for a repository.
 * Lists the CodeQL databases that are available in a repository.
 *
 * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 *
 * @tag code-scanning
 * @path repos/:owner/:repo/code-scanning/codeql/databases
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposCodeScanningCodeqlDatabases.GetHeader;
  export type Output = code_minus_scanning_minus_codeql_minus_database[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/code-scanning/codeql/databases",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/code-scanning/codeql/databases`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_scanning_minus_codeql_minus_database[] =>
    typia.random<code_minus_scanning_minus_codeql_minus_database[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a CodeQL database for a repository.
 * Gets a CodeQL database for a language in a repository.
 *
 * By default this endpoint returns JSON metadata about the CodeQL database. To
 * download the CodeQL database binary content, set the `Accept` header of the request
 * to [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure
 * your HTTP client is configured to follow redirects or use the `Location` header
 * to make a second request to get the redirect URL.
 *
 * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 *
 * @param language The language of the CodeQL database.
 * @tag code-scanning
 * @path repos/:owner/:repo/code-scanning/codeql/databases/:language
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndLanguage(
  connection: IConnection<getByOwnerAndRepoAndLanguage.Headers>,
  owner: string,
  repo: string,
  language: string,
): Promise<getByOwnerAndRepoAndLanguage.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndLanguage.simulate(connection, owner, repo, language)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndLanguage.METADATA,
          path: getByOwnerAndRepoAndLanguage.path(owner, repo, language),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndLanguage {
  export type Headers = IApiReposCodeScanningCodeqlDatabases.GetHeader;
  export type Output = code_minus_scanning_minus_codeql_minus_database;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/code-scanning/codeql/databases/:language",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, language: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/code-scanning/codeql/databases/${encodeURIComponent(language ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_scanning_minus_codeql_minus_database =>
    typia.random<code_minus_scanning_minus_codeql_minus_database>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndLanguage.Headers>,
    owner: string,
    repo: string,
    language: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndLanguage.path(owner, repo, language),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("language")(() => typia.assert(language));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
