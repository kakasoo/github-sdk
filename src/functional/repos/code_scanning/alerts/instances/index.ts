import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposCodeScanningAlertsInstances } from "../../../../../structures/IApiReposCodeScanningAlertsInstances";
import { code_minus_scanning_minus_alert_minus_instance } from "../../../../../structures/code_minus_scanning_minus_alert_minus_instance";

/**
 * List instances of a code scanning alert.
 * Lists all instances of the specified code scanning alert.
 *
 * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 *
 * @tag code-scanning
 * @path repos/:owner/:repo/code-scanning/alerts/:alert_number/instances
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndAlert_number(
  connection: IConnection<getByOwnerAndRepoAndAlert_number.Headers>,
  owner: string,
  repo: string,
  alert_number: string,
): Promise<getByOwnerAndRepoAndAlert_number.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndAlert_number.simulate(
        connection,
        owner,
        repo,
        alert_number,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndAlert_number.METADATA,
          path: getByOwnerAndRepoAndAlert_number.path(
            owner,
            repo,
            alert_number,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndAlert_number {
  export type Headers = IApiReposCodeScanningAlertsInstances.GetHeader;
  export type Output = code_minus_scanning_minus_alert_minus_instance[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/code-scanning/alerts/:alert_number/instances",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, alert_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/code-scanning/alerts/${encodeURIComponent(alert_number ?? "null")}/instances`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_scanning_minus_alert_minus_instance[] =>
    typia.random<code_minus_scanning_minus_alert_minus_instance[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndAlert_number.Headers>,
    owner: string,
    repo: string,
    alert_number: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndAlert_number.path(owner, repo, alert_number),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("alert_number")(() => typia.assert(alert_number));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
