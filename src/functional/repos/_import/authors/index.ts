import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiReposImportAuthors } from "../../../../structures/IApiReposImportAuthors";
import { porter_minus_author } from "../../../../structures/porter_minus_author";
import { body } from "../../../../structures/body";
/**
 * Get commit authors.
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
 *
 * > [!WARNING]
 * > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
 *
 * @tag migrations
 * @deprecated
 * @path repos/:owner/:repo/import/authors
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposImportAuthors.GetHeader;
  export type Output = porter_minus_author[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/import/authors",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/import/authors`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): porter_minus_author[] => typia.random<porter_minus_author[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Map a commit author.
 * Update an author's identity for the import. Your application can continue updating authors any time before you push
 * new commits to the repository.
 *
 * > [!WARNING]
 * > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
 *
 * @tag migrations
 * @deprecated
 * @path repos/:owner/:repo/import/authors/:author_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndAuthor_id(
  connection: IConnection<patchByOwnerAndRepoAndAuthor_id.Headers>,
  owner: string,
  repo: string,
  author_id: number & tags.Type<"int32">,
  body: patchByOwnerAndRepoAndAuthor_id.Input,
): Promise<patchByOwnerAndRepoAndAuthor_id.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndAuthor_id.simulate(
        connection,
        owner,
        repo,
        author_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndAuthor_id.METADATA,
          path: patchByOwnerAndRepoAndAuthor_id.path(owner, repo, author_id),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndAuthor_id {
  export type Headers = IApiReposImportAuthors.PatchHeader;
  export type Input = body;
  export type Output = porter_minus_author;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/import/authors/:author_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    owner: string,
    repo: string,
    author_id: number & tags.Type<"int32">,
  ) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/import/authors/${encodeURIComponent(author_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): porter_minus_author => typia.random<porter_minus_author>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndAuthor_id.Headers>,
    owner: string,
    repo: string,
    author_id: number & tags.Type<"int32">,
    body: patchByOwnerAndRepoAndAuthor_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndAuthor_id.path(owner, repo, author_id),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("author_id")(() => typia.assert(author_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
