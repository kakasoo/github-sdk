import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposPropertiesValues } from "../../../../structures/IApiReposPropertiesValues";
import { body } from "../../../../structures/body";
import { custom_minus_property_minus_value } from "../../../../structures/custom_minus_property_minus_value";

/**
 * Get all custom property values for a repository.
 * Gets all custom property values that are set for a repository.
 * Users with read access to the repository can use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/properties/values
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposPropertiesValues.GetHeader;
  export type Output = custom_minus_property_minus_value[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/properties/values",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/properties/values`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): custom_minus_property_minus_value[] =>
    typia.random<custom_minus_property_minus_value[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create or update custom property values for a repository.
 * Create new or update existing custom property values for a repository.
 * Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
 *
 * Repository admins and other users with the repository-level "edit custom property values" fine-grained permission can use this endpoint.
 *
 * @tag repos
 * @path repos/:owner/:repo/properties/values
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepo(
  connection: IConnection<patchByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
  body: patchByOwnerAndRepo.Input,
): Promise<void> {
  return !!connection.simulate
    ? patchByOwnerAndRepo.simulate(connection, owner, repo, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepo.METADATA,
          path: patchByOwnerAndRepo.path(owner, repo),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepo {
  export type Headers = IApiReposPropertiesValues.PatchHeader;
  export type Input = body;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/properties/values",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/properties/values`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
    body: patchByOwnerAndRepo.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
