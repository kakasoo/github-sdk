import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiReposSecretScanningAlerts } from "../../../../structures/IApiReposSecretScanningAlerts";
import { body } from "../../../../structures/body";
import { secret_minus_scanning_minus_alert } from "../../../../structures/secret_minus_scanning_minus_alert";

export * as locations from "./locations";
/**
 * List secret scanning alerts for a repository.
 * Lists secret scanning alerts for an eligible repository, from newest to oldest.
 *
 * The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
 *
 * @tag secret-scanning
 * @path repos/:owner/:repo/secret-scanning/alerts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepo(
  connection: IConnection<getByOwnerAndRepo.Headers>,
  owner: string,
  repo: string,
): Promise<getByOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepo.simulate(connection, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepo.METADATA,
          path: getByOwnerAndRepo.path(owner, repo),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepo {
  export type Headers = IApiReposSecretScanningAlerts.GetHeader;
  export type Output = secret_minus_scanning_minus_alert[];

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/secret-scanning/alerts",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/secret-scanning/alerts`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): secret_minus_scanning_minus_alert[] =>
    typia.random<secret_minus_scanning_minus_alert[]>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepo.Headers>,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepo.path(owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a secret scanning alert.
 * Gets a single secret scanning alert detected in an eligible repository.
 *
 * The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
 *
 * @tag secret-scanning
 * @path repos/:owner/:repo/secret-scanning/alerts/:alert_number
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOwnerAndRepoAndAlert_number(
  connection: IConnection<getByOwnerAndRepoAndAlert_number.Headers>,
  owner: string,
  repo: string,
  alert_number: string,
): Promise<getByOwnerAndRepoAndAlert_number.Output> {
  return !!connection.simulate
    ? getByOwnerAndRepoAndAlert_number.simulate(
        connection,
        owner,
        repo,
        alert_number,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOwnerAndRepoAndAlert_number.METADATA,
          path: getByOwnerAndRepoAndAlert_number.path(
            owner,
            repo,
            alert_number,
          ),
          status: null,
        },
      );
}
export namespace getByOwnerAndRepoAndAlert_number {
  export type Headers = IApiReposSecretScanningAlerts.GetHeader;
  export type Output = secret_minus_scanning_minus_alert;

  export const METADATA = {
    method: "GET",
    path: "/repos/:owner/:repo/secret-scanning/alerts/:alert_number",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, alert_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/secret-scanning/alerts/${encodeURIComponent(alert_number ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): secret_minus_scanning_minus_alert =>
    typia.random<secret_minus_scanning_minus_alert>(g);
  export const simulate = (
    connection: IConnection<getByOwnerAndRepoAndAlert_number.Headers>,
    owner: string,
    repo: string,
    alert_number: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOwnerAndRepoAndAlert_number.path(owner, repo, alert_number),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("alert_number")(() => typia.assert(alert_number));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a secret scanning alert.
 * Updates the status of a secret scanning alert in an eligible repository.
 *
 * The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
 *
 * @tag secret-scanning
 * @path repos/:owner/:repo/secret-scanning/alerts/:alert_number
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOwnerAndRepoAndAlert_number(
  connection: IConnection<patchByOwnerAndRepoAndAlert_number.Headers>,
  owner: string,
  repo: string,
  alert_number: string,
  body: patchByOwnerAndRepoAndAlert_number.Input,
): Promise<patchByOwnerAndRepoAndAlert_number.Output> {
  return !!connection.simulate
    ? patchByOwnerAndRepoAndAlert_number.simulate(
        connection,
        owner,
        repo,
        alert_number,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOwnerAndRepoAndAlert_number.METADATA,
          path: patchByOwnerAndRepoAndAlert_number.path(
            owner,
            repo,
            alert_number,
          ),
          status: null,
        },
        body,
      );
}
export namespace patchByOwnerAndRepoAndAlert_number {
  export type Headers = IApiReposSecretScanningAlerts.PatchHeader;
  export type Input = body;
  export type Output = secret_minus_scanning_minus_alert;

  export const METADATA = {
    method: "PATCH",
    path: "/repos/:owner/:repo/secret-scanning/alerts/:alert_number",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (owner: string, repo: string, alert_number: string) =>
    `/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}/secret-scanning/alerts/${encodeURIComponent(alert_number ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): secret_minus_scanning_minus_alert =>
    typia.random<secret_minus_scanning_minus_alert>(g);
  export const simulate = (
    connection: IConnection<patchByOwnerAndRepoAndAlert_number.Headers>,
    owner: string,
    repo: string,
    alert_number: string,
    body: patchByOwnerAndRepoAndAlert_number.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOwnerAndRepoAndAlert_number.path(owner, repo, alert_number),
      contentType: "application/json",
    });
    try {
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.param("alert_number")(() => typia.assert(alert_number));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
