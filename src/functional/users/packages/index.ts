import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUsersPackages } from "../../../structures/IApiUsersPackages";
import { packages } from "../../../structures/package";

export * as restore from "./restore";
export * as versions from "./versions";
/**
 * List packages for a user.
 * Lists all packages in a user's namespace for which the requesting user has access.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 *
 * @tag packages
 * @path users/:username/packages
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByUsername(
  connection: IConnection<getByUsername.Headers>,
  username: string,
  query: getByUsername.Query,
): Promise<getByUsername.Output> {
  return !!connection.simulate
    ? getByUsername.simulate(connection, username, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByUsername.METADATA,
          path: getByUsername.path(username, query),
          status: null,
        },
      );
}
export namespace getByUsername {
  export type Headers = IApiUsersPackages.GetHeader;
  export type Query = IApiUsersPackages.GetQuery;
  export type Output = packages[];

  export const METADATA = {
    method: "GET",
    path: "/users/:username/packages",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (username: string, query: getByUsername.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/users/${encodeURIComponent(username ?? "null")}/packages`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (g?: Partial<typia.IRandomGenerator>): packages[] =>
    typia.random<packages[]>(g);
  export const simulate = (
    connection: IConnection<getByUsername.Headers>,
    username: string,
    query: getByUsername.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByUsername.path(username, query),
      contentType: "application/json",
    });
    try {
      assert.param("username")(() => typia.assert(username));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a package for a user.
 * Gets a specific package metadata for a public package owned by a user.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 *
 * @tag packages
 * @path users/:username/packages/:package_type/:package_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByUsernameAndPackage_typeAndPackage_name(
  connection: IConnection<getByUsernameAndPackage_typeAndPackage_name.Headers>,
  username: string,
  package_type: string,
  package_name: string,
): Promise<getByUsernameAndPackage_typeAndPackage_name.Output> {
  return !!connection.simulate
    ? getByUsernameAndPackage_typeAndPackage_name.simulate(
        connection,
        username,
        package_type,
        package_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByUsernameAndPackage_typeAndPackage_name.METADATA,
          path: getByUsernameAndPackage_typeAndPackage_name.path(
            username,
            package_type,
            package_name,
          ),
          status: null,
        },
      );
}
export namespace getByUsernameAndPackage_typeAndPackage_name {
  export type Headers = IApiUsersPackages.GetHeader;
  export type Output = packages;

  export const METADATA = {
    method: "GET",
    path: "/users/:username/packages/:package_type/:package_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    username: string,
    package_type: string,
    package_name: string,
  ) =>
    `/users/${encodeURIComponent(username ?? "null")}/packages/${encodeURIComponent(package_type ?? "null")}/${encodeURIComponent(package_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): packages =>
    typia.random<packages>(g);
  export const simulate = (
    connection: IConnection<getByUsernameAndPackage_typeAndPackage_name.Headers>,
    username: string,
    package_type: string,
    package_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByUsernameAndPackage_typeAndPackage_name.path(
        username,
        package_type,
        package_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("username")(() => typia.assert(username));
      assert.param("package_type")(() => typia.assert(package_type));
      assert.param("package_name")(() => typia.assert(package_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a package for a user.
 * Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 *
 * @tag packages
 * @path users/:username/packages/:package_type/:package_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByUsernameAndPackage_typeAndPackage_name(
  connection: IConnection<eraseByUsernameAndPackage_typeAndPackage_name.Headers>,
  username: string,
  package_type: string,
  package_name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByUsernameAndPackage_typeAndPackage_name.simulate(
        connection,
        username,
        package_type,
        package_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByUsernameAndPackage_typeAndPackage_name.METADATA,
          path: eraseByUsernameAndPackage_typeAndPackage_name.path(
            username,
            package_type,
            package_name,
          ),
          status: null,
        },
      );
}
export namespace eraseByUsernameAndPackage_typeAndPackage_name {
  export type Headers = IApiUsersPackages.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/users/:username/packages/:package_type/:package_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    username: string,
    package_type: string,
    package_name: string,
  ) =>
    `/users/${encodeURIComponent(username ?? "null")}/packages/${encodeURIComponent(package_type ?? "null")}/${encodeURIComponent(package_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByUsernameAndPackage_typeAndPackage_name.Headers>,
    username: string,
    package_type: string,
    package_name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByUsernameAndPackage_typeAndPackage_name.path(
        username,
        package_type,
        package_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("username")(() => typia.assert(username));
      assert.param("package_type")(() => typia.assert(package_type));
      assert.param("package_name")(() => typia.assert(package_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
