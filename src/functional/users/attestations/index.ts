import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUsersAttestations } from "../../../structures/IApiUsersAttestations";
import { empty_minus_object } from "../../../structures/empty_minus_object";

/**
 * List attestations.
 * List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.
 *
 * The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
 *
 * **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
 *
 * @param subject_digest Subject Digest
 * @tag users
 * @path users/:username/attestations/:subject_digest
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByUsernameAndSubject_digest(
  connection: IConnection<getByUsernameAndSubject_digest.Headers>,
  username: string,
  subject_digest: string,
): Promise<getByUsernameAndSubject_digest.Output> {
  return !!connection.simulate
    ? getByUsernameAndSubject_digest.simulate(
        connection,
        username,
        subject_digest,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByUsernameAndSubject_digest.METADATA,
          path: getByUsernameAndSubject_digest.path(username, subject_digest),
          status: null,
        },
      );
}
export namespace getByUsernameAndSubject_digest {
  export type Headers = IApiUsersAttestations.GetHeader;
  export type Output = empty_minus_object;

  export const METADATA = {
    method: "GET",
    path: "/users/:username/attestations/:subject_digest",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (username: string, subject_digest: string) =>
    `/users/${encodeURIComponent(username ?? "null")}/attestations/${encodeURIComponent(subject_digest ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): empty_minus_object => typia.random<empty_minus_object>(g);
  export const simulate = (
    connection: IConnection<getByUsernameAndSubject_digest.Headers>,
    username: string,
    subject_digest: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByUsernameAndSubject_digest.path(username, subject_digest),
      contentType: "application/json",
    });
    try {
      assert.param("username")(() => typia.assert(username));
      assert.param("subject_digest")(() => typia.assert(subject_digest));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
