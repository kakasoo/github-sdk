import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiUsersFollowing } from "../../../structures/IApiUsersFollowing";
import { simple_minus_user } from "../../../structures/simple_minus_user";

/**
 * List the people a user follows.
 * Lists the people who the specified user follows.
 *
 * @tag users
 * @path users/:username/following
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByUsername(
  connection: IConnection<getByUsername.Headers>,
  username: string,
): Promise<getByUsername.Output> {
  return !!connection.simulate
    ? getByUsername.simulate(connection, username)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByUsername.METADATA,
          path: getByUsername.path(username),
          status: null,
        },
      );
}
export namespace getByUsername {
  export type Headers = IApiUsersFollowing.GetHeader;
  export type Output = simple_minus_user[];

  export const METADATA = {
    method: "GET",
    path: "/users/:username/following",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (username: string) =>
    `/users/${encodeURIComponent(username ?? "null")}/following`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): simple_minus_user[] => typia.random<simple_minus_user[]>(g);
  export const simulate = (
    connection: IConnection<getByUsername.Headers>,
    username: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByUsername.path(username),
      contentType: "application/json",
    });
    try {
      assert.param("username")(() => typia.assert(username));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag users
 * @path users/:username/following/:target_user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByUsernameAndTarget_user(
  connection: IConnection<getByUsernameAndTarget_user.Headers>,
  username: string,
  target_user: string,
): Promise<void> {
  return !!connection.simulate
    ? getByUsernameAndTarget_user.simulate(connection, username, target_user)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByUsernameAndTarget_user.METADATA,
          path: getByUsernameAndTarget_user.path(username, target_user),
          status: null,
        },
      );
}
export namespace getByUsernameAndTarget_user {
  export type Headers = IApiUsersFollowing.GetHeader;

  export const METADATA = {
    method: "GET",
    path: "/users/:username/following/:target_user",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (username: string, target_user: string) =>
    `/users/${encodeURIComponent(username ?? "null")}/following/${encodeURIComponent(target_user ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<getByUsernameAndTarget_user.Headers>,
    username: string,
    target_user: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByUsernameAndTarget_user.path(username, target_user),
      contentType: "application/json",
    });
    try {
      assert.param("username")(() => typia.assert(username));
      assert.param("target_user")(() => typia.assert(target_user));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
