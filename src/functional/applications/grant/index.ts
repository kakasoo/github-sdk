import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiApplicationsGrant } from "../../../structures/IApiApplicationsGrant";
import { body } from "../../../structures/body";
/**
 * Delete an app authorization.
 * OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 *
 * @tag apps
 * @path applications/:client_id/grant
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByClient_id(
  connection: IConnection<eraseByClient_id.Headers>,
  client_id: string,
  body: eraseByClient_id.Input,
): Promise<void> {
  return !!connection.simulate
    ? eraseByClient_id.simulate(connection, client_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByClient_id.METADATA,
          path: eraseByClient_id.path(client_id),
          status: null,
        },
        body,
      );
}
export namespace eraseByClient_id {
  export type Headers = IApiApplicationsGrant.DeleteHeader;
  export type Input = body;

  export const METADATA = {
    method: "DELETE",
    path: "/applications/:client_id/grant",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (client_id: string) =>
    `/applications/${encodeURIComponent(client_id ?? "null")}/grant`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByClient_id.Headers>,
    client_id: string,
    body: eraseByClient_id.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByClient_id.path(client_id),
      contentType: "application/json",
    });
    try {
      assert.param("client_id")(() => typia.assert(client_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
