import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiAppHookDeliveries } from "../../../../structures/IApiAppHookDeliveries";
import { hook_minus_delivery } from "../../../../structures/hook_minus_delivery";
import { hook_minus_delivery_minus_item } from "../../../../structures/hook_minus_delivery_minus_item";

export * as attempts from "./attempts";
/**
 * List deliveries for an app webhook.
 * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * @tag apps
 * @path app/hook/deliveries
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
  query: get.Query,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(query),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiAppHookDeliveries.GetHeader;
  export type Query = IApiAppHookDeliveries.GetQuery;
  export type Output = hook_minus_delivery_minus_item[];

  export const METADATA = {
    method: "GET",
    path: "/app/hook/deliveries",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (query: get.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/app/hook/deliveries";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): hook_minus_delivery_minus_item[] =>
    typia.random<hook_minus_delivery_minus_item[]>(g);
  export const simulate = (
    connection: IConnection<get.Headers>,
    query: get.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: get.path(query),
      contentType: "application/json",
    });
    try {
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a delivery for an app webhook.
 * Returns a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * @tag apps
 * @path app/hook/deliveries/:delivery_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByDelivery_id(
  connection: IConnection<getByDelivery_id.Headers>,
  delivery_id: string,
): Promise<getByDelivery_id.Output> {
  return !!connection.simulate
    ? getByDelivery_id.simulate(connection, delivery_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByDelivery_id.METADATA,
          path: getByDelivery_id.path(delivery_id),
          status: null,
        },
      );
}
export namespace getByDelivery_id {
  export type Headers = IApiAppHookDeliveries.GetHeader;
  export type Output = hook_minus_delivery;

  export const METADATA = {
    method: "GET",
    path: "/app/hook/deliveries/:delivery_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (delivery_id: string) =>
    `/app/hook/deliveries/${encodeURIComponent(delivery_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): hook_minus_delivery => typia.random<hook_minus_delivery>(g);
  export const simulate = (
    connection: IConnection<getByDelivery_id.Headers>,
    delivery_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByDelivery_id.path(delivery_id),
      contentType: "application/json",
    });
    try {
      assert.param("delivery_id")(() => typia.assert(delivery_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
