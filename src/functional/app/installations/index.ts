import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiAppInstallations } from "../../../structures/IApiAppInstallations";
import { installation } from "../../../structures/installation";
export * as access_tokens from "./access_tokens";
export * as suspended from "./suspended";
/**
 * List installations for the authenticated app.
 * The permissions the installation has are included under the `permissions` key.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * @tag apps
 * @path app/installations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
  query: get.Query,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(query),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiAppInstallations.GetHeader;
  export type Query = IApiAppInstallations.GetQuery;
  export type Output = installation[];

  export const METADATA = {
    method: "GET",
    path: "/app/installations",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (query: get.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/app/installations";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (g?: Partial<typia.IRandomGenerator>): installation[] =>
    typia.random<installation[]>(g);
  export const simulate = (
    connection: IConnection<get.Headers>,
    query: get.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: get.path(query),
      contentType: "application/json",
    });
    try {
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an installation for the authenticated app.
 * Enables an authenticated GitHub App to find an installation's information using the installation id.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * @tag apps
 * @path app/installations/:installation_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByInstallation_id(
  connection: IConnection<getByInstallation_id.Headers>,
  installation_id: string,
): Promise<getByInstallation_id.Output> {
  return !!connection.simulate
    ? getByInstallation_id.simulate(connection, installation_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByInstallation_id.METADATA,
          path: getByInstallation_id.path(installation_id),
          status: null,
        },
      );
}
export namespace getByInstallation_id {
  export type Headers = IApiAppInstallations.GetHeader;
  export type Output = installation;

  export const METADATA = {
    method: "GET",
    path: "/app/installations/:installation_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (installation_id: string) =>
    `/app/installations/${encodeURIComponent(installation_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): installation =>
    typia.random<installation>(g);
  export const simulate = (
    connection: IConnection<getByInstallation_id.Headers>,
    installation_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByInstallation_id.path(installation_id),
      contentType: "application/json",
    });
    try {
      assert.param("installation_id")(() => typia.assert(installation_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete an installation for the authenticated app.
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * @tag apps
 * @path app/installations/:installation_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByInstallation_id(
  connection: IConnection<eraseByInstallation_id.Headers>,
  installation_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByInstallation_id.simulate(connection, installation_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByInstallation_id.METADATA,
          path: eraseByInstallation_id.path(installation_id),
          status: null,
        },
      );
}
export namespace eraseByInstallation_id {
  export type Headers = IApiAppInstallations.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/app/installations/:installation_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (installation_id: string) =>
    `/app/installations/${encodeURIComponent(installation_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByInstallation_id.Headers>,
    installation_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByInstallation_id.path(installation_id),
      contentType: "application/json",
    });
    try {
      assert.param("installation_id")(() => typia.assert(installation_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
