import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiOrgsMembersCodespacesStop } from "../../../../../structures/IApiOrgsMembersCodespacesStop";
import { codespace } from "../../../../../structures/codespace";
/**
 * Stop a codespace for an organization user.
 * Stops a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag codespaces
 * @path orgs/:org/members/:username/codespaces/:codespace_name/stop
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOrgAndUsernameAndCodespace_name(
  connection: IConnection<postByOrgAndUsernameAndCodespace_name.Headers>,
  org: string,
  username: string,
  codespace_name: string,
): Promise<postByOrgAndUsernameAndCodespace_name.Output> {
  return !!connection.simulate
    ? postByOrgAndUsernameAndCodespace_name.simulate(
        connection,
        org,
        username,
        codespace_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOrgAndUsernameAndCodespace_name.METADATA,
          path: postByOrgAndUsernameAndCodespace_name.path(
            org,
            username,
            codespace_name,
          ),
          status: null,
        },
      );
}
export namespace postByOrgAndUsernameAndCodespace_name {
  export type Headers = IApiOrgsMembersCodespacesStop.PostHeader;
  export type Output = codespace;

  export const METADATA = {
    method: "POST",
    path: "/orgs/:org/members/:username/codespaces/:codespace_name/stop",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, username: string, codespace_name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/members/${encodeURIComponent(username ?? "null")}/codespaces/${encodeURIComponent(codespace_name ?? "null")}/stop`;
  export const random = (g?: Partial<typia.IRandomGenerator>): codespace =>
    typia.random<codespace>(g);
  export const simulate = (
    connection: IConnection<postByOrgAndUsernameAndCodespace_name.Headers>,
    org: string,
    username: string,
    codespace_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOrgAndUsernameAndCodespace_name.path(
        org,
        username,
        codespace_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("username")(() => typia.assert(username));
      assert.param("codespace_name")(() => typia.assert(codespace_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
