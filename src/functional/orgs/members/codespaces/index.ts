import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsMembersCodespaces } from "../../../../structures/IApiOrgsMembersCodespaces";
import { response } from "../../../../structures/response";

export * as stop from "./stop";
/**
 * List codespaces for a user in organization.
 * Lists the codespaces that a member of an organization has for repositories in that organization.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag codespaces
 * @path orgs/:org/members/:username/codespaces
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndUsername(
  connection: IConnection<getByOrgAndUsername.Headers>,
  org: string,
  username: string,
): Promise<getByOrgAndUsername.Output> {
  return !!connection.simulate
    ? getByOrgAndUsername.simulate(connection, org, username)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndUsername.METADATA,
          path: getByOrgAndUsername.path(org, username),
          status: null,
        },
      );
}
export namespace getByOrgAndUsername {
  export type Headers = IApiOrgsMembersCodespaces.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/members/:username/codespaces",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, username: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/members/${encodeURIComponent(username ?? "null")}/codespaces`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndUsername.Headers>,
    org: string,
    username: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndUsername.path(org, username),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("username")(() => typia.assert(username));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a codespace from the organization.
 * Deletes a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag codespaces
 * @path orgs/:org/members/:username/codespaces/:codespace_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrgAndUsernameAndCodespace_name(
  connection: IConnection<eraseByOrgAndUsernameAndCodespace_name.Headers>,
  org: string,
  username: string,
  codespace_name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrgAndUsernameAndCodespace_name.simulate(
        connection,
        org,
        username,
        codespace_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrgAndUsernameAndCodespace_name.METADATA,
          path: eraseByOrgAndUsernameAndCodespace_name.path(
            org,
            username,
            codespace_name,
          ),
          status: null,
        },
      );
}
export namespace eraseByOrgAndUsernameAndCodespace_name {
  export type Headers = IApiOrgsMembersCodespaces.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/members/:username/codespaces/:codespace_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, username: string, codespace_name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/members/${encodeURIComponent(username ?? "null")}/codespaces/${encodeURIComponent(codespace_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrgAndUsernameAndCodespace_name.Headers>,
    org: string,
    username: string,
    codespace_name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrgAndUsernameAndCodespace_name.path(
        org,
        username,
        codespace_name,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("username")(() => typia.assert(username));
      assert.param("codespace_name")(() => typia.assert(codespace_name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
