import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsMigrationsRepositories } from "../../../../structures/IApiOrgsMigrationsRepositories";
import { minimal_minus_repository } from "../../../../structures/minimal_minus_repository";

/**
 * List repositories in an organization migration.
 * List all the repositories for this organization migration.
 *
 * @tag migrations
 * @path orgs/:org/migrations/:migration_id/repositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndMigration_id(
  connection: IConnection<getByOrgAndMigration_id.Headers>,
  org: string,
  migration_id: string,
): Promise<getByOrgAndMigration_id.Output> {
  return !!connection.simulate
    ? getByOrgAndMigration_id.simulate(connection, org, migration_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndMigration_id.METADATA,
          path: getByOrgAndMigration_id.path(org, migration_id),
          status: null,
        },
      );
}
export namespace getByOrgAndMigration_id {
  export type Headers = IApiOrgsMigrationsRepositories.GetHeader;
  export type Output = minimal_minus_repository[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/migrations/:migration_id/repositories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, migration_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/migrations/${encodeURIComponent(migration_id ?? "null")}/repositories`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): minimal_minus_repository[] => typia.random<minimal_minus_repository[]>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndMigration_id.Headers>,
    org: string,
    migration_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndMigration_id.path(org, migration_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("migration_id")(() => typia.assert(migration_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
