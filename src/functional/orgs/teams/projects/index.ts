import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsTeamsProjects } from "../../../../structures/IApiOrgsTeamsProjects";
import { body } from "../../../../structures/body";
import { team_minus_project } from "../../../../structures/team_minus_project";

/**
 * List team projects.
 * Lists the organization projects for a team.
 *
 * > [!NOTE]
 * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 *
 * @tag teams
 * @path orgs/:org/teams/:team_slug/projects
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndTeam_slug(
  connection: IConnection<getByOrgAndTeam_slug.Headers>,
  org: string,
  team_slug: string,
): Promise<getByOrgAndTeam_slug.Output> {
  return !!connection.simulate
    ? getByOrgAndTeam_slug.simulate(connection, org, team_slug)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndTeam_slug.METADATA,
          path: getByOrgAndTeam_slug.path(org, team_slug),
          status: null,
        },
      );
}
export namespace getByOrgAndTeam_slug {
  export type Headers = IApiOrgsTeamsProjects.GetHeader;
  export type Output = team_minus_project[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/teams/:team_slug/projects",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, team_slug: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/teams/${encodeURIComponent(team_slug ?? "null")}/projects`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): team_minus_project[] => typia.random<team_minus_project[]>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndTeam_slug.Headers>,
    org: string,
    team_slug: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndTeam_slug.path(org, team_slug),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("team_slug")(() => typia.assert(team_slug));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Check team permissions for a project.
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * > [!NOTE]
 * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 *
 * @tag teams
 * @path orgs/:org/teams/:team_slug/projects/:project_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndTeam_slugAndProject_id(
  connection: IConnection<getByOrgAndTeam_slugAndProject_id.Headers>,
  org: string,
  team_slug: string,
  project_id: string,
): Promise<getByOrgAndTeam_slugAndProject_id.Output> {
  return !!connection.simulate
    ? getByOrgAndTeam_slugAndProject_id.simulate(
        connection,
        org,
        team_slug,
        project_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndTeam_slugAndProject_id.METADATA,
          path: getByOrgAndTeam_slugAndProject_id.path(
            org,
            team_slug,
            project_id,
          ),
          status: null,
        },
      );
}
export namespace getByOrgAndTeam_slugAndProject_id {
  export type Headers = IApiOrgsTeamsProjects.GetHeader;
  export type Output = team_minus_project;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/teams/:team_slug/projects/:project_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, team_slug: string, project_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/teams/${encodeURIComponent(team_slug ?? "null")}/projects/${encodeURIComponent(project_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): team_minus_project => typia.random<team_minus_project>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndTeam_slugAndProject_id.Headers>,
    org: string,
    team_slug: string,
    project_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndTeam_slugAndProject_id.path(org, team_slug, project_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("team_slug")(() => typia.assert(team_slug));
      assert.param("project_id")(() => typia.assert(project_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Add or update team project permissions.
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 *
 * > [!NOTE]
 * > You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 *
 * @tag teams
 * @path orgs/:org/teams/:team_slug/projects/:project_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOrgAndTeam_slugAndProject_id(
  connection: IConnection<putByOrgAndTeam_slugAndProject_id.Headers>,
  org: string,
  team_slug: string,
  project_id: string,
  body: putByOrgAndTeam_slugAndProject_id.Input,
): Promise<void> {
  return !!connection.simulate
    ? putByOrgAndTeam_slugAndProject_id.simulate(
        connection,
        org,
        team_slug,
        project_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrgAndTeam_slugAndProject_id.METADATA,
          path: putByOrgAndTeam_slugAndProject_id.path(
            org,
            team_slug,
            project_id,
          ),
          status: null,
        },
        body,
      );
}
export namespace putByOrgAndTeam_slugAndProject_id {
  export type Headers = IApiOrgsTeamsProjects.PutHeader;
  export type Input = body;

  export const METADATA = {
    method: "PUT",
    path: "/orgs/:org/teams/:team_slug/projects/:project_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, team_slug: string, project_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/teams/${encodeURIComponent(team_slug ?? "null")}/projects/${encodeURIComponent(project_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putByOrgAndTeam_slugAndProject_id.Headers>,
    org: string,
    team_slug: string,
    project_id: string,
    body: putByOrgAndTeam_slugAndProject_id.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrgAndTeam_slugAndProject_id.path(org, team_slug, project_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("team_slug")(() => typia.assert(team_slug));
      assert.param("project_id")(() => typia.assert(project_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove a project from a team.
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
 *
 * > [!NOTE]
 * > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 *
 * @tag teams
 * @path orgs/:org/teams/:team_slug/projects/:project_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrgAndTeam_slugAndProject_id(
  connection: IConnection<eraseByOrgAndTeam_slugAndProject_id.Headers>,
  org: string,
  team_slug: string,
  project_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrgAndTeam_slugAndProject_id.simulate(
        connection,
        org,
        team_slug,
        project_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrgAndTeam_slugAndProject_id.METADATA,
          path: eraseByOrgAndTeam_slugAndProject_id.path(
            org,
            team_slug,
            project_id,
          ),
          status: null,
        },
      );
}
export namespace eraseByOrgAndTeam_slugAndProject_id {
  export type Headers = IApiOrgsTeamsProjects.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/teams/:team_slug/projects/:project_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, team_slug: string, project_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/teams/${encodeURIComponent(team_slug ?? "null")}/projects/${encodeURIComponent(project_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrgAndTeam_slugAndProject_id.Headers>,
    org: string,
    team_slug: string,
    project_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrgAndTeam_slugAndProject_id.path(
        org,
        team_slug,
        project_id,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("team_slug")(() => typia.assert(team_slug));
      assert.param("project_id")(() => typia.assert(project_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
