import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsSecurityManagersTeams } from "../../../../structures/IApiOrgsSecurityManagersTeams";

/**
 * Add a security manager team.
 * Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."
 *
 * The authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/security-managers/teams/:team_slug
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOrgAndTeam_slug(
  connection: IConnection<putByOrgAndTeam_slug.Headers>,
  org: string,
  team_slug: string,
): Promise<void> {
  return !!connection.simulate
    ? putByOrgAndTeam_slug.simulate(connection, org, team_slug)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrgAndTeam_slug.METADATA,
          path: putByOrgAndTeam_slug.path(org, team_slug),
          status: null,
        },
      );
}
export namespace putByOrgAndTeam_slug {
  export type Headers = IApiOrgsSecurityManagersTeams.PutHeader;

  export const METADATA = {
    method: "PUT",
    path: "/orgs/:org/security-managers/teams/:team_slug",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, team_slug: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/security-managers/teams/${encodeURIComponent(team_slug ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putByOrgAndTeam_slug.Headers>,
    org: string,
    team_slug: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrgAndTeam_slug.path(org, team_slug),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("team_slug")(() => typia.assert(team_slug));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove a security manager team.
 * Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."
 *
 * The authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/security-managers/teams/:team_slug
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrgAndTeam_slug(
  connection: IConnection<eraseByOrgAndTeam_slug.Headers>,
  org: string,
  team_slug: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrgAndTeam_slug.simulate(connection, org, team_slug)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrgAndTeam_slug.METADATA,
          path: eraseByOrgAndTeam_slug.path(org, team_slug),
          status: null,
        },
      );
}
export namespace eraseByOrgAndTeam_slug {
  export type Headers = IApiOrgsSecurityManagersTeams.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/security-managers/teams/:team_slug",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, team_slug: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/security-managers/teams/${encodeURIComponent(team_slug ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrgAndTeam_slug.Headers>,
    org: string,
    team_slug: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrgAndTeam_slug.path(org, team_slug),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("team_slug")(() => typia.assert(team_slug));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
