import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiOrgsHooksConfig } from "../../../../structures/IApiOrgsHooksConfig";
import { webhook_minus_config } from "../../../../structures/webhook_minus_config";
import { body } from "../../../../structures/body";
/**
 * Get a webhook configuration for an organization.
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
 *
 * You must be an organization owner to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
 * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
 *
 * @tag orgs
 * @path orgs/:org/hooks/:hook_id/config
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndHook_id(
  connection: IConnection<getByOrgAndHook_id.Headers>,
  org: string,
  hook_id: string,
): Promise<getByOrgAndHook_id.Output> {
  return !!connection.simulate
    ? getByOrgAndHook_id.simulate(connection, org, hook_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndHook_id.METADATA,
          path: getByOrgAndHook_id.path(org, hook_id),
          status: null,
        },
      );
}
export namespace getByOrgAndHook_id {
  export type Headers = IApiOrgsHooksConfig.GetHeader;
  export type Output = webhook_minus_config;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/hooks/:hook_id/config",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, hook_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/hooks/${encodeURIComponent(hook_id ?? "null")}/config`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): webhook_minus_config => typia.random<webhook_minus_config>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndHook_id.Headers>,
    org: string,
    hook_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndHook_id.path(org, hook_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("hook_id")(() => typia.assert(hook_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a webhook configuration for an organization.
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."
 *
 * You must be an organization owner to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
 * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
 *
 * @tag orgs
 * @path orgs/:org/hooks/:hook_id/config
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOrgAndHook_id(
  connection: IConnection<patchByOrgAndHook_id.Headers>,
  org: string,
  hook_id: string,
  body: patchByOrgAndHook_id.Input,
): Promise<patchByOrgAndHook_id.Output> {
  return !!connection.simulate
    ? patchByOrgAndHook_id.simulate(connection, org, hook_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOrgAndHook_id.METADATA,
          path: patchByOrgAndHook_id.path(org, hook_id),
          status: null,
        },
        body,
      );
}
export namespace patchByOrgAndHook_id {
  export type Headers = IApiOrgsHooksConfig.PatchHeader;
  export type Input = body;
  export type Output = webhook_minus_config;

  export const METADATA = {
    method: "PATCH",
    path: "/orgs/:org/hooks/:hook_id/config",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, hook_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/hooks/${encodeURIComponent(hook_id ?? "null")}/config`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): webhook_minus_config => typia.random<webhook_minus_config>(g);
  export const simulate = (
    connection: IConnection<patchByOrgAndHook_id.Headers>,
    org: string,
    hook_id: string,
    body: patchByOrgAndHook_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOrgAndHook_id.path(org, hook_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("hook_id")(() => typia.assert(hook_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
