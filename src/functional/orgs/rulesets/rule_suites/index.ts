import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsRulesetsRuleSuites } from "../../../../structures/IApiOrgsRulesetsRuleSuites";
import { rule_minus_suite } from "../../../../structures/rule_minus_suite";
import { rule_minus_suites } from "../../../../structures/rule_minus_suites";

/**
 * List organization rule suites.
 * Lists suites of rule evaluations at the organization level.
 * For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
 *
 * @tag repos
 * @path orgs/:org/rulesets/rule-suites
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsRulesetsRuleSuites.GetHeader;
  export type Output = rule_minus_suites;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/rulesets/rule-suites",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/rulesets/rule-suites`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): rule_minus_suites => typia.random<rule_minus_suites>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an organization rule suite.
 * Gets information about a suite of rule evaluations from within an organization.
 * For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
 *
 * @tag repos
 * @path orgs/:org/rulesets/rule-suites/:rule_suite_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndRule_suite_id(
  connection: IConnection<getByOrgAndRule_suite_id.Headers>,
  org: string,
  rule_suite_id: string,
): Promise<getByOrgAndRule_suite_id.Output> {
  return !!connection.simulate
    ? getByOrgAndRule_suite_id.simulate(connection, org, rule_suite_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndRule_suite_id.METADATA,
          path: getByOrgAndRule_suite_id.path(org, rule_suite_id),
          status: null,
        },
      );
}
export namespace getByOrgAndRule_suite_id {
  export type Headers = IApiOrgsRulesetsRuleSuites.GetHeader;
  export type Output = rule_minus_suite;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/rulesets/rule-suites/:rule_suite_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, rule_suite_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/rulesets/rule-suites/${encodeURIComponent(rule_suite_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): rule_minus_suite => typia.random<rule_minus_suite>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndRule_suite_id.Headers>,
    org: string,
    rule_suite_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndRule_suite_id.path(org, rule_suite_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("rule_suite_id")(() => typia.assert(rule_suite_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
