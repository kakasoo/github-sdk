import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiOrgsCopilotUsage } from "../../../../structures/IApiOrgsCopilotUsage";
import { copilot_minus_usage_minus_metrics } from "../../../../structures/copilot_minus_usage_minus_metrics";
/**
 * Get a summary of Copilot usage for organization members.
 * > [!NOTE]
 * > This endpoint is in beta and is subject to change.
 *
 * You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
 * across an organization, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day.
 * See the response schema tab for detailed metrics definitions.
 *
 * The response contains metrics for up to 28 days prior. Usage metrics are processed once per day for the previous day,
 * and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
 * they must have telemetry enabled in their IDE.
 *
 * Organization owners, and owners and billing managers of the parent enterprise, can view Copilot usage metrics.
 *
 * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
 *
 * @tag copilot
 * @path orgs/:org/copilot/usage
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
  query: getByOrg.Query,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org, query),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsCopilotUsage.GetHeader;
  export type Query = IApiOrgsCopilotUsage.GetQuery;
  export type Output = copilot_minus_usage_minus_metrics[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/copilot/usage",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, query: getByOrg.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/orgs/${encodeURIComponent(org ?? "null")}/copilot/usage`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): copilot_minus_usage_minus_metrics[] =>
    typia.random<copilot_minus_usage_minus_metrics[]>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
    query: getByOrg.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org, query),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
