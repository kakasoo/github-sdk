import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";

import { IApiOrgsPersonalAccessTokensRepositories } from "../../../../structures/IApiOrgsPersonalAccessTokensRepositories";
import { minimal_minus_repository } from "../../../../structures/minimal_minus_repository";

/**
 * List repositories a fine-grained personal access token has access to.
 * Lists the repositories a fine-grained personal access token has access to.
 *
 * Only GitHub Apps can use this endpoint.
 *
 * @param pat_id Unique identifier of the fine-grained personal access token.
 * @tag orgs
 * @path orgs/:org/personal-access-tokens/:pat_id/repositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndPat_id(
  connection: IConnection<getByOrgAndPat_id.Headers>,
  org: string,
  pat_id: number & tags.Type<"int32">,
): Promise<getByOrgAndPat_id.Output> {
  return !!connection.simulate
    ? getByOrgAndPat_id.simulate(connection, org, pat_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndPat_id.METADATA,
          path: getByOrgAndPat_id.path(org, pat_id),
          status: null,
        },
      );
}
export namespace getByOrgAndPat_id {
  export type Headers = IApiOrgsPersonalAccessTokensRepositories.GetHeader;
  export type Output = minimal_minus_repository[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/personal-access-tokens/:pat_id/repositories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, pat_id: number & tags.Type<"int32">) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/personal-access-tokens/${encodeURIComponent(pat_id ?? "null")}/repositories`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): minimal_minus_repository[] => typia.random<minimal_minus_repository[]>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndPat_id.Headers>,
    org: string,
    pat_id: number & tags.Type<"int32">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndPat_id.path(org, pat_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("pat_id")(() => typia.assert(pat_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
