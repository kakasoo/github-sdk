import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsOrganizationRoles } from "../../../structures/IApiOrgsOrganizationRoles";
import { organization_minus_role } from "../../../structures/organization_minus_role";
import { response } from "../../../structures/response";

export * as teams from "./teams";
export * as users from "./users";
/**
 * Get all organization roles for an organization.
 * Lists the organization roles available in this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
 *
 * To use this endpoint, the authenticated user must be one of:
 *
 * - An administrator for the organization.
 * - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/organization-roles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsOrganizationRoles.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/organization-roles",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/organization-roles`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an organization role.
 * Gets an organization role that is available to this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
 *
 * To use this endpoint, the authenticated user must be one of:
 *
 * - An administrator for the organization.
 * - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/organization-roles/:role_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndRole_id(
  connection: IConnection<getByOrgAndRole_id.Headers>,
  org: string,
  role_id: string,
): Promise<getByOrgAndRole_id.Output> {
  return !!connection.simulate
    ? getByOrgAndRole_id.simulate(connection, org, role_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndRole_id.METADATA,
          path: getByOrgAndRole_id.path(org, role_id),
          status: null,
        },
      );
}
export namespace getByOrgAndRole_id {
  export type Headers = IApiOrgsOrganizationRoles.GetHeader;
  export type Output = organization_minus_role;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/organization-roles/:role_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, role_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/organization-roles/${encodeURIComponent(role_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): organization_minus_role => typia.random<organization_minus_role>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndRole_id.Headers>,
    org: string,
    role_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndRole_id.path(org, role_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("role_id")(() => typia.assert(role_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
