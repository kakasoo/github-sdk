import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiOrgsOrganizationRolesTeams } from "../../../../structures/IApiOrgsOrganizationRolesTeams";
import { team_minus_role_minus_assignment } from "../../../../structures/team_minus_role_minus_assignment";
/**
 * Remove all organization roles for a team.
 * Removes all assigned organization roles from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
 *
 * The authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/organization-roles/teams/:team_slug
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrgAndTeam_slug(
  connection: IConnection<eraseByOrgAndTeam_slug.Headers>,
  org: string,
  team_slug: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrgAndTeam_slug.simulate(connection, org, team_slug)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrgAndTeam_slug.METADATA,
          path: eraseByOrgAndTeam_slug.path(org, team_slug),
          status: null,
        },
      );
}
export namespace eraseByOrgAndTeam_slug {
  export type Headers = IApiOrgsOrganizationRolesTeams.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/organization-roles/teams/:team_slug",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, team_slug: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/organization-roles/teams/${encodeURIComponent(team_slug ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrgAndTeam_slug.Headers>,
    org: string,
    team_slug: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrgAndTeam_slug.path(org, team_slug),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("team_slug")(() => typia.assert(team_slug));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Assign an organization role to a team.
 * Assigns an organization role to a team in an organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
 *
 * The authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/organization-roles/teams/:team_slug/:role_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOrgAndTeam_slugAndRole_id(
  connection: IConnection<putByOrgAndTeam_slugAndRole_id.Headers>,
  org: string,
  team_slug: string,
  role_id: string,
): Promise<void> {
  return !!connection.simulate
    ? putByOrgAndTeam_slugAndRole_id.simulate(
        connection,
        org,
        team_slug,
        role_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrgAndTeam_slugAndRole_id.METADATA,
          path: putByOrgAndTeam_slugAndRole_id.path(org, team_slug, role_id),
          status: null,
        },
      );
}
export namespace putByOrgAndTeam_slugAndRole_id {
  export type Headers = IApiOrgsOrganizationRolesTeams.PutHeader;

  export const METADATA = {
    method: "PUT",
    path: "/orgs/:org/organization-roles/teams/:team_slug/:role_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, team_slug: string, role_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/organization-roles/teams/${encodeURIComponent(team_slug ?? "null")}/${encodeURIComponent(role_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putByOrgAndTeam_slugAndRole_id.Headers>,
    org: string,
    team_slug: string,
    role_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrgAndTeam_slugAndRole_id.path(org, team_slug, role_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("team_slug")(() => typia.assert(team_slug));
      assert.param("role_id")(() => typia.assert(role_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove an organization role from a team.
 * Removes an organization role from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
 *
 * The authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/organization-roles/teams/:team_slug/:role_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrgAndTeam_slugAndRole_id(
  connection: IConnection<eraseByOrgAndTeam_slugAndRole_id.Headers>,
  org: string,
  team_slug: string,
  role_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrgAndTeam_slugAndRole_id.simulate(
        connection,
        org,
        team_slug,
        role_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrgAndTeam_slugAndRole_id.METADATA,
          path: eraseByOrgAndTeam_slugAndRole_id.path(org, team_slug, role_id),
          status: null,
        },
      );
}
export namespace eraseByOrgAndTeam_slugAndRole_id {
  export type Headers = IApiOrgsOrganizationRolesTeams.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/organization-roles/teams/:team_slug/:role_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, team_slug: string, role_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/organization-roles/teams/${encodeURIComponent(team_slug ?? "null")}/${encodeURIComponent(role_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrgAndTeam_slugAndRole_id.Headers>,
    org: string,
    team_slug: string,
    role_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrgAndTeam_slugAndRole_id.path(org, team_slug, role_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("team_slug")(() => typia.assert(team_slug));
      assert.param("role_id")(() => typia.assert(role_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * List teams that are assigned to an organization role.
 * Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
 *
 * To use this endpoint, you must be an administrator for the organization.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/organization-roles/:role_id/teams
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndRole_id(
  connection: IConnection<getByOrgAndRole_id.Headers>,
  org: string,
  role_id: string,
): Promise<getByOrgAndRole_id.Output> {
  return !!connection.simulate
    ? getByOrgAndRole_id.simulate(connection, org, role_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndRole_id.METADATA,
          path: getByOrgAndRole_id.path(org, role_id),
          status: null,
        },
      );
}
export namespace getByOrgAndRole_id {
  export type Headers = IApiOrgsOrganizationRolesTeams.GetHeader;
  export type Output = team_minus_role_minus_assignment[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/organization-roles/:role_id/teams",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, role_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/organization-roles/${encodeURIComponent(role_id ?? "null")}/teams`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): team_minus_role_minus_assignment[] =>
    typia.random<team_minus_role_minus_assignment[]>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndRole_id.Headers>,
    org: string,
    role_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndRole_id.path(org, role_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("role_id")(() => typia.assert(role_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
