import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsPropertiesSchema } from "../../../../structures/IApiOrgsPropertiesSchema";
import { body } from "../../../../structures/body";
import { custom_minus_property } from "../../../../structures/custom_minus_property";

/**
 * Get all custom properties for an organization.
 * Gets all custom properties defined for an organization.
 * Organization members can read these properties.
 *
 * @tag orgs
 * @path orgs/:org/properties/schema
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsPropertiesSchema.GetHeader;
  export type Output = custom_minus_property[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/properties/schema",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/properties/schema`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): custom_minus_property[] => typia.random<custom_minus_property[]>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create or update custom properties for an organization.
 * Creates new or updates existing custom properties defined for an organization in a batch.
 *
 * To use this endpoint, the authenticated user must be one of:
 * - An administrator for the organization.
 * - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
 *
 * @tag orgs
 * @path orgs/:org/properties/schema
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOrg(
  connection: IConnection<patchByOrg.Headers>,
  org: string,
  body: patchByOrg.Input,
): Promise<patchByOrg.Output> {
  return !!connection.simulate
    ? patchByOrg.simulate(connection, org, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOrg.METADATA,
          path: patchByOrg.path(org),
          status: null,
        },
        body,
      );
}
export namespace patchByOrg {
  export type Headers = IApiOrgsPropertiesSchema.PatchHeader;
  export type Input = body;
  export type Output = custom_minus_property[];

  export const METADATA = {
    method: "PATCH",
    path: "/orgs/:org/properties/schema",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/properties/schema`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): custom_minus_property[] => typia.random<custom_minus_property[]>(g);
  export const simulate = (
    connection: IConnection<patchByOrg.Headers>,
    org: string,
    body: patchByOrg.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a custom property for an organization.
 * Gets a custom property that is defined for an organization.
 * Organization members can read these properties.
 *
 * @tag orgs
 * @path orgs/:org/properties/schema/:custom_property_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndCustom_property_name(
  connection: IConnection<getByOrgAndCustom_property_name.Headers>,
  org: string,
  custom_property_name: string,
): Promise<getByOrgAndCustom_property_name.Output> {
  return !!connection.simulate
    ? getByOrgAndCustom_property_name.simulate(
        connection,
        org,
        custom_property_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndCustom_property_name.METADATA,
          path: getByOrgAndCustom_property_name.path(org, custom_property_name),
          status: null,
        },
      );
}
export namespace getByOrgAndCustom_property_name {
  export type Headers = IApiOrgsPropertiesSchema.GetHeader;
  export type Output = custom_minus_property;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/properties/schema/:custom_property_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, custom_property_name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/properties/schema/${encodeURIComponent(custom_property_name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): custom_minus_property => typia.random<custom_minus_property>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndCustom_property_name.Headers>,
    org: string,
    custom_property_name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndCustom_property_name.path(org, custom_property_name),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("custom_property_name")(() =>
        typia.assert(custom_property_name),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create or update a custom property for an organization.
 * Creates a new or updates an existing custom property that is defined for an organization.
 *
 * To use this endpoint, the authenticated user must be one of:
 * - An administrator for the organization.
 * - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
 *
 * @tag orgs
 * @path orgs/:org/properties/schema/:custom_property_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOrgAndCustom_property_name(
  connection: IConnection<putByOrgAndCustom_property_name.Headers>,
  org: string,
  custom_property_name: string,
  body: putByOrgAndCustom_property_name.Input,
): Promise<putByOrgAndCustom_property_name.Output> {
  return !!connection.simulate
    ? putByOrgAndCustom_property_name.simulate(
        connection,
        org,
        custom_property_name,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrgAndCustom_property_name.METADATA,
          path: putByOrgAndCustom_property_name.path(org, custom_property_name),
          status: null,
        },
        body,
      );
}
export namespace putByOrgAndCustom_property_name {
  export type Headers = IApiOrgsPropertiesSchema.PutHeader;
  export type Input = body;
  export type Output = custom_minus_property;

  export const METADATA = {
    method: "PUT",
    path: "/orgs/:org/properties/schema/:custom_property_name",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, custom_property_name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/properties/schema/${encodeURIComponent(custom_property_name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): custom_minus_property => typia.random<custom_minus_property>(g);
  export const simulate = (
    connection: IConnection<putByOrgAndCustom_property_name.Headers>,
    org: string,
    custom_property_name: string,
    body: putByOrgAndCustom_property_name.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrgAndCustom_property_name.path(org, custom_property_name),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("custom_property_name")(() =>
        typia.assert(custom_property_name),
      );
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove a custom property for an organization.
 * Removes a custom property that is defined for an organization.
 *
 * To use this endpoint, the authenticated user must be one of:
 * - An administrator for the organization.
 * - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
 *
 * @tag orgs
 * @path orgs/:org/properties/schema/:custom_property_name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrgAndCustom_property_name(
  connection: IConnection<eraseByOrgAndCustom_property_name.Headers>,
  org: string,
  custom_property_name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrgAndCustom_property_name.simulate(
        connection,
        org,
        custom_property_name,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrgAndCustom_property_name.METADATA,
          path: eraseByOrgAndCustom_property_name.path(
            org,
            custom_property_name,
          ),
          status: null,
        },
      );
}
export namespace eraseByOrgAndCustom_property_name {
  export type Headers = IApiOrgsPropertiesSchema.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/properties/schema/:custom_property_name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, custom_property_name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/properties/schema/${encodeURIComponent(custom_property_name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrgAndCustom_property_name.Headers>,
    org: string,
    custom_property_name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrgAndCustom_property_name.path(org, custom_property_name),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("custom_property_name")(() =>
        typia.assert(custom_property_name),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
