import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsPropertiesValues } from "../../../../structures/IApiOrgsPropertiesValues";
import { body } from "../../../../structures/body";
import { org_minus_repo_minus_custom_minus_property_minus_values } from "../../../../structures/org_minus_repo_minus_custom_minus_property_minus_values";

/**
 * List custom property values for organization repositories.
 * Lists organization repositories with all of their custom property values.
 * Organization members can read these properties.
 *
 * @tag orgs
 * @path orgs/:org/properties/values
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
  query: getByOrg.Query,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org, query),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsPropertiesValues.GetHeader;
  export type Query = IApiOrgsPropertiesValues.GetQuery;
  export type Output =
    org_minus_repo_minus_custom_minus_property_minus_values[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/properties/values",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, query: getByOrg.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/orgs/${encodeURIComponent(org ?? "null")}/properties/values`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): org_minus_repo_minus_custom_minus_property_minus_values[] =>
    typia.random<org_minus_repo_minus_custom_minus_property_minus_values[]>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
    query: getByOrg.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org, query),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create or update custom property values for organization repositories.
 * Create new or update existing custom property values for repositories in a batch that belong to an organization.
 * Each target repository will have its custom property values updated to match the values provided in the request.
 *
 * A maximum of 30 repositories can be updated in a single request.
 *
 * Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
 *
 * To use this endpoint, the authenticated user must be one of:
 * - An administrator for the organization.
 * - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
 *
 * @tag orgs
 * @path orgs/:org/properties/values
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOrg(
  connection: IConnection<patchByOrg.Headers>,
  org: string,
  body: patchByOrg.Input,
): Promise<void> {
  return !!connection.simulate
    ? patchByOrg.simulate(connection, org, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOrg.METADATA,
          path: patchByOrg.path(org),
          status: null,
        },
        body,
      );
}
export namespace patchByOrg {
  export type Headers = IApiOrgsPropertiesValues.PatchHeader;
  export type Input = body;

  export const METADATA = {
    method: "PATCH",
    path: "/orgs/:org/properties/values",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/properties/values`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<patchByOrg.Headers>,
    org: string,
    body: patchByOrg.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
