import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiOrgsCodeSecurityConfigurationsRepositories } from "../../../../../structures/IApiOrgsCodeSecurityConfigurationsRepositories";
import { code_minus_security_minus_configuration_minus_repositories } from "../../../../../structures/code_minus_security_minus_configuration_minus_repositories";
/**
 * Get repositories associated with a code security configuration.
 * Lists the repositories associated with a code security configuration in an organization.
 *
 * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag code-security
 * @path orgs/:org/code-security/configurations/:configuration_id/repositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndConfiguration_id(
  connection: IConnection<getByOrgAndConfiguration_id.Headers>,
  org: string,
  configuration_id: string,
  query: getByOrgAndConfiguration_id.Query,
): Promise<getByOrgAndConfiguration_id.Output> {
  return !!connection.simulate
    ? getByOrgAndConfiguration_id.simulate(
        connection,
        org,
        configuration_id,
        query,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndConfiguration_id.METADATA,
          path: getByOrgAndConfiguration_id.path(org, configuration_id, query),
          status: null,
        },
      );
}
export namespace getByOrgAndConfiguration_id {
  export type Headers =
    IApiOrgsCodeSecurityConfigurationsRepositories.GetHeader;
  export type Query = IApiOrgsCodeSecurityConfigurationsRepositories.GetQuery;
  export type Output =
    code_minus_security_minus_configuration_minus_repositories[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/code-security/configurations/:configuration_id/repositories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    org: string,
    configuration_id: string,
    query: getByOrgAndConfiguration_id.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/orgs/${encodeURIComponent(org ?? "null")}/code-security/configurations/${encodeURIComponent(configuration_id ?? "null")}/repositories`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_security_minus_configuration_minus_repositories[] =>
    typia.random<code_minus_security_minus_configuration_minus_repositories[]>(
      g,
    );
  export const simulate = (
    connection: IConnection<getByOrgAndConfiguration_id.Headers>,
    org: string,
    configuration_id: string,
    query: getByOrgAndConfiguration_id.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndConfiguration_id.path(org, configuration_id, query),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("configuration_id")(() => typia.assert(configuration_id));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
