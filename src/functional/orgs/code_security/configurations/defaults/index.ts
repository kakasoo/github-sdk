import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiOrgsCodeSecurityConfigurationsDefaults } from "../../../../../structures/IApiOrgsCodeSecurityConfigurationsDefaults";
import { code_minus_security_minus_default_minus_configurations } from "../../../../../structures/code_minus_security_minus_default_minus_configurations";
import { body } from "../../../../../structures/body";
import { response } from "../../../../../structures/response";
/**
 * Get default code security configurations.
 * Lists the default code security configurations for an organization.
 *
 * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag code-security
 * @path orgs/:org/code-security/configurations/defaults
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsCodeSecurityConfigurationsDefaults.GetHeader;
  export type Output = code_minus_security_minus_default_minus_configurations;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/code-security/configurations/defaults",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/code-security/configurations/defaults`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_security_minus_default_minus_configurations =>
    typia.random<code_minus_security_minus_default_minus_configurations>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Set a code security configuration as a default for an organization.
 * Sets a code security configuration as a default to be applied to new repositories in your organization.
 *
 * This configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created.
 *
 * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag code-security
 * @path orgs/:org/code-security/configurations/:configuration_id/defaults
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOrgAndConfiguration_id(
  connection: IConnection<putByOrgAndConfiguration_id.Headers>,
  org: string,
  configuration_id: string,
  body: putByOrgAndConfiguration_id.Input,
): Promise<putByOrgAndConfiguration_id.Output> {
  return !!connection.simulate
    ? putByOrgAndConfiguration_id.simulate(
        connection,
        org,
        configuration_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrgAndConfiguration_id.METADATA,
          path: putByOrgAndConfiguration_id.path(org, configuration_id),
          status: null,
        },
        body,
      );
}
export namespace putByOrgAndConfiguration_id {
  export type Headers = IApiOrgsCodeSecurityConfigurationsDefaults.PutHeader;
  export type Input = body;
  export type Output = response;

  export const METADATA = {
    method: "PUT",
    path: "/orgs/:org/code-security/configurations/:configuration_id/defaults",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, configuration_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/code-security/configurations/${encodeURIComponent(configuration_id ?? "null")}/defaults`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<putByOrgAndConfiguration_id.Headers>,
    org: string,
    configuration_id: string,
    body: putByOrgAndConfiguration_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrgAndConfiguration_id.path(org, configuration_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("configuration_id")(() => typia.assert(configuration_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
