import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiOrgsCodeSecurityConfigurations } from "../../../../structures/IApiOrgsCodeSecurityConfigurations";
import { code_minus_security_minus_configuration } from "../../../../structures/code_minus_security_minus_configuration";
import { body } from "../../../../structures/body";
export * as defaults from "./defaults";
export * as detach from "./detach";
export * as attach from "./attach";
export * as repositories from "./repositories";
/**
 * Get code security configurations for an organization.
 * Lists all code security configurations available in an organization.
 *
 * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag code-security
 * @path orgs/:org/code-security/configurations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
  query: getByOrg.Query,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org, query),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsCodeSecurityConfigurations.GetHeader;
  export type Query = IApiOrgsCodeSecurityConfigurations.GetQuery;
  export type Output = code_minus_security_minus_configuration[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/code-security/configurations",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, query: getByOrg.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/orgs/${encodeURIComponent(org ?? "null")}/code-security/configurations`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_security_minus_configuration[] =>
    typia.random<code_minus_security_minus_configuration[]>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
    query: getByOrg.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org, query),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a code security configuration.
 * Creates a code security configuration in an organization.
 *
 * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag code-security
 * @path orgs/:org/code-security/configurations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOrg(
  connection: IConnection<postByOrg.Headers>,
  org: string,
  body: postByOrg.Input,
): Promise<postByOrg.Output> {
  return !!connection.simulate
    ? postByOrg.simulate(connection, org, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOrg.METADATA,
          path: postByOrg.path(org),
          status: null,
        },
        body,
      );
}
export namespace postByOrg {
  export type Headers = IApiOrgsCodeSecurityConfigurations.PostHeader;
  export type Input = body;
  export type Output = code_minus_security_minus_configuration;

  export const METADATA = {
    method: "POST",
    path: "/orgs/:org/code-security/configurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/code-security/configurations`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_security_minus_configuration =>
    typia.random<code_minus_security_minus_configuration>(g);
  export const simulate = (
    connection: IConnection<postByOrg.Headers>,
    org: string,
    body: postByOrg.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a code security configuration.
 * Gets a code security configuration available in an organization.
 *
 * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag code-security
 * @path orgs/:org/code-security/configurations/:configuration_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndConfiguration_id(
  connection: IConnection<getByOrgAndConfiguration_id.Headers>,
  org: string,
  configuration_id: string,
): Promise<getByOrgAndConfiguration_id.Output> {
  return !!connection.simulate
    ? getByOrgAndConfiguration_id.simulate(connection, org, configuration_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndConfiguration_id.METADATA,
          path: getByOrgAndConfiguration_id.path(org, configuration_id),
          status: null,
        },
      );
}
export namespace getByOrgAndConfiguration_id {
  export type Headers = IApiOrgsCodeSecurityConfigurations.GetHeader;
  export type Output = code_minus_security_minus_configuration;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/code-security/configurations/:configuration_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, configuration_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/code-security/configurations/${encodeURIComponent(configuration_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_security_minus_configuration =>
    typia.random<code_minus_security_minus_configuration>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndConfiguration_id.Headers>,
    org: string,
    configuration_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndConfiguration_id.path(org, configuration_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("configuration_id")(() => typia.assert(configuration_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a code security configuration.
 * Updates a code security configuration in an organization.
 *
 * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag code-security
 * @path orgs/:org/code-security/configurations/:configuration_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOrgAndConfiguration_id(
  connection: IConnection<patchByOrgAndConfiguration_id.Headers>,
  org: string,
  configuration_id: string,
  body: patchByOrgAndConfiguration_id.Input,
): Promise<patchByOrgAndConfiguration_id.Output> {
  return !!connection.simulate
    ? patchByOrgAndConfiguration_id.simulate(
        connection,
        org,
        configuration_id,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOrgAndConfiguration_id.METADATA,
          path: patchByOrgAndConfiguration_id.path(org, configuration_id),
          status: null,
        },
        body,
      );
}
export namespace patchByOrgAndConfiguration_id {
  export type Headers = IApiOrgsCodeSecurityConfigurations.PatchHeader;
  export type Input = body;
  export type Output = code_minus_security_minus_configuration;

  export const METADATA = {
    method: "PATCH",
    path: "/orgs/:org/code-security/configurations/:configuration_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, configuration_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/code-security/configurations/${encodeURIComponent(configuration_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_security_minus_configuration =>
    typia.random<code_minus_security_minus_configuration>(g);
  export const simulate = (
    connection: IConnection<patchByOrgAndConfiguration_id.Headers>,
    org: string,
    configuration_id: string,
    body: patchByOrgAndConfiguration_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOrgAndConfiguration_id.path(org, configuration_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("configuration_id")(() => typia.assert(configuration_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a code security configuration.
 * Deletes the desired code security configuration from an organization.
 * Repositories attached to the configuration will retain their settings but will no longer be associated with
 * the configuration.
 *
 * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag code-security
 * @path orgs/:org/code-security/configurations/:configuration_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrgAndConfiguration_id(
  connection: IConnection<eraseByOrgAndConfiguration_id.Headers>,
  org: string,
  configuration_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrgAndConfiguration_id.simulate(connection, org, configuration_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrgAndConfiguration_id.METADATA,
          path: eraseByOrgAndConfiguration_id.path(org, configuration_id),
          status: null,
        },
      );
}
export namespace eraseByOrgAndConfiguration_id {
  export type Headers = IApiOrgsCodeSecurityConfigurations.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/code-security/configurations/:configuration_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, configuration_id: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/code-security/configurations/${encodeURIComponent(configuration_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrgAndConfiguration_id.Headers>,
    org: string,
    configuration_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrgAndConfiguration_id.path(org, configuration_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("configuration_id")(() => typia.assert(configuration_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
