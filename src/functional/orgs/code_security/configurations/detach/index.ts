import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiOrgsCodeSecurityConfigurationsDetach } from "../../../../../structures/IApiOrgsCodeSecurityConfigurationsDetach";
import { body } from "../../../../../structures/body";
/**
 * Detach configurations from repositories.
 * Detach code security configuration(s) from a set of repositories.
 * Repositories will retain their settings but will no longer be associated with the configuration.
 *
 * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag code-security
 * @path orgs/:org/code-security/configurations/detach
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrg(
  connection: IConnection<eraseByOrg.Headers>,
  org: string,
  body: eraseByOrg.Input,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrg.simulate(connection, org, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrg.METADATA,
          path: eraseByOrg.path(org),
          status: null,
        },
        body,
      );
}
export namespace eraseByOrg {
  export type Headers = IApiOrgsCodeSecurityConfigurationsDetach.DeleteHeader;
  export type Input = body;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/code-security/configurations/detach",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/code-security/configurations/detach`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrg.Headers>,
    org: string,
    body: eraseByOrg.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
