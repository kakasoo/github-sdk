import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";

import { IApiOrgsActionsVariablesRepositories } from "../../../../../structures/IApiOrgsActionsVariablesRepositories";
import { body } from "../../../../../structures/body";
import { response } from "../../../../../structures/response";

/**
 * List selected repositories for an organization variable.
 * Lists all repositories that can access an organization variable
 * that is available to selected repositories.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
 *
 * @tag actions
 * @path orgs/:org/actions/variables/:name/repositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndName(
  connection: IConnection<getByOrgAndName.Headers>,
  org: string,
  name: string,
): Promise<getByOrgAndName.Output> {
  return !!connection.simulate
    ? getByOrgAndName.simulate(connection, org, name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndName.METADATA,
          path: getByOrgAndName.path(org, name),
          status: null,
        },
      );
}
export namespace getByOrgAndName {
  export type Headers = IApiOrgsActionsVariablesRepositories.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/actions/variables/:name/repositories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/variables/${encodeURIComponent(name ?? "null")}/repositories`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndName.Headers>,
    org: string,
    name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndName.path(org, name),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("name")(() => typia.assert(name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Set selected repositories for an organization variable.
 * Replaces all repositories for an organization variable that is available
 * to selected repositories. Organization variables that are available to selected
 * repositories have their `visibility` field set to `selected`.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
 *
 * @tag actions
 * @path orgs/:org/actions/variables/:name/repositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOrgAndName(
  connection: IConnection<putByOrgAndName.Headers>,
  org: string,
  name: string,
  body: putByOrgAndName.Input,
): Promise<void> {
  return !!connection.simulate
    ? putByOrgAndName.simulate(connection, org, name, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrgAndName.METADATA,
          path: putByOrgAndName.path(org, name),
          status: null,
        },
        body,
      );
}
export namespace putByOrgAndName {
  export type Headers = IApiOrgsActionsVariablesRepositories.PutHeader;
  export type Input = body;

  export const METADATA = {
    method: "PUT",
    path: "/orgs/:org/actions/variables/:name/repositories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/variables/${encodeURIComponent(name ?? "null")}/repositories`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putByOrgAndName.Headers>,
    org: string,
    name: string,
    body: putByOrgAndName.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrgAndName.path(org, name),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("name")(() => typia.assert(name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Add selected repository to an organization variable.
 * Adds a repository to an organization variable that is available to selected repositories.
 * Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path orgs/:org/actions/variables/:name/repositories/:repository_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOrgAndNameAndRepository_id(
  connection: IConnection<putByOrgAndNameAndRepository_id.Headers>,
  org: string,
  name: string,
  repository_id: number & tags.Type<"int32">,
): Promise<void> {
  return !!connection.simulate
    ? putByOrgAndNameAndRepository_id.simulate(
        connection,
        org,
        name,
        repository_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrgAndNameAndRepository_id.METADATA,
          path: putByOrgAndNameAndRepository_id.path(org, name, repository_id),
          status: null,
        },
      );
}
export namespace putByOrgAndNameAndRepository_id {
  export type Headers = IApiOrgsActionsVariablesRepositories.PutHeader;

  export const METADATA = {
    method: "PUT",
    path: "/orgs/:org/actions/variables/:name/repositories/:repository_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    org: string,
    name: string,
    repository_id: number & tags.Type<"int32">,
  ) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/variables/${encodeURIComponent(name ?? "null")}/repositories/${encodeURIComponent(repository_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putByOrgAndNameAndRepository_id.Headers>,
    org: string,
    name: string,
    repository_id: number & tags.Type<"int32">,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrgAndNameAndRepository_id.path(org, name, repository_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("name")(() => typia.assert(name));
      assert.param("repository_id")(() => typia.assert(repository_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove selected repository from an organization variable.
 * Removes a repository from an organization variable that is
 * available to selected repositories. Organization variables that are available to
 * selected repositories have their `visibility` field set to `selected`.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
 *
 * @tag actions
 * @path orgs/:org/actions/variables/:name/repositories/:repository_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrgAndNameAndRepository_id(
  connection: IConnection<eraseByOrgAndNameAndRepository_id.Headers>,
  org: string,
  name: string,
  repository_id: number & tags.Type<"int32">,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrgAndNameAndRepository_id.simulate(
        connection,
        org,
        name,
        repository_id,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrgAndNameAndRepository_id.METADATA,
          path: eraseByOrgAndNameAndRepository_id.path(
            org,
            name,
            repository_id,
          ),
          status: null,
        },
      );
}
export namespace eraseByOrgAndNameAndRepository_id {
  export type Headers = IApiOrgsActionsVariablesRepositories.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/actions/variables/:name/repositories/:repository_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    org: string,
    name: string,
    repository_id: number & tags.Type<"int32">,
  ) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/variables/${encodeURIComponent(name ?? "null")}/repositories/${encodeURIComponent(repository_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrgAndNameAndRepository_id.Headers>,
    org: string,
    name: string,
    repository_id: number & tags.Type<"int32">,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrgAndNameAndRepository_id.path(org, name, repository_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("name")(() => typia.assert(name));
      assert.param("repository_id")(() => typia.assert(repository_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
