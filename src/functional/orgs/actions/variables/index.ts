import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsActionsVariables } from "../../../../structures/IApiOrgsActionsVariables";
import { body } from "../../../../structures/body";
import { empty_minus_object } from "../../../../structures/empty_minus_object";
import { organization_minus_actions_minus_variable } from "../../../../structures/organization_minus_actions_minus_variable";
import { response } from "../../../../structures/response";

export * as repositories from "./repositories";
/**
 * List organization variables.
 * Lists all organization variables.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
 *
 * @tag actions
 * @path orgs/:org/actions/variables
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsActionsVariables.GetHeader;
  export type Output = response;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/actions/variables",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/variables`;
  export const random = (g?: Partial<typia.IRandomGenerator>): response =>
    typia.random<response>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create an organization variable.
 * Creates an organization variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path orgs/:org/actions/variables
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOrg(
  connection: IConnection<postByOrg.Headers>,
  org: string,
  body: postByOrg.Input,
): Promise<postByOrg.Output> {
  return !!connection.simulate
    ? postByOrg.simulate(connection, org, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOrg.METADATA,
          path: postByOrg.path(org),
          status: null,
        },
        body,
      );
}
export namespace postByOrg {
  export type Headers = IApiOrgsActionsVariables.PostHeader;
  export type Input = body;
  export type Output = empty_minus_object;

  export const METADATA = {
    method: "POST",
    path: "/orgs/:org/actions/variables",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/variables`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): empty_minus_object => typia.random<empty_minus_object>(g);
  export const simulate = (
    connection: IConnection<postByOrg.Headers>,
    org: string,
    body: postByOrg.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get an organization variable.
 * Gets a specific variable in an organization.
 *
 * The authenticated user must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path orgs/:org/actions/variables/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrgAndName(
  connection: IConnection<getByOrgAndName.Headers>,
  org: string,
  name: string,
): Promise<getByOrgAndName.Output> {
  return !!connection.simulate
    ? getByOrgAndName.simulate(connection, org, name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrgAndName.METADATA,
          path: getByOrgAndName.path(org, name),
          status: null,
        },
      );
}
export namespace getByOrgAndName {
  export type Headers = IApiOrgsActionsVariables.GetHeader;
  export type Output = organization_minus_actions_minus_variable;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/actions/variables/:name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/variables/${encodeURIComponent(name ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): organization_minus_actions_minus_variable =>
    typia.random<organization_minus_actions_minus_variable>(g);
  export const simulate = (
    connection: IConnection<getByOrgAndName.Headers>,
    org: string,
    name: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrgAndName.path(org, name),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("name")(() => typia.assert(name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update an organization variable.
 * Updates an organization variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
 *
 * @tag actions
 * @path orgs/:org/actions/variables/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByOrgAndName(
  connection: IConnection<patchByOrgAndName.Headers>,
  org: string,
  name: string,
  body: patchByOrgAndName.Input,
): Promise<void> {
  return !!connection.simulate
    ? patchByOrgAndName.simulate(connection, org, name, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOrgAndName.METADATA,
          path: patchByOrgAndName.path(org, name),
          status: null,
        },
        body,
      );
}
export namespace patchByOrgAndName {
  export type Headers = IApiOrgsActionsVariables.PatchHeader;
  export type Input = body;

  export const METADATA = {
    method: "PATCH",
    path: "/orgs/:org/actions/variables/:name",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/variables/${encodeURIComponent(name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<patchByOrgAndName.Headers>,
    org: string,
    name: string,
    body: patchByOrgAndName.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOrgAndName.path(org, name),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("name")(() => typia.assert(name));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete an organization variable.
 * Deletes an organization variable using the variable name.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 *
 * @tag actions
 * @path orgs/:org/actions/variables/:name
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByOrgAndName(
  connection: IConnection<eraseByOrgAndName.Headers>,
  org: string,
  name: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByOrgAndName.simulate(connection, org, name)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByOrgAndName.METADATA,
          path: eraseByOrgAndName.path(org, name),
          status: null,
        },
      );
}
export namespace eraseByOrgAndName {
  export type Headers = IApiOrgsActionsVariables.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/orgs/:org/actions/variables/:name",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string, name: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/variables/${encodeURIComponent(name ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByOrgAndName.Headers>,
    org: string,
    name: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByOrgAndName.path(org, name),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("name")(() => typia.assert(name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
