import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiOrgsActionsOidcCustomizationSub } from "../../../../../../structures/IApiOrgsActionsOidcCustomizationSub";
import { empty_minus_object } from "../../../../../../structures/empty_minus_object";
import { oidc_minus_custom_minus_sub } from "../../../../../../structures/oidc_minus_custom_minus_sub";

/**
 * Get the customization template for an OIDC subject claim for an organization.
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
 *
 * @tag oidc
 * @path orgs/:org/actions/oidc/customization/sub
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsActionsOidcCustomizationSub.GetHeader;
  export type Output = oidc_minus_custom_minus_sub;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/actions/oidc/customization/sub",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/oidc/customization/sub`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): oidc_minus_custom_minus_sub =>
    typia.random<oidc_minus_custom_minus_sub>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Set the customization template for an OIDC subject claim for an organization.
 * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 *
 * @tag oidc
 * @path orgs/:org/actions/oidc/customization/sub
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOrg(
  connection: IConnection<putByOrg.Headers>,
  org: string,
  body: putByOrg.Input,
): Promise<putByOrg.Output> {
  return !!connection.simulate
    ? putByOrg.simulate(connection, org, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrg.METADATA,
          path: putByOrg.path(org),
          status: null,
        },
        body,
      );
}
export namespace putByOrg {
  export type Headers = IApiOrgsActionsOidcCustomizationSub.PutHeader;
  export type Input = oidc_minus_custom_minus_sub;
  export type Output = empty_minus_object;

  export const METADATA = {
    method: "PUT",
    path: "/orgs/:org/actions/oidc/customization/sub",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/oidc/customization/sub`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): empty_minus_object => typia.random<empty_minus_object>(g);
  export const simulate = (
    connection: IConnection<putByOrg.Headers>,
    org: string,
    body: putByOrg.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
