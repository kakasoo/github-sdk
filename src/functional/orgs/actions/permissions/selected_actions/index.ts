import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiOrgsActionsPermissionsSelectedActions } from "../../../../../structures/IApiOrgsActionsPermissionsSelectedActions";
import { selected_minus_actions } from "../../../../../structures/selected_minus_actions";
/**
 * Get allowed actions and reusable workflows for an organization.
 * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag actions
 * @path orgs/:org/actions/permissions/selected-actions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsActionsPermissionsSelectedActions.GetHeader;
  export type Output = selected_minus_actions;

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/actions/permissions/selected-actions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/permissions/selected-actions`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): selected_minus_actions => typia.random<selected_minus_actions>(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Set allowed actions and reusable workflows for an organization.
 * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 *
 * @tag actions
 * @path orgs/:org/actions/permissions/selected-actions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByOrg(
  connection: IConnection<putByOrg.Headers>,
  org: string,
  body: putByOrg.Input,
): Promise<void> {
  return !!connection.simulate
    ? putByOrg.simulate(connection, org, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrg.METADATA,
          path: putByOrg.path(org),
          status: null,
        },
        body,
      );
}
export namespace putByOrg {
  export type Headers = IApiOrgsActionsPermissionsSelectedActions.PutHeader;
  export type Input = selected_minus_actions;

  export const METADATA = {
    method: "PUT",
    path: "/orgs/:org/actions/permissions/selected-actions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/actions/permissions/selected-actions`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putByOrg.Headers>,
    org: string,
    body: putByOrg.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
