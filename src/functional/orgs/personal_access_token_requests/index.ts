import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";

import { IApiOrgsPersonalAccessTokenRequests } from "../../../structures/IApiOrgsPersonalAccessTokenRequests";
import { body } from "../../../structures/body";
import { organization_minus_programmatic_minus_access_minus_grant_minus_request } from "../../../structures/organization_minus_programmatic_minus_access_minus_grant_minus_request";

export * as repositories from "./repositories";
/**
 * List requests to access organization resources with fine-grained personal access tokens.
 * Lists requests from organization members to access organization resources with a fine-grained personal access token.
 *
 * Only GitHub Apps can use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/personal-access-token-requests
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByOrg(
  connection: IConnection<getByOrg.Headers>,
  org: string,
): Promise<getByOrg.Output> {
  return !!connection.simulate
    ? getByOrg.simulate(connection, org)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByOrg.METADATA,
          path: getByOrg.path(org),
          status: null,
        },
      );
}
export namespace getByOrg {
  export type Headers = IApiOrgsPersonalAccessTokenRequests.GetHeader;
  export type Output =
    organization_minus_programmatic_minus_access_minus_grant_minus_request[];

  export const METADATA = {
    method: "GET",
    path: "/orgs/:org/personal-access-token-requests",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/personal-access-token-requests`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): organization_minus_programmatic_minus_access_minus_grant_minus_request[] =>
    typia.random<
      organization_minus_programmatic_minus_access_minus_grant_minus_request[]
    >(g);
  export const simulate = (
    connection: IConnection<getByOrg.Headers>,
    org: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Review requests to access organization resources with fine-grained personal access tokens.
 * Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.
 *
 * Only GitHub Apps can use this endpoint.
 *
 * @tag orgs
 * @path orgs/:org/personal-access-token-requests
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOrg(
  connection: IConnection<postByOrg.Headers>,
  org: string,
  body: postByOrg.Input,
): Promise<void> {
  return !!connection.simulate
    ? postByOrg.simulate(connection, org, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOrg.METADATA,
          path: postByOrg.path(org),
          status: null,
        },
        body,
      );
}
export namespace postByOrg {
  export type Headers = IApiOrgsPersonalAccessTokenRequests.PostHeader;
  export type Input = body;

  export const METADATA = {
    method: "POST",
    path: "/orgs/:org/personal-access-token-requests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (org: string) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/personal-access-token-requests`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<postByOrg.Headers>,
    org: string,
    body: postByOrg.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOrg.path(org),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Review a request to access organization resources with a fine-grained personal access token.
 * Approves or denies a pending request to access organization resources via a fine-grained personal access token.
 *
 * Only GitHub Apps can use this endpoint.
 *
 * @param pat_request_id Unique identifier of the request for access via fine-grained personal access token.
 * @tag orgs
 * @path orgs/:org/personal-access-token-requests/:pat_request_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByOrgAndPat_request_id(
  connection: IConnection<postByOrgAndPat_request_id.Headers>,
  org: string,
  pat_request_id: number & tags.Type<"int32">,
  body: postByOrgAndPat_request_id.Input,
): Promise<void> {
  return !!connection.simulate
    ? postByOrgAndPat_request_id.simulate(connection, org, pat_request_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByOrgAndPat_request_id.METADATA,
          path: postByOrgAndPat_request_id.path(org, pat_request_id),
          status: null,
        },
        body,
      );
}
export namespace postByOrgAndPat_request_id {
  export type Headers = IApiOrgsPersonalAccessTokenRequests.PostHeader;
  export type Input = body;

  export const METADATA = {
    method: "POST",
    path: "/orgs/:org/personal-access-token-requests/:pat_request_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    org: string,
    pat_request_id: number & tags.Type<"int32">,
  ) =>
    `/orgs/${encodeURIComponent(org ?? "null")}/personal-access-token-requests/${encodeURIComponent(pat_request_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<postByOrgAndPat_request_id.Headers>,
    org: string,
    pat_request_id: number & tags.Type<"int32">,
    body: postByOrgAndPat_request_id.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByOrgAndPat_request_id.path(org, pat_request_id),
      contentType: "application/json",
    });
    try {
      assert.param("org")(() => typia.assert(org));
      assert.param("pat_request_id")(() => typia.assert(pat_request_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
