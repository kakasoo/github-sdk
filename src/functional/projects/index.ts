import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiProjects } from "../../structures/IApiProjects";
import { body } from "../../structures/body";
import { project } from "../../structures/project";

export * as columns from "./columns";
export * as collaborators from "./collaborators";
/**
 * Get a project.
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 *
 * @tag projects
 * @path projects/:project_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByProject_id(
  connection: IConnection<getByProject_id.Headers>,
  project_id: string,
): Promise<getByProject_id.Output> {
  return !!connection.simulate
    ? getByProject_id.simulate(connection, project_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByProject_id.METADATA,
          path: getByProject_id.path(project_id),
          status: null,
        },
      );
}
export namespace getByProject_id {
  export type Headers = IApiProjects.GetHeader;
  export type Output = project;

  export const METADATA = {
    method: "GET",
    path: "/projects/:project_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (project_id: string) =>
    `/projects/${encodeURIComponent(project_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): project =>
    typia.random<project>(g);
  export const simulate = (
    connection: IConnection<getByProject_id.Headers>,
    project_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByProject_id.path(project_id),
      contentType: "application/json",
    });
    try {
      assert.param("project_id")(() => typia.assert(project_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Update a project.
 * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 *
 * @tag projects
 * @path projects/:project_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByProject_id(
  connection: IConnection<patchByProject_id.Headers>,
  project_id: string,
  body: patchByProject_id.Input,
): Promise<patchByProject_id.Output> {
  return !!connection.simulate
    ? patchByProject_id.simulate(connection, project_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByProject_id.METADATA,
          path: patchByProject_id.path(project_id),
          status: null,
        },
        body,
      );
}
export namespace patchByProject_id {
  export type Headers = IApiProjects.PatchHeader;
  export type Input = body;
  export type Output = project;

  export const METADATA = {
    method: "PATCH",
    path: "/projects/:project_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (project_id: string) =>
    `/projects/${encodeURIComponent(project_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): project =>
    typia.random<project>(g);
  export const simulate = (
    connection: IConnection<patchByProject_id.Headers>,
    project_id: string,
    body: patchByProject_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByProject_id.path(project_id),
      contentType: "application/json",
    });
    try {
      assert.param("project_id")(() => typia.assert(project_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a project.
 * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
 *
 * @tag projects
 * @path projects/:project_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByProject_id(
  connection: IConnection<eraseByProject_id.Headers>,
  project_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByProject_id.simulate(connection, project_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByProject_id.METADATA,
          path: eraseByProject_id.path(project_id),
          status: null,
        },
      );
}
export namespace eraseByProject_id {
  export type Headers = IApiProjects.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/projects/:project_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (project_id: string) =>
    `/projects/${encodeURIComponent(project_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByProject_id.Headers>,
    project_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByProject_id.path(project_id),
      contentType: "application/json",
    });
    try {
      assert.param("project_id")(() => typia.assert(project_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
