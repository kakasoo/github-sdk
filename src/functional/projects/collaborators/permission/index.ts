import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiProjectsCollaboratorsPermission } from "../../../../structures/IApiProjectsCollaboratorsPermission";
import { project_minus_collaborator_minus_permission } from "../../../../structures/project_minus_collaborator_minus_permission";

/**
 * Get project permission for a user.
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 *
 * @tag projects
 * @path projects/:project_id/collaborators/:username/permission
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByProject_idAndUsername(
  connection: IConnection<getByProject_idAndUsername.Headers>,
  project_id: string,
  username: string,
): Promise<getByProject_idAndUsername.Output> {
  return !!connection.simulate
    ? getByProject_idAndUsername.simulate(connection, project_id, username)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByProject_idAndUsername.METADATA,
          path: getByProject_idAndUsername.path(project_id, username),
          status: null,
        },
      );
}
export namespace getByProject_idAndUsername {
  export type Headers = IApiProjectsCollaboratorsPermission.GetHeader;
  export type Output = project_minus_collaborator_minus_permission;

  export const METADATA = {
    method: "GET",
    path: "/projects/:project_id/collaborators/:username/permission",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (project_id: string, username: string) =>
    `/projects/${encodeURIComponent(project_id ?? "null")}/collaborators/${encodeURIComponent(username ?? "null")}/permission`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): project_minus_collaborator_minus_permission =>
    typia.random<project_minus_collaborator_minus_permission>(g);
  export const simulate = (
    connection: IConnection<getByProject_idAndUsername.Headers>,
    project_id: string,
    username: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByProject_idAndUsername.path(project_id, username),
      contentType: "application/json",
    });
    try {
      assert.param("project_id")(() => typia.assert(project_id));
      assert.param("username")(() => typia.assert(username));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
