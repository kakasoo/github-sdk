import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiProjectsColumnsCards } from "../../../../structures/IApiProjectsColumnsCards";
import { body } from "../../../../structures/body";
import { project_minus_card } from "../../../../structures/project_minus_card";

export * as moves from "./moves";
/**
 * Get a project card.
 * Gets information about a project card.
 *
 * @tag projects
 * @path projects/columns/cards/:card_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByCard_id(
  connection: IConnection<getByCard_id.Headers>,
  card_id: string,
): Promise<getByCard_id.Output> {
  return !!connection.simulate
    ? getByCard_id.simulate(connection, card_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByCard_id.METADATA,
          path: getByCard_id.path(card_id),
          status: null,
        },
      );
}
export namespace getByCard_id {
  export type Headers = IApiProjectsColumnsCards.GetHeader;
  export type Output = project_minus_card;

  export const METADATA = {
    method: "GET",
    path: "/projects/columns/cards/:card_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (card_id: string) =>
    `/projects/columns/cards/${encodeURIComponent(card_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): project_minus_card => typia.random<project_minus_card>(g);
  export const simulate = (
    connection: IConnection<getByCard_id.Headers>,
    card_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByCard_id.path(card_id),
      contentType: "application/json",
    });
    try {
      assert.param("card_id")(() => typia.assert(card_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag projects
 * @path projects/columns/cards/:card_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByCard_id(
  connection: IConnection<patchByCard_id.Headers>,
  card_id: string,
  body: patchByCard_id.Input,
): Promise<patchByCard_id.Output> {
  return !!connection.simulate
    ? patchByCard_id.simulate(connection, card_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByCard_id.METADATA,
          path: patchByCard_id.path(card_id),
          status: null,
        },
        body,
      );
}
export namespace patchByCard_id {
  export type Headers = IApiProjectsColumnsCards.PatchHeader;
  export type Input = body;
  export type Output = project_minus_card;

  export const METADATA = {
    method: "PATCH",
    path: "/projects/columns/cards/:card_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (card_id: string) =>
    `/projects/columns/cards/${encodeURIComponent(card_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): project_minus_card => typia.random<project_minus_card>(g);
  export const simulate = (
    connection: IConnection<patchByCard_id.Headers>,
    card_id: string,
    body: patchByCard_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByCard_id.path(card_id),
      contentType: "application/json",
    });
    try {
      assert.param("card_id")(() => typia.assert(card_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a project card.
 * Deletes a project card
 *
 * @tag projects
 * @path projects/columns/cards/:card_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByCard_id(
  connection: IConnection<eraseByCard_id.Headers>,
  card_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByCard_id.simulate(connection, card_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByCard_id.METADATA,
          path: eraseByCard_id.path(card_id),
          status: null,
        },
      );
}
export namespace eraseByCard_id {
  export type Headers = IApiProjectsColumnsCards.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/projects/columns/cards/:card_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (card_id: string) =>
    `/projects/columns/cards/${encodeURIComponent(card_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByCard_id.Headers>,
    card_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByCard_id.path(card_id),
      contentType: "application/json",
    });
    try {
      assert.param("card_id")(() => typia.assert(card_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * List project cards.
 * Lists the project cards in a project.
 *
 * @tag projects
 * @path projects/columns/:column_id/cards
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByColumn_id(
  connection: IConnection<getByColumn_id.Headers>,
  column_id: string,
  query: getByColumn_id.Query,
): Promise<getByColumn_id.Output> {
  return !!connection.simulate
    ? getByColumn_id.simulate(connection, column_id, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByColumn_id.METADATA,
          path: getByColumn_id.path(column_id, query),
          status: null,
        },
      );
}
export namespace getByColumn_id {
  export type Headers = IApiProjectsColumnsCards.GetHeader;
  export type Query = IApiProjectsColumnsCards.GetQuery;
  export type Output = project_minus_card[];

  export const METADATA = {
    method: "GET",
    path: "/projects/columns/:column_id/cards",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (column_id: string, query: getByColumn_id.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/projects/columns/${encodeURIComponent(column_id ?? "null")}/cards`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): project_minus_card[] => typia.random<project_minus_card[]>(g);
  export const simulate = (
    connection: IConnection<getByColumn_id.Headers>,
    column_id: string,
    query: getByColumn_id.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByColumn_id.path(column_id, query),
      contentType: "application/json",
    });
    try {
      assert.param("column_id")(() => typia.assert(column_id));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag projects
 * @path projects/columns/:column_id/cards
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByColumn_id(
  connection: IConnection<postByColumn_id.Headers>,
  column_id: string,
  body: postByColumn_id.Input,
): Promise<postByColumn_id.Output> {
  return !!connection.simulate
    ? postByColumn_id.simulate(connection, column_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByColumn_id.METADATA,
          path: postByColumn_id.path(column_id),
          status: null,
        },
        body,
      );
}
export namespace postByColumn_id {
  export type Headers = IApiProjectsColumnsCards.PostHeader;
  export type Input = body;
  export type Output = project_minus_card;

  export const METADATA = {
    method: "POST",
    path: "/projects/columns/:column_id/cards",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (column_id: string) =>
    `/projects/columns/${encodeURIComponent(column_id ?? "null")}/cards`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): project_minus_card => typia.random<project_minus_card>(g);
  export const simulate = (
    connection: IConnection<postByColumn_id.Headers>,
    column_id: string,
    body: postByColumn_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByColumn_id.path(column_id),
      contentType: "application/json",
    });
    try {
      assert.param("column_id")(() => typia.assert(column_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
