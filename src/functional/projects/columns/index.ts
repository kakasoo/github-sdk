import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiProjectsColumns } from "../../../structures/IApiProjectsColumns";
import { project_minus_column } from "../../../structures/project_minus_column";
import { body } from "../../../structures/body";
export * as cards from "./cards";
export * as moves from "./moves";
/**
 * Get a project column.
 * Gets information about a project column.
 *
 * @tag projects
 * @path projects/columns/:column_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByColumn_id(
  connection: IConnection<getByColumn_id.Headers>,
  column_id: string,
): Promise<getByColumn_id.Output> {
  return !!connection.simulate
    ? getByColumn_id.simulate(connection, column_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByColumn_id.METADATA,
          path: getByColumn_id.path(column_id),
          status: null,
        },
      );
}
export namespace getByColumn_id {
  export type Headers = IApiProjectsColumns.GetHeader;
  export type Output = project_minus_column;

  export const METADATA = {
    method: "GET",
    path: "/projects/columns/:column_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (column_id: string) =>
    `/projects/columns/${encodeURIComponent(column_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): project_minus_column => typia.random<project_minus_column>(g);
  export const simulate = (
    connection: IConnection<getByColumn_id.Headers>,
    column_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByColumn_id.path(column_id),
      contentType: "application/json",
    });
    try {
      assert.param("column_id")(() => typia.assert(column_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * @tag projects
 * @path projects/columns/:column_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function patchByColumn_id(
  connection: IConnection<patchByColumn_id.Headers>,
  column_id: string,
  body: patchByColumn_id.Input,
): Promise<patchByColumn_id.Output> {
  return !!connection.simulate
    ? patchByColumn_id.simulate(connection, column_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByColumn_id.METADATA,
          path: patchByColumn_id.path(column_id),
          status: null,
        },
        body,
      );
}
export namespace patchByColumn_id {
  export type Headers = IApiProjectsColumns.PatchHeader;
  export type Input = body;
  export type Output = project_minus_column;

  export const METADATA = {
    method: "PATCH",
    path: "/projects/columns/:column_id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (column_id: string) =>
    `/projects/columns/${encodeURIComponent(column_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): project_minus_column => typia.random<project_minus_column>(g);
  export const simulate = (
    connection: IConnection<patchByColumn_id.Headers>,
    column_id: string,
    body: patchByColumn_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByColumn_id.path(column_id),
      contentType: "application/json",
    });
    try {
      assert.param("column_id")(() => typia.assert(column_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a project column.
 * Deletes a project column.
 *
 * @tag projects
 * @path projects/columns/:column_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByColumn_id(
  connection: IConnection<eraseByColumn_id.Headers>,
  column_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByColumn_id.simulate(connection, column_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByColumn_id.METADATA,
          path: eraseByColumn_id.path(column_id),
          status: null,
        },
      );
}
export namespace eraseByColumn_id {
  export type Headers = IApiProjectsColumns.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/projects/columns/:column_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (column_id: string) =>
    `/projects/columns/${encodeURIComponent(column_id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByColumn_id.Headers>,
    column_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByColumn_id.path(column_id),
      contentType: "application/json",
    });
    try {
      assert.param("column_id")(() => typia.assert(column_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * List project columns.
 * Lists the project columns in a project.
 *
 * @tag projects
 * @path projects/:project_id/columns
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByProject_id(
  connection: IConnection<getByProject_id.Headers>,
  project_id: string,
): Promise<getByProject_id.Output> {
  return !!connection.simulate
    ? getByProject_id.simulate(connection, project_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByProject_id.METADATA,
          path: getByProject_id.path(project_id),
          status: null,
        },
      );
}
export namespace getByProject_id {
  export type Headers = IApiProjectsColumns.GetHeader;
  export type Output = project_minus_column[];

  export const METADATA = {
    method: "GET",
    path: "/projects/:project_id/columns",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (project_id: string) =>
    `/projects/${encodeURIComponent(project_id ?? "null")}/columns`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): project_minus_column[] => typia.random<project_minus_column[]>(g);
  export const simulate = (
    connection: IConnection<getByProject_id.Headers>,
    project_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByProject_id.path(project_id),
      contentType: "application/json",
    });
    try {
      assert.param("project_id")(() => typia.assert(project_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create a project column.
 * Creates a new project column.
 *
 * @tag projects
 * @path projects/:project_id/columns
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByProject_id(
  connection: IConnection<postByProject_id.Headers>,
  project_id: string,
  body: postByProject_id.Input,
): Promise<postByProject_id.Output> {
  return !!connection.simulate
    ? postByProject_id.simulate(connection, project_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByProject_id.METADATA,
          path: postByProject_id.path(project_id),
          status: null,
        },
        body,
      );
}
export namespace postByProject_id {
  export type Headers = IApiProjectsColumns.PostHeader;
  export type Input = body;
  export type Output = project_minus_column;

  export const METADATA = {
    method: "POST",
    path: "/projects/:project_id/columns",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (project_id: string) =>
    `/projects/${encodeURIComponent(project_id ?? "null")}/columns`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): project_minus_column => typia.random<project_minus_column>(g);
  export const simulate = (
    connection: IConnection<postByProject_id.Headers>,
    project_id: string,
    body: postByProject_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByProject_id.path(project_id),
      contentType: "application/json",
    });
    try {
      assert.param("project_id")(() => typia.assert(project_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
