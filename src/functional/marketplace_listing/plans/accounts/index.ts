import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiMarketplaceListingPlansAccounts } from "../../../../structures/IApiMarketplaceListingPlansAccounts";
import { marketplace_minus_purchase } from "../../../../structures/marketplace_minus_purchase";

/**
 * List accounts for a plan.
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
 *
 * @tag apps
 * @path marketplace_listing/plans/:plan_id/accounts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByPlan_id(
  connection: IConnection<getByPlan_id.Headers>,
  plan_id: string,
  query: getByPlan_id.Query,
): Promise<getByPlan_id.Output> {
  return !!connection.simulate
    ? getByPlan_id.simulate(connection, plan_id, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByPlan_id.METADATA,
          path: getByPlan_id.path(plan_id, query),
          status: null,
        },
      );
}
export namespace getByPlan_id {
  export type Headers = IApiMarketplaceListingPlansAccounts.GetHeader;
  export type Query = IApiMarketplaceListingPlansAccounts.GetQuery;
  export type Output = marketplace_minus_purchase[];

  export const METADATA = {
    method: "GET",
    path: "/marketplace_listing/plans/:plan_id/accounts",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (plan_id: string, query: getByPlan_id.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/marketplace_listing/plans/${encodeURIComponent(plan_id ?? "null")}/accounts`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): marketplace_minus_purchase[] =>
    typia.random<marketplace_minus_purchase[]>(g);
  export const simulate = (
    connection: IConnection<getByPlan_id.Headers>,
    plan_id: string,
    query: getByPlan_id.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByPlan_id.path(plan_id, query),
      contentType: "application/json",
    });
    try {
      assert.param("plan_id")(() => typia.assert(plan_id));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
