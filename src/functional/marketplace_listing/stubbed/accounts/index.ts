import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiMarketplaceListingStubbedAccounts } from "../../../../structures/IApiMarketplaceListingStubbedAccounts";
import { marketplace_minus_purchase } from "../../../../structures/marketplace_minus_purchase";
/**
 * Get a subscription plan for an account (stubbed).
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
 *
 * @tag apps
 * @path marketplace_listing/stubbed/accounts/:account_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByAccount_id(
  connection: IConnection<getByAccount_id.Headers>,
  account_id: string,
): Promise<getByAccount_id.Output> {
  return !!connection.simulate
    ? getByAccount_id.simulate(connection, account_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByAccount_id.METADATA,
          path: getByAccount_id.path(account_id),
          status: null,
        },
      );
}
export namespace getByAccount_id {
  export type Headers = IApiMarketplaceListingStubbedAccounts.GetHeader;
  export type Output = marketplace_minus_purchase;

  export const METADATA = {
    method: "GET",
    path: "/marketplace_listing/stubbed/accounts/:account_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (account_id: string) =>
    `/marketplace_listing/stubbed/accounts/${encodeURIComponent(account_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): marketplace_minus_purchase => typia.random<marketplace_minus_purchase>(g);
  export const simulate = (
    connection: IConnection<getByAccount_id.Headers>,
    account_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByAccount_id.path(account_id),
      contentType: "application/json",
    });
    try {
      assert.param("account_id")(() => typia.assert(account_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
