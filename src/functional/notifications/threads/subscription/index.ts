import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IApiNotificationsThreadsSubscription } from "../../../../structures/IApiNotificationsThreadsSubscription";
import { thread_minus_subscription } from "../../../../structures/thread_minus_subscription";
import { body } from "../../../../structures/body";
/**
 * Get a thread subscription for the authenticated user.
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 *
 * @tag activity
 * @path notifications/threads/:thread_id/subscription
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByThread_id(
  connection: IConnection<getByThread_id.Headers>,
  thread_id: string,
): Promise<getByThread_id.Output> {
  return !!connection.simulate
    ? getByThread_id.simulate(connection, thread_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByThread_id.METADATA,
          path: getByThread_id.path(thread_id),
          status: null,
        },
      );
}
export namespace getByThread_id {
  export type Headers = IApiNotificationsThreadsSubscription.GetHeader;
  export type Output = thread_minus_subscription;

  export const METADATA = {
    method: "GET",
    path: "/notifications/threads/:thread_id/subscription",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (thread_id: string) =>
    `/notifications/threads/${encodeURIComponent(thread_id ?? "null")}/subscription`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): thread_minus_subscription => typia.random<thread_minus_subscription>(g);
  export const simulate = (
    connection: IConnection<getByThread_id.Headers>,
    thread_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByThread_id.path(thread_id),
      contentType: "application/json",
    });
    try {
      assert.param("thread_id")(() => typia.assert(thread_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Set a thread subscription.
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
 *
 * @tag activity
 * @path notifications/threads/:thread_id/subscription
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByThread_id(
  connection: IConnection<putByThread_id.Headers>,
  thread_id: string,
  body: putByThread_id.Input,
): Promise<putByThread_id.Output> {
  return !!connection.simulate
    ? putByThread_id.simulate(connection, thread_id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByThread_id.METADATA,
          path: putByThread_id.path(thread_id),
          status: null,
        },
        body,
      );
}
export namespace putByThread_id {
  export type Headers = IApiNotificationsThreadsSubscription.PutHeader;
  export type Input = body;
  export type Output = thread_minus_subscription;

  export const METADATA = {
    method: "PUT",
    path: "/notifications/threads/:thread_id/subscription",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (thread_id: string) =>
    `/notifications/threads/${encodeURIComponent(thread_id ?? "null")}/subscription`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): thread_minus_subscription => typia.random<thread_minus_subscription>(g);
  export const simulate = (
    connection: IConnection<putByThread_id.Headers>,
    thread_id: string,
    body: putByThread_id.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByThread_id.path(thread_id),
      contentType: "application/json",
    });
    try {
      assert.param("thread_id")(() => typia.assert(thread_id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Delete a thread subscription.
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.
 *
 * @tag activity
 * @path notifications/threads/:thread_id/subscription
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByThread_id(
  connection: IConnection<eraseByThread_id.Headers>,
  thread_id: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByThread_id.simulate(connection, thread_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByThread_id.METADATA,
          path: eraseByThread_id.path(thread_id),
          status: null,
        },
      );
}
export namespace eraseByThread_id {
  export type Headers = IApiNotificationsThreadsSubscription.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/notifications/threads/:thread_id/subscription",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (thread_id: string) =>
    `/notifications/threads/${encodeURIComponent(thread_id ?? "null")}/subscription`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByThread_id.Headers>,
    thread_id: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByThread_id.path(thread_id),
      contentType: "application/json",
    });
    try {
      assert.param("thread_id")(() => typia.assert(thread_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
