import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiAdvisories } from "../../structures/IApiAdvisories";
import { global_minus_advisory } from "../../structures/global_minus_advisory";

/**
 * List global security advisories.
 * Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.
 *
 * By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
 *
 * @tag security-advisories
 * @path advisories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Headers>,
  query: get.Query,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection, query)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(query),
          status: null,
        },
      );
}
export namespace get {
  export type Headers = IApiAdvisories.GetHeader;
  export type Query = IApiAdvisories.GetQuery;
  export type Output = global_minus_advisory[];

  export const METADATA = {
    method: "GET",
    path: "/advisories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (query: get.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/advisories";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): global_minus_advisory[] => typia.random<global_minus_advisory[]>(g);
  export const simulate = (
    connection: IConnection<get.Headers>,
    query: get.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: get.path(query),
      contentType: "application/json",
    });
    try {
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a global security advisory.
 * Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
 *
 * @tag security-advisories
 * @path advisories/:ghsa_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByGhsa_id(
  connection: IConnection<getByGhsa_id.Headers>,
  ghsa_id: string,
): Promise<getByGhsa_id.Output> {
  return !!connection.simulate
    ? getByGhsa_id.simulate(connection, ghsa_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByGhsa_id.METADATA,
          path: getByGhsa_id.path(ghsa_id),
          status: null,
        },
      );
}
export namespace getByGhsa_id {
  export type Headers = IApiAdvisories.GetHeader;
  export type Output = global_minus_advisory;

  export const METADATA = {
    method: "GET",
    path: "/advisories/:ghsa_id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (ghsa_id: string) =>
    `/advisories/${encodeURIComponent(ghsa_id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): global_minus_advisory => typia.random<global_minus_advisory>(g);
  export const simulate = (
    connection: IConnection<getByGhsa_id.Headers>,
    ghsa_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByGhsa_id.path(ghsa_id),
      contentType: "application/json",
    });
    try {
      assert.param("ghsa_id")(() => typia.assert(ghsa_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
