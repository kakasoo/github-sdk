import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { code_minus_of_minus_conduct } from "../../structures/code_minus_of_minus_conduct";

/**
 * Get all codes of conduct.
 * Returns array of all GitHub's codes of conduct.
 *
 * @tag codes-of-conduct
 * @path codes_of_conduct
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(connection: IConnection): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...get.METADATA,
          path: get.path(),
          status: null,
        },
      );
}
export namespace get {
  export type Output = code_minus_of_minus_conduct[];

  export const METADATA = {
    method: "GET",
    path: "/codes_of_conduct",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/codes_of_conduct";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_of_minus_conduct[] =>
    typia.random<code_minus_of_minus_conduct[]>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Get a code of conduct.
 * Returns information about the specified GitHub code of conduct.
 *
 * @tag codes-of-conduct
 * @path codes_of_conduct/:key
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByKey(
  connection: IConnection,
  key: string,
): Promise<getByKey.Output> {
  return !!connection.simulate
    ? getByKey.simulate(connection, key)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByKey.METADATA,
          path: getByKey.path(key),
          status: null,
        },
      );
}
export namespace getByKey {
  export type Output = code_minus_of_minus_conduct;

  export const METADATA = {
    method: "GET",
    path: "/codes_of_conduct/:key",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (key: string) =>
    `/codes_of_conduct/${encodeURIComponent(key ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): code_minus_of_minus_conduct =>
    typia.random<code_minus_of_minus_conduct>(g);
  export const simulate = (connection: IConnection, key: string): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByKey.path(key),
      contentType: "application/json",
    });
    try {
      assert.param("key")(() => typia.assert(key));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
