import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiTeamsRepos } from "../../../structures/IApiTeamsRepos";
import { body } from "../../../structures/body";
import { minimal_minus_repository } from "../../../structures/minimal_minus_repository";
import { team_minus_repository } from "../../../structures/team_minus_repository";

/**
 * List team repositories (Legacy).
 * > [!WARNING]
 * > **Deprecation notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
 *
 * @tag teams
 * @deprecated
 * @path teams/:team_id/repos
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByTeam_id(
  connection: IConnection<getByTeam_id.Headers>,
  team_id: string,
): Promise<getByTeam_id.Output> {
  return !!connection.simulate
    ? getByTeam_id.simulate(connection, team_id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByTeam_id.METADATA,
          path: getByTeam_id.path(team_id),
          status: null,
        },
      );
}
export namespace getByTeam_id {
  export type Headers = IApiTeamsRepos.GetHeader;
  export type Output = minimal_minus_repository[];

  export const METADATA = {
    method: "GET",
    path: "/teams/:team_id/repos",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (team_id: string) =>
    `/teams/${encodeURIComponent(team_id ?? "null")}/repos`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): minimal_minus_repository[] => typia.random<minimal_minus_repository[]>(g);
  export const simulate = (
    connection: IConnection<getByTeam_id.Headers>,
    team_id: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByTeam_id.path(team_id),
      contentType: "application/json",
    });
    try {
      assert.param("team_id")(() => typia.assert(team_id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Check team permissions for a repository (Legacy).
 * > [!WARNING]
 * > **Deprecation notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * > [!NOTE]
 * > Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `Accept` header:
 *
 * @tag teams
 * @deprecated
 * @path teams/:team_id/repos/:owner/:repo
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByTeam_idAndOwnerAndRepo(
  connection: IConnection<getByTeam_idAndOwnerAndRepo.Headers>,
  team_id: string,
  owner: string,
  repo: string,
): Promise<getByTeam_idAndOwnerAndRepo.Output> {
  return !!connection.simulate
    ? getByTeam_idAndOwnerAndRepo.simulate(connection, team_id, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByTeam_idAndOwnerAndRepo.METADATA,
          path: getByTeam_idAndOwnerAndRepo.path(team_id, owner, repo),
          status: null,
        },
      );
}
export namespace getByTeam_idAndOwnerAndRepo {
  export type Headers = IApiTeamsRepos.GetHeader;
  export type Output = team_minus_repository;

  export const METADATA = {
    method: "GET",
    path: "/teams/:team_id/repos/:owner/:repo",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (team_id: string, owner: string, repo: string) =>
    `/teams/${encodeURIComponent(team_id ?? "null")}/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): team_minus_repository => typia.random<team_minus_repository>(g);
  export const simulate = (
    connection: IConnection<getByTeam_idAndOwnerAndRepo.Headers>,
    team_id: string,
    owner: string,
    repo: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByTeam_idAndOwnerAndRepo.path(team_id, owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("team_id")(() => typia.assert(team_id));
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Add or update team repository permissions (Legacy).
 * > [!WARNING]
 * > **Deprecation notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 *
 * @tag teams
 * @deprecated
 * @path teams/:team_id/repos/:owner/:repo
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function putByTeam_idAndOwnerAndRepo(
  connection: IConnection<putByTeam_idAndOwnerAndRepo.Headers>,
  team_id: string,
  owner: string,
  repo: string,
  body: putByTeam_idAndOwnerAndRepo.Input,
): Promise<void> {
  return !!connection.simulate
    ? putByTeam_idAndOwnerAndRepo.simulate(
        connection,
        team_id,
        owner,
        repo,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByTeam_idAndOwnerAndRepo.METADATA,
          path: putByTeam_idAndOwnerAndRepo.path(team_id, owner, repo),
          status: null,
        },
        body,
      );
}
export namespace putByTeam_idAndOwnerAndRepo {
  export type Headers = IApiTeamsRepos.PutHeader;
  export type Input = body;

  export const METADATA = {
    method: "PUT",
    path: "/teams/:team_id/repos/:owner/:repo",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (team_id: string, owner: string, repo: string) =>
    `/teams/${encodeURIComponent(team_id ?? "null")}/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<putByTeam_idAndOwnerAndRepo.Headers>,
    team_id: string,
    owner: string,
    repo: string,
    body: putByTeam_idAndOwnerAndRepo.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByTeam_idAndOwnerAndRepo.path(team_id, owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("team_id")(() => typia.assert(team_id));
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Remove a repository from a team (Legacy).
 * > [!WARNING]
 * > **Deprecation notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 *
 * @tag teams
 * @deprecated
 * @path teams/:team_id/repos/:owner/:repo
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function eraseByTeam_idAndOwnerAndRepo(
  connection: IConnection<eraseByTeam_idAndOwnerAndRepo.Headers>,
  team_id: string,
  owner: string,
  repo: string,
): Promise<void> {
  return !!connection.simulate
    ? eraseByTeam_idAndOwnerAndRepo.simulate(connection, team_id, owner, repo)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseByTeam_idAndOwnerAndRepo.METADATA,
          path: eraseByTeam_idAndOwnerAndRepo.path(team_id, owner, repo),
          status: null,
        },
      );
}
export namespace eraseByTeam_idAndOwnerAndRepo {
  export type Headers = IApiTeamsRepos.DeleteHeader;

  export const METADATA = {
    method: "DELETE",
    path: "/teams/:team_id/repos/:owner/:repo",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (team_id: string, owner: string, repo: string) =>
    `/teams/${encodeURIComponent(team_id ?? "null")}/repos/${encodeURIComponent(owner ?? "null")}/${encodeURIComponent(repo ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection<eraseByTeam_idAndOwnerAndRepo.Headers>,
    team_id: string,
    owner: string,
    repo: string,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseByTeam_idAndOwnerAndRepo.path(team_id, owner, repo),
      contentType: "application/json",
    });
    try {
      assert.param("team_id")(() => typia.assert(team_id));
      assert.param("owner")(() => typia.assert(owner));
      assert.param("repo")(() => typia.assert(repo));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
