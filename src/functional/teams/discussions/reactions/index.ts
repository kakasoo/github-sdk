import { HttpError, IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IApiTeamsDiscussionsReactions } from "../../../../structures/IApiTeamsDiscussionsReactions";
import { body } from "../../../../structures/body";
import { reaction } from "../../../../structures/reaction";

/**
 * List reactions for a team discussion (Legacy).
 * > [!WARNING]
 * > **Deprecation notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
 *
 * @tag reactions
 * @deprecated
 * @path teams/:team_id/discussions/:discussion_number/reactions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getByTeam_idAndDiscussion_number(
  connection: IConnection<getByTeam_idAndDiscussion_number.Headers>,
  team_id: string,
  discussion_number: string,
  query: getByTeam_idAndDiscussion_number.Query,
): Promise<getByTeam_idAndDiscussion_number.Output> {
  return !!connection.simulate
    ? getByTeam_idAndDiscussion_number.simulate(
        connection,
        team_id,
        discussion_number,
        query,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getByTeam_idAndDiscussion_number.METADATA,
          path: getByTeam_idAndDiscussion_number.path(
            team_id,
            discussion_number,
            query,
          ),
          status: null,
        },
      );
}
export namespace getByTeam_idAndDiscussion_number {
  export type Headers = IApiTeamsDiscussionsReactions.GetHeader;
  export type Query = IApiTeamsDiscussionsReactions.GetQuery;
  export type Output = reaction[];

  export const METADATA = {
    method: "GET",
    path: "/teams/:team_id/discussions/:discussion_number/reactions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (
    team_id: string,
    discussion_number: string,
    query: getByTeam_idAndDiscussion_number.Query,
  ) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/teams/${encodeURIComponent(team_id ?? "null")}/discussions/${encodeURIComponent(discussion_number ?? "null")}/reactions`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (g?: Partial<typia.IRandomGenerator>): reaction[] =>
    typia.random<reaction[]>(g);
  export const simulate = (
    connection: IConnection<getByTeam_idAndDiscussion_number.Headers>,
    team_id: string,
    discussion_number: string,
    query: getByTeam_idAndDiscussion_number.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getByTeam_idAndDiscussion_number.path(
        team_id,
        discussion_number,
        query,
      ),
      contentType: "application/json",
    });
    try {
      assert.param("team_id")(() => typia.assert(team_id));
      assert.param("discussion_number")(() => typia.assert(discussion_number));
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
/**
 * Create reaction for a team discussion (Legacy).
 * > [!WARNING]
 * > **Deprecation notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
 *
 * A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
 *
 * @tag reactions
 * @deprecated
 * @path teams/:team_id/discussions/:discussion_number/reactions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postByTeam_idAndDiscussion_number(
  connection: IConnection<postByTeam_idAndDiscussion_number.Headers>,
  team_id: string,
  discussion_number: string,
  body: postByTeam_idAndDiscussion_number.Input,
): Promise<postByTeam_idAndDiscussion_number.Output> {
  return !!connection.simulate
    ? postByTeam_idAndDiscussion_number.simulate(
        connection,
        team_id,
        discussion_number,
        body,
      )
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...postByTeam_idAndDiscussion_number.METADATA,
          path: postByTeam_idAndDiscussion_number.path(
            team_id,
            discussion_number,
          ),
          status: null,
        },
        body,
      );
}
export namespace postByTeam_idAndDiscussion_number {
  export type Headers = IApiTeamsDiscussionsReactions.PostHeader;
  export type Input = body;
  export type Output = reaction;

  export const METADATA = {
    method: "POST",
    path: "/teams/:team_id/discussions/:discussion_number/reactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (team_id: string, discussion_number: string) =>
    `/teams/${encodeURIComponent(team_id ?? "null")}/discussions/${encodeURIComponent(discussion_number ?? "null")}/reactions`;
  export const random = (g?: Partial<typia.IRandomGenerator>): reaction =>
    typia.random<reaction>(g);
  export const simulate = (
    connection: IConnection<postByTeam_idAndDiscussion_number.Headers>,
    team_id: string,
    discussion_number: string,
    body: postByTeam_idAndDiscussion_number.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: postByTeam_idAndDiscussion_number.path(team_id, discussion_number),
      contentType: "application/json",
    });
    try {
      assert.param("team_id")(() => typia.assert(team_id));
      assert.param("discussion_number")(() => typia.assert(discussion_number));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
